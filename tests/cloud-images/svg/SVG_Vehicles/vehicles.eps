%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: vehicles.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Hector Toledo Soto
%%CreationDate: 3/26/09
%%BoundingBox: 0 0 709 671
%%HiResBoundingBox: 0 0 708.9175 670.3453
%%CropBox: 0 0 708.9175 670.3453
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 124 8%%BeginData: 14760 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD32FFA884FD09FFA8A87D7D52527DA8A8FD11FFA87D522E272E2E%7D7DFD2AFFA8A87DA87DA87DFD04A8FD1DFF2E282E84FD04FF7D51F82726%2720FD04274B4B767DA8A8FD04FFA1A1FD04FF842E2E275252592E522727%27A8FD25FFA87D527D527D527D7D7D527D527D527DA8A8A8CACAFD16FF7E%52592859A8FFFFFFA87D274B4B524B524B514B51274B2752527C768393B0%9AFFA8522759597D597E59847D845952277DFD22FFA8527C7DA8A8FFA8FF%A8FFFD04A87D7D527D7D52448CCAFD15FFA859597D2E2E52A8FD04FF7D52%264B2751274B2751274B274B274B274B4468272E2E7D597D5959537D84FF%A8FF84590559FD20FF7E52A8CFFD05FFA8FFA8A8FD047D527D7DA87DA1CA%FD17FF7D59598459532E84FD05FFA7514B27524B524B524B524B524B524B%522E59597E597E597D597D7EFD05FFA87D277DFD1EFFA852A8FFFFFFCFA8%A87D7DFD09527D7DA8FD1AFF5259597D59592E527D7DA8FFFFFF7D522727%275227512751275127522E59597D597D597D597D5384A8FD05FFA87D277D%A8FD1CFF52A8CFFFA8FFA87DFD05527D5252527D525252A8599A8CC3FD17%FFA8527D597D597D53592E59FD05FFA8524B27524B524B524B522E7E597D%597D597D597D597D59AFFD06FF7D592E52527DA8FD18FFA8527DCFA8A8A8%A728FD0D527D7D4B9AA8FD18FF7D527D597D597D597D2E7DFD06FFA87627%4B274B2752527D597D5959597D5959597D5959598484A87D845959597D59%592E522E597DA8A9FD14FF527D7D7D7C7D5252527D5252527D5252527D52%A852A87DFD1BFFA859597E597D597E597D2E7DFD08FF52272759597E597E%597D5984597E59847D7E597D597D597D597D597E597D59847D7D53592E59%7DA8FD12FF7D27FD1152A87D7D84A1C3A1FD19FF7D52597D597D597D597D%2E59A8FFFFFFA88452535259597D597D597D5959525952522E525259597D%5959597D597D597D597D597D7D847D8459592E535384A8FD0EFFA8FD0A52%7D5252527D52527DFF7D7D7D52689AFD1AFF5959597D597D597D597D5259%7DA852522E59597E597D597D597E5952274B274B274B274B274B527D597D%597D597D595952522E7D7DA883A884845959525959A8FD0DFF5252527D27%27F82727FD06527D7DFFA8527D7D7DCAFD1CFF2E59597D59595984595953%592E52527D597D597D5959597D2E2726512751275127512751272727FD05%592E5259845252597D59837D8484A87D8459592E5359A8FD0BFF527DA827%27A82727527D527D7DFD04FF7D52A8FD1FFFA82E7E595984FFA8A8597E59%7E597E597D597E597E597D274B4B524B524B524B524B524B524B272D7E59%595284A8FFA87D5284597D598484A884FFA8AF84A87D592E7DA8FD09FFA8%7DA827275227277D5252A8FFA8A87D7D52A8FD21FF7D2E7D59A8A8FFA87D%597D597D597D597D597E5352274B4B512751275127512751275127512727%535952A8A88459592E52597D5959597D7D847DA8A8AFA8AE8484595252A8%FD08FFA87DA85227277D7D5252A87D7D7DA8A8FD24FF592E7D59A8848459%7D597D597D597D597D525127524B524B524B524B5127524B524B524B5126%FD055952592E592E7D597D597D597D7D847DA8A8AFA8FFA8AF7D592EA8FD%08FFA8A8FFA8FFA8A1527676A8AFFD27FFA82E527D5959537D5959597D59%7D595927272751274B2751274B27514B514B524B524B512727527D2E2E2E%532E522E2E527D597D5959597D597D598483A884AEA884532E27FD0AFFA8%FFFFFF7D76767D76A1A1FD27FFA852537D5984597E597D5959525227514B%524B524B524B524B7652765276767D767C4B4B5284597D597D5359525952%7D5984597E5984597D597D597D597D59592E5252A8FD09FF7DA8A8FFA87D%767DFD047652A1A8FD25FF7D522E52272E282E2E53272727514B51275127%4B275251765176517C7DA7A17D272727522E522E522E522E522E522E522E%522E522E522E522E535252527D5984A8FD0AFF7D7676FFFFA8767D767D77%7DFD0576CAFD26FFA8A8A8AFA87D4B514B524B524B512752517652765276%76A8A7A87D762776A8AFFD04A87DA87DA87EA87DA87EA884FD04A8FFA8FF%A8FD10FFA176767DA8FF76764C7E7F855A855A7D52764B7DA8FD27FFA87D%274B2751274B275127524B765152517D7DA87D7D5127207DFD2AFFA176A8%A8FFA87D767DFD0585AF85A97D7776767DFD25FF7D5227524B524B524B52%5176527C767C7DA8A1A176522751529AB0C3A8FD27FFCA527DA8FFA8A87D%7D528585855B8585AFAFAF7E7D767676A8FD21FFA84B272752275127514B%5251765176517C7D7D765227272752767D6FFC8CA1FD27FFA1767DFFFFFF%A8FF7D76538585857FA9A9FFFFAF857D767D76A1CAFD1DFFA87627514B52%4B524B52517676765276767652764B4B277670CAA8FFA8A19AFD28FFA87D%767D7DFFA8FFA8A876765A857F857FA9A9A985855A76767D5276A8FD1BFF%764B274B2751274B275251765176517651764B4B264B4B7D6FB08DA1FD2D%FF76A176A17DA17DA177A1767DFD08857E7776A177A17676A1FD18FFA84B%4B4B524B524B52517C7676527C76764B522752527D7DA77D9A8C9AA8FD2C%FFA1767DA1767D7676747C757C7677537E597E537D5276767D767D527676%767DFD15FFA852274B275127514B765276517652764B5127514B93A1FD05%FFA1CAFD2EFFA876A8A17D767D7BFEA47B767D767D7676767D767D76A176%7D527D527652767DA87D5276FD0FFF7D4B27524B524B765276527C52764B%4B274B4B7C7C9A8C8C9AFD34FF7D767DA87D7D50A4CECC5076767D767D76%7D767D767D767D4B52527D52527DA87D52F8277DFD0CFFA12727274B2751%4B5251765151274B2752527D7DA87DA86F92A1FD35FFA876A8A8A87DA176%AB9F9F76A176A1767D76A1767D76A17752527D7D7D52A8A8A876F827A1FD%0AFFA852F8272627274B2751274B2751527DA8FD40FFA87676A8A8A8A1A2%7B7D767D767D767D767D767D767D767D5252527D52777D7D767D2776A8FD%0BFFA8A87D7D51272627264B52A7A8FD29FFA8FFA8CFA8FFA8A8A8CFA8CF%A8FFA8FFCFFD0AFF767D76A1A1A8A1A8A1A17DA17DA176A17DA176A1767D%76A17677527D76764B7DFD16FF7DA8FD2AFFA8FFA8CFA8CFA8CFA8CFA8CF%A8CFA8CFA8CFA8CFA8FD06FF764B274B4B764B764B764B76527652765276%4B7652764B7652764B7652764B522727274B52A8FD3CFFA8CAFD19A8FFFF%524B4B7DA1A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA8A1A87D7D4B4B20A8FD3AFFCFCFA8CFA8FFA8CFA8FFA8CFA8FFA8CFA8%FFA8CFA8FFA8CFA8FFA8CFA87D274B7DA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D274B27FD3BFFA8CAA8A8%A8CFA8A8A8CFA8A8A8CFA8A8A8CFA8A8A8CFA8A8A8CFA8A852277DA8FFA8%A87D7D7DFFA8A87D7D7DA8A8FF7D7D7DA8A8FF7D7D7DA8A8FF7D7D7DA8A8%FFA8524B277DFD3BFFA8CFA8CFA8FFA8CFA8FFA8CFA8FFA8FFA8FFA8CFA8%CFA8CFA8FFFF274B52FFA8A8FD057DFFFD057DFFFD047D52FFA8FD047DA8%A87D7D7D52A8A8AF524B207DFD3CFFA8FFFD08A8A7A8A7C9A7FD06A8CFA8%FFFFFF4B4B7DA8FFA8A87D7D7DFFFFA87DA87DA8A8A87D7D7DA8A8A87DA8%7D7DA8FFFD047DA8FFA8764B2752FD43FFA7A7A7C89FA67CA67CA87DFD08%FF274B52A8A8FF7DA87DA8A8FFA8A87DA8A8FFA8A87DA8A8FFA8A87DA8A8%FFA8A87DA87DFFA8A84B4B207DFD42FFA07BA0C89F7C7EA984A984A97DFD%07FF7D21527DFFAFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8%FFA8FFA8FFFFFFA8FF524B274BFD42FFA79FA7C99FA57DFFAFFFFFFFAFA9%84FD06FFA852204B527D7D7D767D7D7D767D7D7D767D7D7D767D7D7D767D%7D7D767D7D7D767D7D7D524B20277DFD42FF7BA0C99F9F7BA8A9AFA9FFA9%FFA984A8FD07FF7D4B52274B2752274B2752274B2752274B2752274B2752%274B2752274B2752274C27522752A8FD42FFCA7BCEA6A59FA6A9AFA9AFA9%AFA9FFA984FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FD35FFA8A8A8FD0DFFA09FA0A59FA57CA9A9A9%A8AFA8A9A9FF7EA8FD5DFFA8CFA8CFA8FD0CFFA09FA69FA69FA7A9AFA9AF%A9AFA9AFA9A984FD5CFFFD07A8FD0AFFCF74A6FD049F7DAFA8A9A8A9A8A9%A8AFA87EA8FD5CFFA8FFA8CFA8FD0BFFA79F9FA69FA69FA784AFA9AFA9FF%A9AFA9FF7EFD5CFFA8A8A8CFA8A8A8CAA7A8A7CAA7A8A7A77B7B9FA59FA5%9FA59FA07C837D847EA984847D7DA8FD5CFFA8CFA8FFA8A7749F7B9F7B9F%7B9F7BA69FA69FA69FA59FA69FA59FA59FA67BA69FA67BCAFD5DFFFD04A7%9FA59FA69FA6A0C9A6C9A6A69F9F9FA59F9F9FA59F9F9FA59F9F9FA6A69F%7CFD5DFFCF7B9F7AA59FC89FA69FA69FA69FA69FA69FA69FA69FA69FA69F%A69FA6A5C9A6C87AA7FD5FFFA7A77B7B749F7B9F9FA69FA59FA59FA59FA5%9F9F9FA59FA59F7C52A0A6C89F7AA7FD62FFCFCAA0A07B9F7A9F9FA59FA6%9FA69FA69FA69FA6A6A658A8587B7B9F74A7A8FD66FFA7A77B9F747B749F%7A9F9FA6A0A6A6C97C7D7D582C5757505683FD6BFFCAA775A07B9F7B9F7B%A69FA0517C5656577C8282A8FD68FF7D597DA85984FFFF2DA7CACAA7A751%A77C58A8A7A7FD68FFA8FFFFFF272D27582E59522E7DA8A8FFAF7D7DFF27%A8A87D52A8FD65FF592D2E597D7D2E522E2DFD0427052D27272758272705%2D052752FD66FF58342D2E2E582E5852582E522E522E582D5252522D582D%58A8FD68FF7D8358582E582D2E2D2E2D2E2D582E2E2D2E2D2E2D58A8FD6E%FFFD04A87DA87D837D837D837DA884A8FD39FFA87D4BA8FD7AFFA85227F8%20F8527DCAFD74FFA85227F8F8F8272727F8F8F82752A8A8FD6EFF764BF8%F8F8272752527D527D52522020F8274B7DA8FD67FFA8764BF8F8F827F82E%2752275227FD04527D52522727F8F820527DA8FD61FFA85220F8F820F827%20FD0427522752525227FD04527D7D7D52522020F84B52A8A8FD5EFFA8A1%7D7D4B27F820F8F8F820F827F8FD042752275227FD04527D52522727F820%20767DFD62FF7DA176522027F820F820F8FD042752275227FD04527D527D%5227F820204B52A8A8FD63FFA87D7D4B4BF820F820F827F8FD0427522752%27FD05522720F82027767DFD0BFFA8A87D7D5252274B4B7DA8FD4AFFA8A8%7D7D2727F8272727F8FD08275227FD04527D527D524B2027205252A8A1A8%7D7D4B5227272027F82720272020F8204BA1FD3FFFA1A87D7D4B522727F8%27F8F8F827F827F827F827F827F827F827F827F8FD062752275227522720%F8F8F820F820F8FD04275227522752525227522720F82052A8FD39FF7D52%2720FD05F8272727F8FD0F2705272727F8272027F8272020F82020FD0427%5227FD065259527D527D7D7DFD055227F820F876A8FD38FFA8FFA8A17676%2727F827F827F827F827F827F827F827F827F827F820F820F820F820F820%F8FD04275227FD0652FD0B7DFD04522752FD0427F8204BFD35FFA87DFD05%A87D522721F820F8272027F8272020F8202020F827202720FD0427FD0452%7D527D52FD0B7D527D527D527D527D527D525227525252F8522727F82020%7DFD33FFA852FD05F820F820F8272020F827202720272027274B275227FD%04527D527D527D527D527D527D527DFD0E5227522752275227522752FD05%27522727F8277DFD34FF5227F820275227522752275227FD045259527D52%7D527D527D527D527DFD1252275252522752275227522752FD0427F8FD04%27527D7D2727F82052FD34FFA87D20F8F827275227522752275227522752%275227522752275227522752275227522752275227522752275227522727%27522752275227522752F82727522727F8FD0427522727275227F820A8FD%35FF7D4BF820205252522752525227525252275252522752525227525252%27FD0552FD0427F827FD07F8272752525227525227F8527D52F8FD042752%275227525252272720A1FD2DFFA8FFA8A87D7D767D4B2720272752275227%522752275227522752275227522752275227522727F8F8F827F827F82727%5227FD0552F8F8F852275227522727F827F8272752275227522752275252%522727F876FD2BFF5227F820F8202027274B275252522752525227525252%2752525227525252275252522727F827F85227FD0452FD047DA87DFD05A8%5227F852525227522752275252522752525227525252277D7D7D2727F852%FD2BFFA152F8F82052275227522752275227522752275227522752275227%5227522727F82727522752275252522752525227FD06527D7DA852F8F852%275227522752275227522752275227522752277DA87D2727F852FD2DFF52%20F82727FD05522752525227525252275252522752525227522727275227%5227525252275252522752525227FD05527D7D2727525227525252275252%5227525252275252522752527DA87D524BF852FD2DFFA876F8F820272752%2752275227522752275227522752275227522752FD092752275227522752%27522752275227525227F852275227522752275227522752275227522752%2752527DA87D2727F852FD2FFF7D27F82727525252275252522752525227%52525227525252275252522752FD09275227522752275227522752272727%525252275227522752525227FD08527D7DA87D525227F87DFD2FFFA87D20%F8F84B275227522752275227522752275227522752275227522752275227%52FD0627F8272727F8FD062752275227522752525227FD0852FD057D5252%27522720F8A8FD31FF7D4BF8272752525227525252275252522752525227%5252522752525227FD07522752525227FD08527D5252527D5252527D527D%52FD057DFD0452275227272020F82052FD33FFA82720F852275227522752%27522752275227522752275227522752275227522752275227FD10527D52%FD057D527D525227522727F820F820204B52A1A8FD36FFA14BF827275227%52525227525252275252522752275227FD08527D5252527DFD09527D527D%7DA87DA87D7DFD045227522727F820204B4B7DA8FD30FFAFFFA8FF7D7D76%7D5252204B2020F820275227522752275227522752275227FD16527D7DA8%7DA87D7D52522752FD0427F8F8F82027527DA8FD2DFF7DA87D7D5276274B%2027F820F820F820F827274B2752275227FD08527D527D527D527D527D52%52527DFD0752FD047DA8A8A87DA87D7D52522E5227272020F820205276A8%A8FD30FFA820F820F8F8F820F82020FD04275227522752275227FD1C527D%7DFD05A87D7D5252275227272027F8F8F84B4B7DA1FD36FFA827F8202052%275252522D52525227FD08527D5252527D5252527D5252527DFD0752FD04%7DFD05A87D7DFD045227522727F820F827277D7DFD3CFFA820F820205227%52275227FD175227FD04527D7DA87DA8A8A87D7D52522E52FD0427F8F8F8%20205276A8A8FD40FFA84BF82020FD04527D527D527D5252527D5252527D%5252527D5252527D52FD047DFD07A87D7DFD045227522727F820204B52A8%A8FD46FFA827F820F85227FD12527D527D7DA87DFD05A87D7D52522752FD%0427F8F8F827277D7DFD4CFFA84BF82020FD04527D5252527DFD05527D52%7D7DA87DFD07A87D7D5252275227272020F82020767DA8FD51FFA84BF820%F84B27FD0852FD047DA87DA8A8A87DA87D7D5252275227272020F820F84B%527DA8FD57FF4BF82020FD05527DFD09A8FD047D525227522727F8202027%4B7DA8FD5CFFA84BF820F8272752527D7DA8A8A87DA87D7D5252272E2727%F820F820205276A8FD62FF52F820202727FD04527DFD045227272027F820%204B76A8A8FD67FF4BF820F82727522752FD0427F820F820277D7DFD6DFF%52F820F84B27272020F82027767DA8FD72FF52F820F820F827527DA8FD77%FF52277D7DFDFCFFFD27FFA8A8FFFFA8FD78FFA8A7525251522751275251%52527C7DA8A8FD09FFA77D525252A8FD5FFFA8512651515827512D522751%272D5251275151527C7D52FFFFA827525152517627A8FD5EFF5226512752%512D27515258272727582D512D52262D2652277D5251517C7DA8A7A751FD%5EFF52515252517C27512D587C52275152522D585252515252522752517C%7CFFA8FFFF7C7DFD5DFF58277C2752522D26522D7D512727582D51527C2D%522752272D2752517CA7CFA8FF7D7CFD5DFF52515851517C272752525852%27515252277C5252515152522751517C517DA7A8A1A151A8A8FD5BFF7D26%7C27515127277D2D52512727582D2D515252582752272D27525176517651%52517C525252A8FD59FF7D2D5252517C27517D58517C275252522758517D%7C5152512D7C517C527C527C52A1A8CFA77D527DA8FD57FF832652515151%272D832D515151277C2D5127517D7D2758275252527C52517C5176527C7C%7DA7A85251A8FD56FFA82D2D52515827527D5227525151525251527CAE58%515151527D4BA7527C517C527C517C517C7DCA5252FD57FF275127525151%2D582751275127582D51515851522752277D7D517C7D5152517C51525176%51527C7D51FD57FF7D27272D52272D272727512727525127272627272D51%2DA8A727A1A77C527C5252272752A7767C7C76FD57FF525126512727272D%2727272D2751272D2727272D275127582D5151A7A7A776512627F82752A7%765152FD56FFA8272D522D5251522D522D2D2751272D2751272D2751272D%2627517651A17C5126272727F827277D4BA8FD57FF7D52F827F8272627F8%527D837DA77D837DA77D837DA77DA77C7D5252517D7D27F827F827F827F8%52FD59FF7DF8FD0527F853FD15FF52FD0627F87DFD5AFF27F8F827F8F827%FD16FFA8F827F827F8F827FD5CFF5227F82752FD18FFA8FD042752FD5EFF%A8A8A8FD1BFFA8A8A8FD06FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-03-26T16:41:14-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>244</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qkPmLzv5e0H93eXHO&#xA;6P2bSEc5TXpt0Ffc4qx3/HXnbUDXRvLEgi/Zlu241HY8WMRH44LVa+sfm5y5HT9NjH8hlA/4lJXG&#xA;1WHzl+ZMDH1tEtLgKd/q8oHbtylNceIKti/N+WG9is9V0Oe0llYKpDg1r4BlVf8AhsNqidQ/O3yR&#xA;pV59V1drnT5S6ovqQmQEOgZW/cmXqarQVO3TK8mUQ5udo+z8mp4uCrj0Jq/dbPUdXRXWvFgCKgg0&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2009-03-26T16:41:14-04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2009-03-26T16:41:14-04:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>744.094238</stDim:w>
            <stDim:h>1052.362793</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:F77F11740720681197A5D936E263A551</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F11740720681197A5D936E263A551</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F11740720681197A5D936E263A551</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681197A5D936E263A551</stEvt:instanceID>
                  <stEvt:when>2009-03-26T16:41:14-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -670.345 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 670.345 li
708.917 670.345 li
708.917 0 li
cp
clp
[1 0 0 1 0 0 ]ct
123.164 58.0015 mo
151.893 53.6514 li
153.094 59.5088 li
124.365 63.8589 li
123.164 58.0015 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.214359 .258854 .217929 3.0518e-05 cmyk
f
123.895 61.5669 mo
152.624 57.2168 li
153.094 59.5088 li
124.365 63.8589 li
123.895 61.5669 li
cp
.340093 .413947 .360388 .0103151 cmyk
f
149.306 52.2051 mo
159.338 54.3735 li
159.727 56.2671 li
151.291 61.8828 li
149.306 52.2051 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
150.315 55.7285 mo
159.081 55.209 li
159.29 56.2305 li
151.386 60.9492 li
150.315 55.7285 li
cp
.286717 1 1 .377905 cmyk
f
112.631 56.1826 mo
123.305 57.9917 li
124.615 63.6841 li
115.243 68.9165 li
112.631 56.1826 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
114.275 62.1045 mo
123.959 61.1836 li
124.291 63.499 li
115.554 68.3442 li
114.275 62.1045 li
cp
.286717 1 1 .377905 cmyk
f
119.195 20.9209 mo
147.924 16.5708 li
149.125 22.4287 li
120.397 26.7788 li
119.195 20.9209 li
cp
.214359 .258854 .217929 3.0518e-05 cmyk
f
119.927 24.4868 mo
148.655 20.1367 li
149.125 22.4287 li
120.397 26.7788 li
119.927 24.4868 li
cp
.340093 .413947 .360388 .0103151 cmyk
f
145.338 15.1245 mo
155.37 17.293 li
155.758 19.1865 li
147.323 24.8022 li
145.338 15.1245 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
146.347 18.6479 mo
155.112 18.1284 li
155.322 19.1499 li
147.417 23.8687 li
146.347 18.6479 li
cp
.286717 1 1 .377905 cmyk
f
108.663 19.1025 mo
119.336 20.9111 li
120.647 26.604 li
111.274 31.8364 li
108.663 19.1025 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
110.307 25.0244 mo
119.991 24.103 li
120.323 26.4189 li
111.586 31.2637 li
110.307 25.0244 li
cp
.286717 1 1 .377905 cmyk
f
121.75 38.8169 mo
150.479 34.4668 li
151.68 40.3247 li
122.951 44.6748 li
121.75 38.8169 li
cp
.214359 .258854 .217929 3.0518e-05 cmyk
f
122.481 42.3828 mo
151.209 38.0322 li
151.68 40.3247 li
122.951 44.6748 li
122.481 42.3828 li
cp
.340093 .413947 .360388 .0103151 cmyk
f
147.892 33.0205 mo
157.924 35.189 li
158.313 37.0825 li
149.877 42.6982 li
147.892 33.0205 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
148.901 36.5439 mo
157.667 36.0244 li
157.876 37.0459 li
149.972 41.7646 li
148.901 36.5439 li
cp
.286717 1 1 .377905 cmyk
f
111.217 36.9985 mo
121.891 38.8071 li
123.201 44.5 li
113.829 49.7324 li
111.217 36.9985 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
112.861 42.9204 mo
122.545 41.999 li
122.877 44.3149 li
114.141 49.1597 li
112.861 42.9204 li
cp
.286717 1 1 .377905 cmyk
f
32.1631 118.853 mo
32.1631 118.853 46.793 43.9321 163.904 118.853 cv
163.904 118.853 257.421 175.741 163.904 173.105 cv
33.0211 173.105 li
33.0211 173.105 16.2911 156.877 32.1631 118.853 cv
.415045 .558526 .479744 .112337 cmyk
f
137.126 54.5605 mo
147.161 52.9893 li
148.92 61.3354 li
138.886 62.9072 li
137.126 54.5605 li
cp
.597284 .512352 .507713 .201328 cmyk
f
136.027 35.8809 mo
146.062 34.3096 li
147.821 42.6558 li
137.787 44.2271 li
136.027 35.8809 li
cp
f
133.694 17.8188 mo
143.729 16.2476 li
145.488 24.5938 li
135.453 26.165 li
133.694 17.8188 li
cp
f
120.89 16.7388 mo
140.74 13.6309 li
143.914 28.6855 li
124.064 31.7939 li
120.89 16.7388 li
cp
f
121.239 35.0845 mo
141.089 31.9761 li
144.262 47.0313 li
124.413 50.1396 li
121.239 35.0845 li
cp
f
122.712 53.2021 mo
142.563 50.0942 li
145.736 65.1489 li
125.886 68.2573 li
122.712 53.2021 li
cp
f
134.622 54.6494 mo
144.365 53.1279 li
146.074 61.2075 li
136.33 62.7285 li
134.622 54.6494 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
133.555 36.5669 mo
143.298 35.0459 li
145.006 43.125 li
135.263 44.646 li
133.555 36.5669 li
cp
f
131.289 19.083 mo
141.032 17.5615 li
142.741 25.6411 li
132.997 27.1621 li
131.289 19.083 li
cp
f
118.857 18.0371 mo
138.13 15.0283 li
141.212 29.6021 li
121.938 32.6108 li
118.857 18.0371 li
cp
.193668 .150057 .155337 3.0518e-05 cmyk
f
119.195 35.7959 mo
138.469 32.7871 li
141.55 47.3604 li
122.277 50.3696 li
119.195 35.7959 li
cp
f
120.626 53.3345 mo
139.9 50.3257 li
142.981 64.8989 li
123.708 67.9077 li
120.626 53.3345 li
cp
f
25.2207 23.4517 mo
54.3911 2.42822 91.3916 7.51855 129.452 12.8628 cv
138.83 65.0313 135.216 71.4028 135.216 71.4028 cv
135.216 71.4028 60.0835 98.4048 40.5879 84.3994 cv
40.5879 84.3994 -2.97412 44.5469 25.2207 23.4517 cv
cp
.426368 .347875 .353155 .00985733 cmyk
f
23.6108 169.507 mo
206.389 169.507 li
219.429 169.507 230 181.518 230 196.333 cv
230 211.148 219.429 223.158 206.389 223.158 cv
23.6108 223.158 li
10.5708 223.158 0 211.148 0 196.333 cv
0 181.518 10.5708 169.507 23.6108 169.507 cv
cp
.581781 .669062 .615808 .522972 cmyk
f
24.0962 171.954 mo
203.057 171.954 li
214.568 171.954 223.899 182.556 223.899 195.634 cv
223.899 208.712 214.568 219.314 203.057 219.314 cv
24.0962 219.314 li
12.585 219.314 3.25342 208.712 3.25342 195.634 cv
3.25342 182.556 12.585 171.954 24.0962 171.954 cv
cp
.510216 .623743 .55877 .289616 cmyk
f
29.772 175.282 mo
194.534 175.282 li
204.682 175.282 212.908 184.628 212.908 196.158 cv
212.908 207.687 204.682 217.034 194.534 217.034 cv
29.772 217.034 li
19.624 217.034 11.3979 207.687 11.3979 196.158 cv
11.3979 184.628 19.624 175.282 29.772 175.282 cv
cp
.426368 .347875 .353155 .00985733 cmyk
f
32.9604 176.68 mo
193.379 176.68 li
202.592 176.68 210.061 185.166 210.061 195.634 cv
210.061 206.102 202.592 214.587 193.379 214.587 cv
32.9604 214.587 li
23.7471 214.587 16.2783 206.102 16.2783 195.634 cv
16.2783 185.166 23.7471 176.68 32.9604 176.68 cv
cp
.084596 .0613107 .0657664 3.0518e-05 cmyk
f
40.3779 185.991 mo
48.0894 185.991 li
52.6069 185.991 56.269 190.152 56.269 195.284 cv
56.269 200.417 52.6069 204.577 48.0894 204.577 cv
40.3779 204.577 li
35.8604 204.577 32.1982 200.417 32.1982 195.284 cv
32.1982 190.152 35.8604 185.991 40.3779 185.991 cv
cp
.426368 .347875 .353155 .00985733 cmyk
f
77.0215 186.166 mo
84.7334 186.166 li
89.2505 186.166 92.9126 190.327 92.9126 195.459 cv
92.9126 200.591 89.2505 204.752 84.7334 204.752 cv
77.0215 204.752 li
72.5044 204.752 68.8423 200.591 68.8423 195.459 cv
68.8423 190.327 72.5044 186.166 77.0215 186.166 cv
cp
f
111.347 186.166 mo
119.059 186.166 li
123.576 186.166 127.238 190.327 127.238 195.459 cv
127.238 200.591 123.576 204.752 119.059 204.752 cv
111.347 204.752 li
106.83 204.752 103.168 200.591 103.168 195.459 cv
103.168 190.327 106.83 186.166 111.347 186.166 cv
cp
f
40.1934 188.748 mo
47.2817 188.748 li
50.7983 188.748 53.6494 191.987 53.6494 195.983 cv
53.6494 199.979 50.7983 203.218 47.2817 203.218 cv
40.1934 203.218 li
36.6763 203.218 33.8252 199.979 33.8252 195.983 cv
33.8252 191.987 36.6763 188.748 40.1934 188.748 cv
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
145.51 186.166 mo
153.222 186.166 li
157.739 186.166 161.401 190.327 161.401 195.459 cv
161.401 200.591 157.739 204.752 153.222 204.752 cv
145.51 204.752 li
140.993 204.752 137.331 200.591 137.331 195.459 cv
137.331 190.327 140.993 186.166 145.51 186.166 cv
cp
.426368 .347875 .353155 .00985733 cmyk
f
76.8799 189.234 mo
83.9688 189.234 li
87.4854 189.234 90.3364 192.473 90.3364 196.469 cv
90.3364 200.464 87.4854 203.704 83.9688 203.704 cv
76.8799 203.704 li
73.3633 203.704 70.5122 200.464 70.5122 196.469 cv
70.5122 192.473 73.3633 189.234 76.8799 189.234 cv
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
179.999 185.816 mo
187.71 185.816 li
192.228 185.816 195.89 189.977 195.89 195.109 cv
195.89 200.242 192.228 204.402 187.71 204.402 cv
179.999 204.402 li
175.481 204.402 171.819 200.242 171.819 195.109 cv
171.819 189.977 175.481 185.816 179.999 185.816 cv
cp
.426368 .347875 .353155 .00985733 cmyk
f
34.248 121.355 mo
34.248 121.355 48.1186 51.8121 159.148 121.355 cv
159.148 121.355 247.81 174.16 159.148 171.714 cv
35.0616 171.714 li
35.0616 171.714 19.2001 156.65 34.248 121.355 cv
.340093 .413947 .360388 .0103151 cmyk
f
27.9282 26.3135 mo
55.4204 7.12109 90.292 11.7681 126.163 16.6465 cv
135 64.2729 131.595 70.0894 131.595 70.0894 cv
131.595 70.0894 60.7852 94.7402 42.4111 81.9546 cv
42.4111 81.9546 1.35498 45.5718 27.9282 26.3135 cv
cp
.516472 .431495 .431495 .0754711 cmyk
f
43.1509 62.6982 mo
41.3457 68.7285 41.8516 77.5972 53.3657 80.7959 cv
74.1191 84.0537 79.4136 69.3457 79.4136 73.5566 cv
66.1343 114.458 li
66.1343 118.669 85.8662 121.335 75.3276 130.022 cv
65.7935 134.105 56.2598 132.625 46.7261 130.022 cv
25.4614 119.525 55.9194 106.725 55.9194 102.513 cv
35.4897 73.5566 li
35.4897 69.3457 37.2085 62.6982 43.1509 62.6982 cv
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
78.6001 114.384 mo
72.0303 93.6855 110.73 99.0079 134.318 111.239 cv
137.53 112.901 177.835 131.158 134.318 139.894 cv
134.318 139.894 101.375 148.98 89.5811 134.303 cv
89.5811 134.303 79.8203 118.228 78.6001 114.384 cv
.415045 .558526 .479744 .112337 cmyk
f
40.7769 67.1064 mo
41.7793 75.8086 41.7754 79.709 50.9443 82.7061 cv
67.4702 85.7578 73.7197 77.7432 73.7197 81.6885 cv
61.5186 116.278 li
61.5186 120.224 80.0781 120.687 71.686 128.826 cv
64.0942 132.651 56.5024 131.264 48.9106 128.826 cv
31.978 118.991 61.9253 104.963 58.2646 101.696 cv
40.3701 75.2451 li
37.5229 71.2998 36.0449 67.1064 40.7769 67.1064 cv
cp
.0616159 .0440375 .0449836 3.0518e-05 cmyk
f
215.85 145.62 mo
223.96 145.513 li
224.035 149.694 li
215.925 149.8 li
215.85 145.62 li
cp
.193668 .150057 .155337 3.0518e-05 cmyk
f
215.94 150.637 mo
224.05 150.53 li
224.125 154.711 li
216.016 154.817 li
215.94 150.637 li
cp
f
216.03 155.654 mo
224.141 155.547 li
224.216 159.729 li
216.106 159.835 li
216.03 155.654 li
cp
f
204.859 144.168 mo
221.504 143.941 li
221.803 161.17 li
205.159 161.397 li
204.859 144.168 li
cp
.415045 .558526 .479744 .112337 cmyk
f
175.184 145.496 mo
206.432 145.043 li
206.698 161.028 li
175.45 161.48 li
175.184 145.496 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
175.221 148.251 mo
206.469 147.839 li
206.675 159.321 li
175.426 159.733 li
175.221 148.251 li
cp
.193668 .150057 .155337 3.0518e-05 cmyk
f
216.284 147.708 mo
222.781 147.622 li
222.843 151.085 li
216.346 151.17 li
216.284 147.708 li
cp
.75021 .679683 .670222 .90164 cmyk
f
216.359 151.863 mo
222.855 151.777 li
222.917 155.24 li
216.421 155.326 li
216.359 151.863 li
cp
f
216.433 156.019 mo
222.93 155.933 li
222.992 159.396 li
216.495 159.481 li
216.433 156.019 li
cp
f
205.299 146.6 mo
220.729 146.396 li
220.98 160.491 li
205.551 160.695 li
205.299 146.6 li
cp
.340093 .413947 .360388 .0103151 cmyk
f
208.656 142.954 mo
217.937 142.837 li
218.31 162.54 li
209.029 162.657 li
208.656 142.954 li
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
210.292 143.634 mo
217.161 143.543 li
217.482 161.502 li
210.614 161.593 li
210.292 143.634 li
cp
.75021 .679683 .670222 .90164 cmyk
f
171.398 140.511 mo
172.122 140.502 li
180.228 140.397 186.903 145.959 187.031 152.924 cv
187.16 159.89 180.692 165.62 172.586 165.725 cv
171.863 165.734 li
163.757 165.838 157.082 160.276 156.953 153.311 cv
156.825 146.346 163.292 140.615 171.398 140.511 cv
cp
.597284 .512352 .507713 .201328 cmyk
f
173.232 142.938 mo
173.232 142.938 li
179.404 142.857 184.492 147.498 184.596 153.306 cv
184.7 159.113 179.781 163.886 173.608 163.968 cv
167.436 164.049 162.349 159.408 162.245 153.601 cv
162.141 147.793 167.06 143.02 173.232 142.938 cv
cp
.426368 .347875 .353155 .00985733 cmyk
f
55.5747 59.4863 mo
62.582 59.4863 li
67.269 59.4863 71.0688 63.8032 71.0688 69.1289 cv
71.0688 74.4541 67.269 78.771 62.582 78.771 cv
55.5747 78.771 li
50.8877 78.771 47.0879 74.4541 47.0879 69.1289 cv
47.0879 63.8032 50.8877 59.4863 55.5747 59.4863 cv
cp
.69482 .6318 .621515 .583612 cmyk
f
56.8086 65.0776 mo
58.9077 65.0776 li
61.1318 65.0776 62.9346 67.126 62.9346 69.6528 cv
62.9346 72.1797 61.1318 74.228 58.9077 74.228 cv
56.8086 74.228 li
54.5845 74.228 52.7817 72.1797 52.7817 69.6528 cv
52.7817 67.126 54.5845 65.0776 56.8086 65.0776 cv
cp
.193668 .150057 .155337 3.0518e-05 cmyk
f
111.251 188.884 mo
118.34 188.884 li
121.856 188.884 124.708 192.124 124.708 196.119 cv
124.708 200.115 121.856 203.354 118.34 203.354 cv
111.251 203.354 li
107.734 203.354 104.883 200.115 104.883 196.119 cv
104.883 192.124 107.734 188.884 111.251 188.884 cv
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
145.488 189.234 mo
152.577 189.234 li
156.094 189.234 158.944 192.473 158.944 196.469 cv
158.944 200.464 156.094 203.704 152.577 203.704 cv
145.488 203.704 li
141.971 203.704 139.12 200.464 139.12 196.469 cv
139.12 192.473 141.971 189.234 145.488 189.234 cv
cp
f
180.4 188.612 mo
187.488 188.612 li
191.005 188.612 193.856 191.852 193.856 195.847 cv
193.856 199.843 191.005 203.082 187.488 203.082 cv
180.4 203.082 li
176.883 203.082 174.032 199.843 174.032 195.847 cv
174.032 191.852 176.883 188.612 180.4 188.612 cv
cp
f
68.6079 162.21 mo
66.0356 153.193 li
56.1484 149.949 li
65.0845 145.006 li
65.5303 135.716 li
73.6255 141.679 li
83.7881 139.182 li
79.8555 147.81 li
85.6904 155.556 li
75.1646 154.926 li
68.6079 162.21 li
cp
.509575 .361303 1 .134218 cmyk
f
68.9014 159.415 mo
67.1079 152.538 li
60.2153 150.064 li
66.4448 146.295 li
66.7559 139.21 li
72.3994 143.758 li
79.4839 141.854 li
76.7422 148.433 li
80.8096 154.34 li
73.4722 153.86 li
68.9014 159.415 li
cp
.0619821 3.0518e-05 .965148 3.0518e-05 cmyk
f
123.012 20.3242 mo
63.4316 7.10938 36.6797 24.2188 36.6797 24.2188 cv
1.40186 51.9312 43.1797 43.3613 52.4346 44.7441 cv
49.8813 28.3467 90.5957 25.6494 123.012 20.3242 cv
cp
.100282 .0737011 .116548 3.0518e-05 cmyk
f
91.5659 19.1689 mo
93.7432 12.7212 50.0684 20.5586 43.0015 24.0322 cv
27.1528 33.4072 30.7041 35.6094 47.9355 33.5107 cv
51.8975 21.1611 78.894 19.5195 91.5659 19.1689 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
124.812 40.9736 mo
131.983 56.6001 130.66 70.2422 107.114 74.9033 cv
79.3428 83.7896 88.7456 79.1641 92.7432 68.998 cv
114.629 64.5049 122.195 62.9795 124.812 40.9736 cv
cp
.100282 .0737011 .116548 3.0518e-05 cmyk
f
124.426 50.187 mo
129.361 63.6899 123.33 70.9316 99.7837 75.5928 cv
72.0122 84.479 94.8076 81.5586 98.8052 71.3921 cv
119.345 62.0723 124.742 65.0317 124.426 50.187 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
82.9692 114.728 mo
77.6894 96.8545 110.938 101.955 131.038 112.785 cv
133.776 114.257 168.17 130.493 130.511 137.405 cv
130.511 137.405 101.957 144.762 92.064 131.991 cv
92.064 131.991 83.9497 118.047 82.9692 114.728 cv
.298955 .124514 3.0518e-05 3.0518e-05 cmyk
f
123.582 130.596 mo
120.276 130.596 116.7 129.745 114.798 126.59 cv
114.798 126.59 111.421 119.107 111.018 117.325 cv
109.984 112.763 112.596 110.974 116.526 110.974 cv
120.865 110.974 126.812 113.155 131.232 116.191 cv
132.38 116.978 146.799 125.643 130.949 129.43 cv
130.949 129.43 127.451 130.596 123.582 130.596 cv
122.712 115.33 mo
120.304 115.33 118.818 116.629 120.243 119.903 cv
120.713 120.983 123.434 125.363 123.434 125.363 cv
124.474 126.743 125.731 127.19 126.923 127.19 cv
129.113 127.19 131.084 125.68 131.084 125.68 cv
137.523 121.872 129.694 117.751 129.056 117.363 cv
127.005 116.113 124.581 115.33 122.712 115.33 cv
.153964 .0629892 3.0518e-05 3.0518e-05 cmyk
f
126.923 127.19 mo
125.731 127.19 124.474 126.743 123.434 125.363 cv
123.434 125.363 120.713 120.983 120.243 119.903 cv
118.818 116.629 120.304 115.33 122.712 115.33 cv
124.581 115.33 127.005 116.113 129.056 117.363 cv
129.694 117.751 137.523 121.872 131.084 125.68 cv
131.084 125.68 129.113 127.19 126.923 127.19 cv
.0121767 .0011902 3.0518e-05 3.0518e-05 cmyk
f
134.004 165.988 mo
71.6445 171.837 54.2388 154.674 54.2388 154.674 cv
54.2388 154.674 39.2144 144.364 39.3716 133.403 cv
39.5283 122.442 28.3018 157.021 42.0361 163.962 cv
55.7705 170.904 135.199 166.592 134.004 165.988 cv
cp
.214359 .258854 .217929 3.0518e-05 cmyk
f
76.0469 165.507 mo
45.5957 163.327 44.1631 156.87 44.1631 156.87 cv
44.1631 156.87 38.8657 149.493 39.2617 143.871 cv
39.6577 138.25 35.2437 157.717 42.7793 161.592 cv
50.3154 165.466 68.5781 167 76.0469 165.507 cv
cp
.096437 .113344 .0934157 3.0518e-05 cmyk
f
64.5474 148.399 mo
69.7241 151.858 69.7241 155.318 69.7241 155.318 cv
73.75 147.411 li
64.5474 148.399 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
61.0781 86.0054 mo
62.9004 99.1577 60.4077 111.552 60.4077 111.552 cv
69.4604 83.8115 li
61.0781 86.0054 li
cp
f
354.048 11.7178 mo
441.566 11.7178 li
441.566 22.2129 li
354.048 22.2129 li
354.048 11.7178 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
354.048 11.1782 mo
441.566 11.1782 li
441.566 14.458 li
354.048 14.458 li
354.048 11.1782 li
cp
.219089 .217899 .24448 3.0518e-05 cmyk
f
354.048 14.3413 mo
441.566 14.3413 li
441.566 22.2129 li
354.048 22.2129 li
354.048 14.3413 li
cp
.342321 .353155 .393744 .00802625 cmyk
f
439.861 7.75879 mo
457.478 16.8594 li
439.861 16.8594 li
439.861 7.75879 li
cp
.286717 1 1 .377905 cmyk
f
439.861 25.7983 mo
457.478 16.6978 li
439.861 16.6978 li
439.861 25.7983 li
cp
f
441.505 23.3022 mo
452.302 18.793 li
441.505 18.793 li
441.505 23.3022 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
441.38 10.6113 mo
454.451 16.4326 li
441.38 16.4326 li
441.38 10.6113 li
cp
3.0518e-05 .815671 .621302 3.0518e-05 cmyk
f
490.945 84.8198 mo
329.051 10.6621 321.636 7.26563 321.636 7.26563 cv
366.744 1.60449 li
366.744 1.60449 566.949 40.0986 563.242 68.4033 cv
559.533 96.7075 489.708 85.9521 490.945 84.8198 cv
cp
.594446 .610986 .665034 .500694 cmyk
f
490.25 76.1289 mo
342.062 14.3926 335.274 11.5649 335.274 11.5649 cv
376.564 6.85205 li
376.564 6.85205 559.82 38.8984 556.425 62.4619 cv
553.033 86.0254 489.119 77.0713 490.25 76.1289 cv
cp
.522301 .549096 .610864 .270054 cmyk
f
427.865 43.6138 mo
518.369 -46.6968 561.503 31.2534 561.503 31.2534 cv
561.503 31.2534 794.46 87.083 662.65 96.9756 cv
530.839 106.868 410.224 88.6001 387.486 96.2935 cv
364.749 103.987 335.62 95.5981 335.62 95.5981 cv
202.695 -76.9199 341.626 50.4248 341.2 28.1382 cv
341.2 28.1382 366.257 63.4165 382.755 57.3276 cv
399.255 51.2388 429.347 41.6704 427.865 43.6138 cv
cp
.695613 .490791 .475776 .188846 cmyk
f
428.789 46.3921 mo
515.798 -32.6362 557.269 35.5757 557.269 35.5757 cv
557.269 35.5757 781.232 84.4307 654.511 93.0869 cv
527.789 101.744 411.283 84.0361 389.423 90.7686 cv
367.563 97.501 340.106 91.8818 340.106 91.8818 cv
212.313 -59.084 338.777 52.3521 338.367 32.8496 cv
338.367 32.8496 369.014 68.313 384.876 62.9844 cv
400.738 57.6563 430.214 44.6914 428.789 46.3921 cv
cp
.44889 .262791 .281834 .000976577 cmyk
f
415.544 110.48 mo
503.062 110.48 li
503.062 120.976 li
415.544 120.976 li
415.544 110.48 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
415.544 109.941 mo
503.062 109.941 li
503.062 113.221 li
415.544 113.221 li
415.544 109.941 li
cp
.219089 .217899 .24448 3.0518e-05 cmyk
f
415.544 113.104 mo
503.062 113.104 li
503.062 120.976 li
415.544 120.976 li
415.544 113.104 li
cp
.342321 .353155 .393744 .00802625 cmyk
f
501.357 106.521 mo
518.974 115.622 li
501.357 115.622 li
501.357 106.521 li
cp
.286717 1 1 .377905 cmyk
f
501.357 124.561 mo
518.974 115.46 li
501.357 115.46 li
501.357 124.561 li
cp
f
503.001 122.065 mo
513.798 117.556 li
503.001 117.556 li
503.001 122.065 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
502.876 109.374 mo
515.947 115.195 li
502.876 115.195 li
502.876 109.374 li
cp
3.0518e-05 .815671 .621302 3.0518e-05 cmyk
f
383.052 125.173 mo
470.568 125.173 li
470.568 135.668 li
383.052 135.668 li
383.052 125.173 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
383.052 124.634 mo
470.568 124.634 li
470.568 127.914 li
383.052 127.914 li
383.052 124.634 li
cp
.219089 .217899 .24448 3.0518e-05 cmyk
f
383.052 127.797 mo
470.568 127.797 li
470.568 135.668 li
383.052 135.668 li
383.052 127.797 li
cp
.342321 .353155 .393744 .00802625 cmyk
f
468.863 121.214 mo
486.48 130.315 li
468.863 130.315 li
468.863 121.214 li
cp
.286717 1 1 .377905 cmyk
f
468.863 139.254 mo
486.48 130.153 li
468.863 130.153 li
468.863 139.254 li
cp
f
470.507 136.758 mo
481.306 132.249 li
470.507 132.249 li
470.507 136.758 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
470.382 124.067 mo
483.455 129.888 li
470.382 129.888 li
470.382 124.067 li
cp
3.0518e-05 .815671 .621302 3.0518e-05 cmyk
f
338.725 139.604 mo
426.242 139.604 li
426.242 150.099 li
338.725 150.099 li
338.725 139.604 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
338.725 139.064 mo
426.242 139.064 li
426.242 142.344 li
338.725 142.344 li
338.725 139.064 li
cp
.219089 .217899 .24448 3.0518e-05 cmyk
f
338.725 142.228 mo
426.242 142.228 li
426.242 150.099 li
338.725 150.099 li
338.725 142.228 li
cp
.342321 .353155 .393744 .00802625 cmyk
f
424.537 135.645 mo
442.154 144.746 li
424.537 144.746 li
424.537 135.645 li
cp
.286717 1 1 .377905 cmyk
f
424.537 153.685 mo
442.154 144.584 li
424.537 144.584 li
424.537 153.685 li
cp
f
426.181 151.188 mo
436.978 146.679 li
426.181 146.679 li
426.181 151.188 li
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
f
426.056 138.498 mo
439.126 144.319 li
426.056 144.319 li
426.056 138.498 li
cp
3.0518e-05 .815671 .621302 3.0518e-05 cmyk
f
458.537 56.5361 mo
292.892 153.194 285.305 157.622 285.305 157.622 cv
331.458 165 li
331.458 165 536.3 114.826 532.507 77.9341 cv
528.714 41.0415 457.271 55.0605 458.537 56.5361 cv
cp
.594446 .610986 .665034 .500694 cmyk
f
458.974 60.7031 mo
310.843 146.633 304.059 150.569 304.059 150.569 cv
345.332 157.128 li
345.332 157.128 528.517 112.523 525.125 79.7256 cv
521.732 46.9277 457.843 59.3911 458.974 60.7031 cv
cp
.522301 .549096 .610864 .270054 cmyk
f
551.636 34.313 mo
534.531 16.374 525.146 15.2051 525.146 15.2051 cv
513.97 14.9883 li
513.031 14.5918 506.396 24.0283 507.265 29.3931 cv
510.923 51.9209 550.935 38.0889 551.636 34.313 cv
cp
.129458 .061677 .0783398 3.0518e-05 cmyk
f
542.125 69.3247 mo
585.3 49.0049 587.326 57.2832 587.326 57.2832 cv
587.326 57.2832 579.23 70.0771 588 84.3765 cv
596.771 98.6753 544.148 86.6338 544.148 86.6338 cv
542.125 69.3247 li
cp
.695613 .490791 .475776 .188846 cmyk
f
544.203 70.5664 mo
580.574 52.8555 582.279 60.0713 582.279 60.0713 cv
582.279 60.0713 575.458 71.2222 582.847 83.6851 cv
590.236 96.1479 545.908 85.6528 545.908 85.6528 cv
544.203 70.5664 li
cp
.602899 .364324 .370184 .0357977 cmyk
f
547.349 32.5112 mo
534.835 19.3662 527.97 18.5098 527.97 18.5098 cv
519.796 18.3506 li
519.109 18.0601 514.253 24.9746 514.892 28.9058 cv
517.566 45.4136 546.835 35.2778 547.349 32.5112 cv
cp
.0148623 .00836194 .00836194 3.0518e-05 cmyk
f
543.371 31.749 mo
535.888 22.9619 531.783 22.3896 531.783 22.3896 cv
526.894 22.2832 li
526.484 22.0894 523.58 26.7114 523.96 29.3394 cv
525.56 40.374 543.064 33.5986 543.371 31.749 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
460.63 92.522 mo
324.065 155.835 335.995 150.207 335.995 150.207 cv
352.693 153.275 li
352.693 155.018 515.171 106.021 515.656 87.1699 cv
515.974 74.729 459.792 92.2197 460.63 92.522 cv
cp
.42121 .469398 .529534 .0991531 cmyk
f
486.74 95.5972 mo
434.716 119.504 439.261 117.379 439.261 117.379 cv
445.621 118.538 li
445.621 119.196 507.515 100.695 507.701 93.5762 cv
507.822 88.8784 486.419 95.4829 486.74 95.5972 cv
cp
.219089 .217899 .24448 3.0518e-05 cmyk
f
545.91 73.417 mo
571.337 59.9829 572.98 62.5513 572.98 62.5513 cv
573.667 61.5356 585.101 64.5137 574.712 71.8374 cv
571.193 74.3174 547.503 77.9736 547.992 79.1138 cv
545.91 73.417 li
cp
.284855 .129519 .210361 3.0518e-05 cmyk
f
550.843 72.793 mo
569.167 64.2749 570.58 64.8667 570.58 64.8667 cv
571.033 64.4199 579.871 63.5869 572.505 67.6772 cv
570.013 69.0625 552.351 74.0537 552.796 74.3545 cv
550.843 72.793 li
cp
.131289 .0554513 .0885023 3.0518e-05 cmyk
f
581.324 46.2725 mo
670.339 69.1816 683.482 78.7275 683.482 78.7275 cv
683.482 78.7275 696.625 88.9092 665.56 88.9092 cv
634.494 88.9092 581.921 45.6362 581.324 46.2725 cv
cp
.284855 .129519 .210361 3.0518e-05 cmyk
f
619.4 60.0449 mo
673.701 73.792 681.716 79.52 681.716 79.52 cv
681.716 79.52 689.734 85.6294 670.785 85.6294 cv
651.833 85.6294 619.765 59.6631 619.4 60.0449 cv
cp
.131289 .0554513 .0885023 3.0518e-05 cmyk
f
360.214 70.543 mo
360.214 76.5205 354.665 81.3662 347.818 81.3662 cv
340.971 81.3662 335.42 76.5205 335.42 70.543 cv
335.42 64.5654 340.971 59.7197 347.818 59.7197 cv
354.665 59.7197 360.214 64.5654 360.214 70.543 cv
cp
.598108 .310643 .44831 .0390021 cmyk
f
359.751 71.5269 mo
359.751 76.4175 354.964 80.3818 349.059 80.3818 cv
343.154 80.3818 338.367 76.4175 338.367 71.5269 cv
338.367 66.6362 343.154 62.6714 349.059 62.6714 cv
354.964 62.6714 359.751 66.6362 359.751 71.5269 cv
cp
.131289 .0554513 .0885023 3.0518e-05 cmyk
f
518.572 650.105 mo
518.572 661.283 508.396 670.345 495.843 670.345 cv
483.292 670.345 473.117 661.283 473.117 650.105 cv
473.119 649.843 li
495.843 650.105 li
518.572 650.105 li
cp
.75021 .679683 .670222 .90164 cmyk
f
601.718 640.716 mo
601.519 635.96 601.355 620.32 601.355 605.957 cv
601.353 579.845 li
604.535 578.869 li
614.013 575.962 625.271 573.742 630.554 573.74 cv
635.55 573.736 641.257 575.937 644.73 581.812 cv
646.97 585.601 650.574 594.433 652.302 600.367 cv
653.25 603.082 li
653.203 603.71 li
656.57 603.71 662.783 605.564 671.339 609.123 cv
683.322 614.107 687.126 616.876 689.906 622.636 cv
692.554 628.126 691.742 637.275 687.867 645.574 cv
686.576 648.343 686.105 648.902 685.062 648.902 cv
684.14 648.902 683.724 648.566 683.49 647.632 cv
682.4 643.308 681.861 641.927 680.291 639.449 cv
672.064 626.466 652.304 626.47 644.158 639.455 cv
642.617 641.91 641.964 643.646 640.914 648.095 cv
640.613 649.363 li
621.347 652.476 li
602.082 651.587 li
601.718 640.716 li
cp
.61297 .560296 .709041 .474678 cmyk
f
473.232 631.291 mo
592.279 631.291 li
592.279 643.3 li
473.232 643.3 li
473.232 631.291 li
cp
.695949 .616388 .720607 .738247 cmyk
f
515.279 648.861 mo
515.279 660.041 506.546 669.101 495.775 669.101 cv
485.003 669.101 476.271 660.041 476.271 648.861 cv
476.273 648.599 li
495.775 648.861 li
515.279 648.861 li
cp
.69482 .6318 .621515 .583612 cmyk
f
461.585 586.664 mo
461.585 586.664 457.365 556.539 594.58 584.234 cv
604.679 588.273 599.576 608.23 594.58 635.738 cv
466.863 635.738 li
461.605 617.751 461.119 582.947 461.585 586.664 cv
cp
.638666 .529442 .729519 .462165 cmyk
f
465.632 588.583 mo
465.632 588.583 461.58 561.003 593.292 586.359 cv
602.988 590.056 598.087 608.328 593.292 633.513 cv
470.699 633.513 li
465.652 617.044 465.185 585.181 465.632 588.583 cv
cp
.576318 .437446 .686976 .226963 cmyk
f
485.39 570.345 mo
489.949 570.345 li
489.949 639.296 li
485.39 639.296 li
485.39 570.345 li
cp
.638666 .529442 .729519 .462165 cmyk
f
486.91 572.125 mo
489.949 572.125 li
489.949 639.296 li
486.91 639.296 li
486.91 572.125 li
cp
.367254 .246433 .44358 .00292973 cmyk
f
537.039 573.013 mo
542.105 573.013 li
542.105 639.296 li
537.039 639.296 li
537.039 573.013 li
cp
.638666 .529442 .729519 .462165 cmyk
f
539.066 574.349 mo
542.105 574.349 li
542.105 639.296 li
539.066 639.296 li
539.066 574.349 li
cp
.367254 .246433 .44358 .00292973 cmyk
f
581.169 578.353 mo
586.236 578.353 li
586.236 639.296 li
581.169 639.296 li
581.169 578.353 li
cp
.638666 .529442 .729519 .462165 cmyk
f
583.197 580.132 mo
586.236 580.132 li
586.236 639.296 li
583.197 639.296 li
583.197 580.132 li
cp
.367254 .246433 .44358 .00292973 cmyk
f
465.126 638.408 mo
605.451 638.408 li
605.451 650.417 li
465.126 650.417 li
465.126 638.408 li
cp
.638666 .529442 .729519 .462165 cmyk
f
468.673 639.734 mo
602.917 639.734 li
602.917 648.185 li
468.673 648.185 li
468.673 639.734 li
cp
.576318 .437446 .686976 .226963 cmyk
f
683.632 650.105 mo
683.632 661.283 673.457 670.345 660.904 670.345 cv
648.353 670.345 638.177 661.283 638.177 650.105 cv
638.179 649.843 li
660.904 650.105 li
683.632 650.105 li
cp
.75021 .679683 .670222 .90164 cmyk
f
680.658 648.898 mo
680.662 660.076 671.933 669.142 661.162 669.146 cv
650.39 669.152 641.656 660.093 641.65 648.916 cv
641.65 648.898 li
641.646 637.718 650.373 628.652 661.146 628.648 cv
671.917 628.642 680.652 637.701 680.658 648.878 cv
680.658 648.898 li
cp
.69482 .6318 .621515 .583612 cmyk
f
605.74 641.021 mo
605.558 636.433 605.408 621.345 605.408 607.49 cv
605.406 582.298 li
608.318 581.357 li
616.998 578.552 627.306 576.412 632.144 576.408 cv
636.718 576.406 639.625 578.529 642.804 584.195 cv
644.857 587.851 648.156 596.371 649.738 602.097 cv
650.628 605.322 li
652.882 605.322 li
655.966 605.322 661.654 607.111 669.49 610.542 cv
680.46 615.351 683.945 618.023 686.49 623.58 cv
688.916 628.876 688.169 637.703 684.623 645.708 cv
683.441 648.378 683.009 648.917 682.054 648.917 cv
681.21 648.917 680.83 648.593 680.615 647.695 cv
679.619 643.521 680.185 641.38 677.685 639.798 cv
670.152 635.033 654.208 638.287 646.75 642.634 cv
644.214 644.113 642.593 643.847 641.628 648.138 cv
641.355 649.363 li
623.714 649.363 li
606.072 649.363 li
605.74 641.021 li
cp
.435676 .380957 .58764 .0749218 cmyk
f
496.56 586.802 mo
500.705 608.41 491.962 624.408 491.904 624.548 cv
491.904 624.548 513.396 600.642 496.56 586.802 cv
cp
.638666 .529442 .729519 .462165 cmyk
f
511.605 579.882 mo
516.261 608.507 526.65 623.919 526.65 623.919 cv
526.65 623.919 520.56 608.507 521.636 599.07 cv
522.71 589.632 511.605 578.623 511.605 579.882 cv
cp
.367254 .246433 .44358 .00292973 cmyk
f
560.322 582.398 mo
555.308 598.755 557.099 613.853 557.099 613.853 cv
557.099 613.853 558.89 615.742 561.396 605.046 cv
563.904 594.351 561.039 581.769 560.322 582.398 cv
cp
f
568.919 596.554 mo
571.642 633.392 551.138 625.101 550.65 624.863 cv
550.65 624.863 571.785 633.042 572.859 623.605 cv
573.933 614.169 569.994 596.554 568.919 596.554 cv
cp
.238621 .148592 .281498 3.0518e-05 cmyk
f
475.003 586.759 mo
472.294 608.416 478.007 624.451 478.046 624.591 cv
478.046 624.591 464 600.63 475.003 586.759 cv
cp
.367254 .246433 .44358 .00292973 cmyk
f
529.882 579.83 mo
524.869 596.185 526.66 611.285 526.66 611.285 cv
526.66 611.285 528.451 613.171 530.958 602.476 cv
533.464 591.783 530.599 579.201 529.882 579.83 cv
cp
.638666 .529442 .729519 .462165 cmyk
f
508.033 598.388 mo
503.017 614.746 504.808 629.843 504.808 629.843 cv
504.808 629.843 506.599 631.73 509.107 621.037 cv
511.615 610.341 508.75 597.759 508.033 598.388 cv
cp
.238621 .148592 .281498 3.0518e-05 cmyk
f
591.978 589.591 mo
594.685 611.248 588.972 627.281 588.935 627.421 cv
588.935 627.421 602.982 603.462 591.978 589.591 cv
cp
.638666 .529442 .729519 .462165 cmyk
f
618.353 588.06 mo
621.218 605.361 630.173 603.16 630.173 603.16 cv
646.65 601.271 li
647.943 595.714 643.386 590.158 641.277 584.601 cv
633.626 585.738 622.289 580.398 618.353 588.06 cv
cp
.220127 .180667 .264195 3.0518e-05 cmyk
f
621.283 588.839 mo
623.718 604.74 631.324 602.716 631.324 602.716 cv
645.318 600.982 li
646.416 595.875 642.546 590.767 640.755 585.66 cv
634.257 586.707 624.626 581.798 621.283 588.839 cv
cp
.100282 .0737011 .116548 3.0518e-05 cmyk
f
634.47 590.332 mo
637.738 602.546 639.349 600.656 639.349 600.656 cv
642.648 598.718 li
642.08 594.716 640.238 590.923 638.931 587.042 cv
637.439 588.128 634.156 584.734 634.47 590.332 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
609.753 608.507 mo
609.509 645.806 626.099 646.882 626.099 646.882 cv
638.054 638.275 li
638.146 638.275 619.787 637.199 614.632 626.439 cv
610.095 616.964 609.998 608.15 609.753 608.507 cv
cp
.346807 .288823 .426307 .00479133 cmyk
f
686.052 638.542 mo
689.437 612.275 655.312 607.394 654.171 607.716 cv
641.277 616.208 li
641.21 616.332 663.146 614.429 669.933 622.5 cv
676.808 630.675 684.261 629.105 686.052 638.542 cv
cp
f
682.685 632.357 mo
683.412 617.812 652.3 609.912 652.042 610.019 cv
643.56 616 li
643.47 616 660.625 614.841 667.652 619.859 cv
674.929 625.056 683.357 628.515 682.685 632.357 cv
cp
.0983902 .0958877 .104189 3.0518e-05 cmyk
f
610.953 615.9 mo
610.849 642.511 625.074 645.472 625.074 645.472 cv
633.978 638.921 li
623.464 646.785 615.683 635.744 613.5 629.128 cv
611.578 623.302 611.056 615.679 610.953 615.9 cv
cp
.100282 .0737011 .116548 3.0518e-05 cmyk
f
684.894 648.603 mo
683.71 650.337 684.591 650.292 683.636 650.292 cv
682.794 650.292 681.101 650.476 680.888 649.892 cv
679.892 647.183 679.398 646.32 677.96 644.767 cv
670.433 636.638 652.353 636.64 644.9 644.771 cv
643.49 646.308 642.894 647.396 641.931 650.181 cv
634.773 649.4 li
636.507 629.007 674.07 623.535 684.894 648.603 cv
cp
.61297 .560296 .709041 .474678 cmyk
f
683.189 647.087 mo
673.232 634.601 663.794 633.681 663.699 633.755 cv
658.476 629.724 660.125 638.523 668.572 640.591 cv
674.138 641.955 680.617 648.257 680.531 648.455 cv
683.189 647.087 li
cp
.346807 .288823 .426307 .00479133 cmyk
f
679.074 645.947 mo
675.457 637.351 658.105 636.097 665.476 635.255 cv
673.328 633.839 682.269 645.357 680.011 645.947 cv
679.074 645.947 li
cp
.100282 .0737011 .116548 3.0518e-05 cmyk
f
691.054 277.274 mo
694.628 278.257 li
693.759 280.737 li
690.183 279.755 li
691.054 277.274 li
cp
.581781 .669062 .615808 .522972 cmyk
f
690.009 280.251 mo
693.585 281.233 li
692.714 283.715 li
689.138 282.732 li
690.009 280.251 li
cp
f
688.964 283.229 mo
692.541 284.211 li
691.669 286.691 li
688.093 285.709 li
688.964 283.229 li
cp
f
673.267 271.959 mo
687.052 275.72 li
683.714 285.201 li
669.931 281.441 li
673.267 271.959 li
cp
.632074 .316442 1 .139193 cmyk
f
672.689 273.593 mo
686.464 277.377 li
684.074 284.189 li
670.298 280.405 li
672.689 273.593 li
cp
.517388 .218723 1 .0296941 cmyk
f
691.101 277.721 mo
693.964 278.508 li
693.244 280.563 li
690.38 279.775 li
691.101 277.721 li
cp
f
690.082 280.608 mo
692.945 281.395 li
692.224 283.449 li
689.361 282.663 li
690.082 280.608 li
cp
f
688.986 283.706 mo
691.849 284.493 li
691.128 286.548 li
688.263 285.761 li
688.986 283.706 li
cp
f
686.722 275.123 mo
693.535 276.963 li
689.884 287.279 li
683.072 285.439 li
686.722 275.123 li
cp
.667567 .466377 1 .42417 cmyk
f
688.478 274.771 mo
692.57 275.898 li
688.474 287.592 li
684.384 286.465 li
688.478 274.771 li
cp
.6065 .354772 1 .182559 cmyk
f
689.048 275.385 mo
692.076 276.216 li
688.337 286.872 li
685.308 286.04 li
689.048 275.385 li
cp
.218143 .0104067 .600885 3.0518e-05 cmyk
f
672.847 268.569 mo
672.847 268.569 li
676.507 269.577 678.3 273.744 676.851 277.877 cv
675.404 282.01 671.261 284.544 667.599 283.536 cv
663.939 282.529 662.144 278.361 663.593 274.229 cv
665.042 270.095 669.185 267.562 672.847 268.569 cv
cp
.597284 .512352 .507713 .201328 cmyk
f
672.966 270.196 mo
672.966 270.196 li
675.687 270.943 676.912 274.343 675.703 277.788 cv
674.494 281.234 671.308 283.421 668.585 282.674 cv
665.865 281.927 664.64 278.527 665.849 275.082 cv
667.058 271.636 670.244 269.449 672.966 270.196 cv
cp
.293767 .123201 .291539 3.0518e-05 cmyk
f
630.96 180.978 mo
634.226 180.093 li
634.695 212.207 li
631.244 213.062 li
630.96 180.978 li
cp
.679255 .418677 .624872 .218906 cmyk
f
638.244 276.63 mo
643.13 274.007 li
655.255 310.851 li
650.062 313.53 li
638.244 276.63 li
cp
f
570.57 290.985 mo
659.75 307.21 683.542 295.622 683.542 295.622 cv
683.542 295.622 698.705 298.912 685.115 305.336 cv
672.316 311.387 584.322 307.335 575.001 300.8 cv
564.109 293.162 570.093 290.969 570.57 290.985 cv
cp
.729213 .519738 .676204 .454658 cmyk
f
600.433 278.425 mo
595.742 275.467 li
581.083 311.375 li
586.078 314.41 li
600.433 278.425 li
cp
.679255 .418677 .624872 .218906 cmyk
f
574.304 295.382 mo
659.111 305.31 681.507 299.493 681.507 299.493 cv
681.507 299.493 695.931 301.464 683.138 304.683 cv
671.089 307.714 587.583 304.276 578.65 300.665 cv
568.21 296.445 573.851 295.366 574.304 295.382 cv
cp
f
640.179 278.566 mo
642.578 276.64 li
652.902 308.357 li
650.503 310.284 li
640.179 278.566 li
cp
.452216 .220493 .400427 .0028687 cmyk
f
598.369 280.221 mo
596.109 278.131 li
583.603 309.051 li
585.863 311.141 li
598.369 280.221 li
cp
f
622.363 273.94 mo
618.478 271.276 li
606.23 303.803 li
610.363 306.535 li
622.363 273.94 li
cp
.729213 .519738 .676204 .454658 cmyk
f
653.083 275.014 mo
657.142 272.627 li
667.099 305.93 li
662.787 308.367 li
653.083 275.014 li
cp
f
547.458 298.901 mo
644.753 317.618 670.755 304.015 670.755 304.015 cv
670.755 304.015 687.294 307.817 672.445 315.36 cv
658.458 322.465 562.425 317.967 552.269 310.356 cv
540.402 301.461 546.939 298.883 547.458 298.901 cv
cp
.679255 .418677 .624872 .218906 cmyk
f
620.644 275.571 mo
618.777 273.687 li
608.326 301.693 li
610.193 303.578 li
620.644 275.571 li
cp
f
654.683 276.76 mo
656.677 275.011 li
665.154 303.679 li
663.16 305.429 li
654.683 276.76 li
cp
f
627.041 289.988 mo
604.779 288.362 577.042 283.695 544.439 276.091 cv
526.958 272.013 503.9 265.672 503.373 264.797 cv
502.044 262.591 500.085 247.13 500.73 243.928 cv
501.478 240.2 510.22 234.196 514.435 238.506 cv
516.373 240.489 519.003 243.456 520.281 245.1 cv
522.601 248.088 li
522.998 249.282 li
533.429 250.104 562.839 250.077 570.324 249.238 cv
577.644 248.417 583.716 246.34 585.042 244.203 cv
585.544 243.395 585.445 242.995 587.103 236.466 cv
593.636 210.712 597.806 204.394 613.611 196.287 cv
620.621 192.691 625.976 192.03 637.943 192.032 cv
647.722 192.033 648.875 192.167 653.292 193.824 cv
655.919 194.81 659.488 196.479 661.222 197.533 cv
658.158 202.564 li
653.806 208.169 661.072 200.255 661.072 200.255 cv
659.253 200.697 654.408 201.088 650.302 201.124 cv
643.279 201.185 642.742 201.288 641.199 202.873 cv
637.886 206.273 636.068 212.8 633.886 229.119 cv
632.933 236.262 632.886 237.897 633.611 238.793 cv
634.605 240.025 637.494 240.899 650.511 243.912 cv
659.46 245.983 660.208 246.048 672.626 245.84 cv
674.912 241.265 li
686.228 242.911 li
678.273 240.82 li
685.906 243.928 li
687.74 252.566 690.037 258.073 689.296 263.432 cv
686.263 285.42 668.458 293.015 627.041 289.988 cv
cp
.368811 .385565 1 .0881971 cmyk
f
631.73 182.982 mo
633.445 182.042 li
633.785 209.659 li
632.068 210.6 li
631.73 182.982 li
cp
.452216 .220493 .400427 .0028687 cmyk
f
708.917 179.781 mo
708.917 191.302 673.708 200.641 630.275 200.641 cv
586.841 200.641 551.63 191.302 551.63 179.781 cv
551.63 168.26 586.841 158.92 630.275 158.92 cv
673.708 158.92 708.917 168.26 708.917 179.781 cv
cp
.100282 .0737011 .116548 3.0518e-05 cmyk
f
626.394 285.682 mo
605.451 284.189 579.357 279.905 548.683 272.925 cv
532.238 269.182 510.542 263.362 510.048 262.559 cv
508.798 260.534 506.955 246.343 507.56 243.403 cv
508.265 239.981 510.056 240.186 514.021 244.142 cv
515.843 245.962 518.32 248.686 519.521 250.194 cv
521.705 252.938 li
528.511 253.461 li
538.326 254.217 565.994 254.192 573.035 253.421 cv
579.921 252.667 585.634 250.761 586.882 248.8 cv
587.355 248.058 589.017 242.547 590.576 236.554 cv
596.722 212.915 600.644 207.115 615.515 199.674 cv
622.109 196.374 625.394 195.767 636.652 195.768 cv
645.853 195.769 646.935 195.893 651.093 197.413 cv
653.564 198.317 656.921 199.85 658.552 200.818 cv
661.519 202.578 li
658.41 203.316 li
656.701 203.722 652.142 204.081 648.281 204.113 cv
641.671 204.17 641.167 204.264 639.714 205.719 cv
636.599 208.84 634.888 214.831 632.835 229.81 cv
631.937 236.366 631.894 237.867 632.576 238.69 cv
633.511 239.82 636.228 240.623 648.476 243.389 cv
656.896 245.29 657.599 245.35 669.283 245.158 cv
681.375 244.96 li
682.08 242.469 li
682.783 239.979 li
683.529 243.403 li
685.255 251.332 685.662 256.387 684.964 261.306 cv
682.111 281.488 665.361 288.46 626.394 285.682 cv
cp
.190677 .214389 .76141 3.0518e-05 cmyk
f
660.851 195.849 mo
692.964 229.717 687.445 251.79 686.437 249.629 cv
686.437 249.629 657.332 253.313 647.515 250.062 cv
637.701 246.81 619.705 245.998 621.341 241.12 cv
622.976 236.243 623.794 196.661 636.882 199.1 cv
649.968 201.538 663.304 196.661 660.851 195.849 cv
cp
.44889 .262791 .281834 .000976577 cmyk
f
522.816 231.253 mo
528.712 240.129 526.656 251.88 518.222 257.5 cv
509.789 263.119 498.173 260.479 492.279 251.603 cv
486.382 242.727 488.439 230.976 496.873 225.356 cv
505.306 219.736 516.921 222.376 522.816 231.253 cv
cp
.100282 .0737011 .116548 3.0518e-05 cmyk
f
551.523 304.027 mo
644.062 315.399 668.523 308.544 668.523 308.544 cv
668.523 308.544 684.263 310.807 670.289 314.603 cv
657.13 318.176 565.994 314.385 556.253 310.189 cv
544.869 305.286 551.031 304.011 551.523 304.027 cv
cp
.596216 .293523 .550713 .0544137 cmyk
f
659.535 200.207 mo
688.566 229.549 681.89 249.75 680.98 247.878 cv
680.98 247.878 656.353 249.991 647.48 247.174 cv
638.607 244.357 622.339 243.653 623.818 239.428 cv
625.296 235.203 626.037 200.912 637.867 203.024 cv
649.699 205.137 661.753 200.912 659.535 200.207 cv
cp
.136904 .0573434 3.0518e-05 3.0518e-05 cmyk
f
610.748 278.078 mo
656.246 278.752 679.646 250.457 680.947 250.457 cv
683.863 250.457 681.773 266.958 669.896 278.078 cv
657.787 289.415 610.748 279.148 610.748 278.078 cv
cp
.13666 .144259 .559106 3.0518e-05 cmyk
f
633.009 200.544 mo
615.251 199.922 595.546 237.229 595.042 237.284 cv
594.013 237.394 595.244 223.071 601.22 214.244 cv
609.648 201.792 623.791 197.741 633.009 200.544 cv
cp
f
618.166 283.928 mo
643.031 285.113 658.816 271.108 659.527 271.133 cv
661.121 271.188 659.753 277.657 653.078 282.655 cv
646.271 287.751 618.148 284.431 618.166 283.928 cv
cp
.0886854 .0915846 .352483 3.0518e-05 cmyk
f
635.615 207.491 mo
635.615 207.491 663.589 200.641 672.294 221.19 cv
680.998 241.739 674.781 244.853 674.781 244.853 cv
679.876 241.711 665.275 213.651 648.669 217.454 cv
634.929 220.601 634.994 207.491 635.615 207.491 cv
cp
.0702525 .0246281 3.0518e-05 3.0518e-05 cmyk
f
619.076 204.646 mo
611.337 202.843 598.986 226.59 598.759 226.588 cv
598.296 226.583 600.257 216.974 603.755 211.457 cv
608.691 203.675 615.304 202.029 619.076 204.646 cv
cp
.0886854 .0915846 .352483 3.0518e-05 cmyk
f
641.187 209.199 mo
641.187 209.199 662.865 203.348 669.607 220.902 cv
676.351 238.457 671.535 241.117 671.535 241.117 cv
676.978 238.771 668.158 210.072 649.927 212.106 cv
638.958 213.331 640.705 209.199 641.187 209.199 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
530.55 255.438 mo
572.203 257.929 587.746 252.948 587.746 252.948 cv
587.746 252.948 582.15 261.666 575.31 261.666 cv
568.472 261.666 530.55 255.438 530.55 255.438 cv
cp
.13666 .144259 .559106 3.0518e-05 cmyk
f
539.142 255.627 mo
569.929 256.873 581.416 254.382 581.416 254.382 cv
581.416 254.382 577.281 258.741 572.226 258.741 cv
567.171 258.741 539.142 255.627 539.142 255.627 cv
cp
.0886854 .0915846 .352483 3.0518e-05 cmyk
f
677.646 279.296 mo
681.574 280.501 li
680.617 283.544 li
676.689 282.339 li
677.646 279.296 li
cp
.581781 .669062 .615808 .522972 cmyk
f
676.498 282.947 mo
680.425 284.152 li
679.47 287.195 li
675.542 285.99 li
676.498 282.947 li
cp
f
675.351 286.599 mo
679.279 287.804 li
678.322 290.847 li
674.394 289.642 li
675.351 286.599 li
cp
f
658.107 272.777 mo
673.251 277.39 li
669.583 289.02 li
654.441 284.407 li
658.107 272.777 li
cp
.632074 .316442 1 .139193 cmyk
f
657.47 274.781 mo
672.605 279.422 li
669.978 287.777 li
654.843 283.137 li
657.47 274.781 li
cp
.517388 .218723 1 .0296941 cmyk
f
677.699 279.845 mo
680.845 280.81 li
680.052 283.329 li
676.906 282.364 li
677.699 279.845 li
cp
f
676.578 283.386 mo
679.724 284.351 li
678.933 286.87 li
675.787 285.905 li
676.578 283.386 li
cp
f
675.373 287.186 mo
678.519 288.15 li
677.728 290.67 li
674.582 289.705 li
675.373 287.186 li
cp
f
672.886 276.657 mo
680.371 278.914 li
676.361 291.568 li
668.878 289.311 li
672.886 276.657 li
cp
.667567 .466377 1 .42417 cmyk
f
674.818 276.227 mo
679.31 277.609 li
674.812 291.951 li
670.32 290.568 li
674.818 276.227 li
cp
.6065 .354772 1 .182559 cmyk
f
675.443 276.979 mo
678.769 277.998 li
674.662 291.067 li
671.333 290.047 li
675.443 276.979 li
cp
.218143 .0104067 .600885 3.0518e-05 cmyk
f
657.644 268.619 mo
657.644 268.619 li
661.666 269.855 663.636 274.966 662.044 280.035 cv
660.453 285.104 655.902 288.213 651.88 286.977 cv
647.859 285.741 645.888 280.63 647.48 275.561 cv
649.072 270.491 653.623 267.384 657.644 268.619 cv
cp
.597284 .512352 .507713 .201328 cmyk
f
657.775 270.615 mo
657.775 270.615 li
660.765 271.531 662.111 275.7 660.783 279.927 cv
659.455 284.152 655.953 286.836 652.964 285.919 cv
649.974 285.002 648.628 280.833 649.957 276.607 cv
651.285 272.381 654.787 269.698 657.775 270.615 cv
cp
.293767 .123201 .291539 3.0518e-05 cmyk
f
659.105 417.698 mo
240.718 320.504 292.423 323.484 292.423 323.484 cv
207.635 353.177 li
320.214 371.201 li
214.684 384.115 li
273.09 393.16 li
218.909 399.788 li
382.585 418.617 427.591 431.563 554.039 451.659 cv
578.585 455.561 624.054 439.946 659.105 417.698 cv
cp
.546197 .766354 .687922 .801846 cmyk
f
659.105 417.698 mo
659.185 417.352 li
491.452 378.386 399.276 355.522 349.038 342.112 cv
323.92 335.408 309.286 331.066 300.941 328.261 cv
296.769 326.859 294.169 325.84 292.628 325.108 cv
291.858 324.743 291.353 324.448 291.061 324.228 cv
290.915 324.119 290.823 324.028 290.78 323.97 cv
290.746 323.916 li
290.742 323.918 li
290.746 323.917 li
290.746 323.916 li
290.742 323.918 li
290.746 323.917 li
290.657 323.936 li
290.747 323.936 li
290.746 323.917 li
290.657 323.936 li
290.747 323.936 li
290.625 323.936 li
290.725 324.009 li
290.747 323.936 li
290.625 323.936 li
290.725 324.009 li
290.697 323.989 li
290.721 324.014 li
290.725 324.009 li
290.697 323.989 li
290.721 324.014 li
290.727 323.993 290.949 323.904 291.208 323.876 cv
291.469 323.84 291.772 323.83 292.005 323.83 cv
292.24 323.83 292.402 323.839 292.402 323.839 cv
292.423 323.484 li
292.305 323.149 li
207.518 352.841 li
207.579 353.528 li
317.672 371.154 li
214.64 383.762 li
214.629 384.466 li
270.501 393.119 li
218.866 399.435 li
218.868 400.141 li
382.532 418.969 427.519 431.911 553.983 452.01 cv
556.545 452.417 559.328 452.613 562.297 452.613 cv
588.008 452.605 627.818 437.971 659.295 417.998 cv
660.011 417.544 li
659.185 417.352 li
659.105 417.698 li
658.914 417.398 li
627.545 437.317 587.761 451.91 562.297 451.902 cv
559.359 451.902 556.613 451.708 554.094 451.308 cv
427.663 431.214 382.639 418.266 218.949 399.435 cv
218.909 399.788 li
218.952 400.141 li
273.133 393.513 li
273.145 392.809 li
217.272 384.156 li
320.257 371.554 li
320.27 370.85 li
209.078 353.048 li
292.54 323.82 li
292.443 323.13 li
292.439 323.129 292.26 323.119 292.005 323.119 cv
291.696 323.119 291.279 323.133 290.907 323.205 cv
290.72 323.243 290.544 323.292 290.379 323.388 cv
290.298 323.437 290.216 323.5 290.149 323.592 cv
290.081 323.683 290.035 323.81 290.037 323.936 cv
290.038 324.118 290.115 324.27 290.216 324.402 cv
290.415 324.658 290.737 324.898 291.263 325.203 cv
293.227 326.328 298.112 328.244 309.146 331.625 cv
342.233 341.758 430.513 364.959 659.025 418.044 cv
659.105 417.698 li
658.914 417.398 li
659.105 417.698 li
cp
.75021 .679683 .670222 .90164 cmyk
f
660.234 420.263 mo
249.363 328.71 293.34 330.168 293.368 330.116 cv
234.484 349.938 li
342.948 369.155 li
241.14 383.345 li
293.269 394.678 li
252.181 399.098 li
411.699 417.732 501.57 443.25 559.109 450.016 cv
583.3 452.859 626.001 442.973 660.234 420.263 cv
cp
.69482 .6318 .621515 .583612 cmyk
f
660.234 420.263 mo
660.311 419.917 li
491.144 382.223 399.085 360.295 349.323 347.54 cv
324.442 341.162 310.134 337.076 302.057 334.462 cv
298.019 333.156 295.537 332.215 294.082 331.547 cv
293.355 331.214 292.884 330.947 292.615 330.751 cv
292.481 330.653 292.399 330.573 292.363 330.526 cv
292.337 330.487 li
292.254 330.522 li
292.342 330.522 li
292.337 330.487 li
292.254 330.522 li
292.342 330.522 li
292.201 330.522 li
292.307 330.621 li
292.342 330.522 li
292.201 330.522 li
292.307 330.621 li
292.308 330.621 li
292.346 330.581 292.642 330.507 292.891 330.492 cv
293.017 330.481 293.137 330.476 293.225 330.474 cv
293.333 330.472 li
293.371 330.471 li
293.399 330.469 li
293.437 330.463 li
293.493 330.447 li
293.521 330.428 293.58 330.435 293.678 330.288 cv
294.119 329.49 li
234.371 349.602 li
234.422 350.286 li
340.685 369.113 li
241.091 382.994 li
241.065 383.69 li
291.06 394.559 li
252.143 398.746 li
252.14 399.449 li
411.64 418.081 501.475 443.593 559.068 450.367 cv
561.784 450.686 564.729 450.846 567.865 450.846 cv
592.818 450.842 629.95 440.773 660.429 420.557 cv
661.122 420.098 li
660.311 419.917 li
660.234 420.263 li
660.038 419.968 li
629.696 440.102 592.639 450.142 567.865 450.138 cv
564.753 450.138 561.835 449.98 559.15 449.664 cv
501.664 442.907 411.757 417.383 252.222 398.746 cv
252.181 399.098 li
252.218 399.449 li
293.306 395.029 li
293.344 394.332 li
243.156 383.421 li
342.997 369.506 li
343.009 368.807 li
235.909 349.831 li
293.481 330.451 li
293.368 330.116 li
293.059 329.945 li
293.368 330.116 li
293.196 329.807 li
293.167 329.826 293.115 329.851 293.059 329.945 cv
293.368 330.116 li
293.196 329.807 li
293.367 330.114 li
293.291 329.771 li
293.196 329.807 li
293.367 330.114 li
293.291 329.771 li
293.358 330.074 li
293.342 329.764 li
293.291 329.771 li
293.358 330.074 li
293.342 329.764 li
293.339 329.764 293.221 329.765 293.084 329.771 cv
292.871 329.781 292.578 329.801 292.305 329.87 cv
292.168 329.906 292.034 329.951 291.903 330.041 cv
291.777 330.122 291.632 330.299 291.635 330.522 cv
291.636 330.698 291.712 330.842 291.807 330.963 cv
291.995 331.198 292.294 331.414 292.788 331.691 cv
294.63 332.714 299.267 334.478 310.039 337.652 cv
342.337 347.165 429.694 369.255 660.157 420.608 cv
660.234 420.263 li
660.038 419.968 li
660.234 420.263 li
cp
.75021 .679683 .670222 .90164 cmyk
f
294.838 337.009 mo
267.211 338.883 249.236 345.918 269.488 350.103 cv
488.066 395.258 544.529 398.097 530.667 401.891 cv
517.236 405.566 525.56 410.021 525.56 410.021 cv
546.029 403.015 li
546.029 403.015 554.304 398.857 546.91 398.316 cv
539.513 397.775 334.863 346.755 294.838 337.009 cv
cp
.597284 .512352 .507713 .201328 cmyk
f
297.392 338.557 mo
271.831 340.038 291.591 342.403 310.003 346.742 cv
464.609 383.178 552.197 399.131 540.695 401.429 cv
527.824 404 526.855 408.415 526.855 408.415 cv
544.017 403.032 li
544.017 403.032 551.66 399.493 544.812 398.992 cv
537.964 398.491 334.477 347.137 297.392 338.557 cv
cp
.426368 .347875 .353155 .00985733 cmyk
f
707.984 461.383 mo
269.891 558.99 270.55 560.601 270.55 560.601 cv
191.342 484.896 li
307.647 474.346 li
204.401 426.601 li
264.683 421.721 li
211.673 397.211 li
379.337 396.137 425.603 381.177 556.027 367.367 cv
583.902 364.416 677.171 410.805 707.984 461.383 cv
cp
.546197 .766354 .687922 .801846 cmyk
f
707.984 461.383 mo
707.875 460.895 li
489.485 509.552 380.126 534.354 325.362 546.993 cv
297.98 553.313 284.248 556.592 277.357 558.293 cv
273.911 559.143 272.176 559.599 271.297 559.844 cv
270.856 559.967 270.63 560.037 270.501 560.081 cv
270.352 560.139 li
270.258 560.194 li
270.217 560.227 li
270.208 560.236 li
270.55 560.6 li
270.55 560.6 li
270.308 560.162 li
270.234 560.213 li
270.201 560.245 270.137 560.283 270.077 560.437 cv
270.022 560.594 270.049 560.767 270.15 560.901 cv
270.15 560.901 li
270.55 560.601 li
270.895 560.24 li
192.482 485.294 li
309.551 474.675 li
206.338 426.945 li
266.62 422.066 li
211.883 396.757 li
211.673 397.211 li
211.677 397.711 li
379.374 396.637 425.696 381.669 556.079 367.864 cv
556.905 367.777 557.793 367.733 558.74 367.734 cv
566.314 367.73 577.592 370.53 590.657 375.515 cv
610.261 382.989 633.919 395.362 655.456 410.45 cv
676.995 425.536 696.413 443.346 707.557 461.643 cv
707.984 461.383 li
707.875 460.895 li
707.984 461.383 li
708.411 461.123 li
693.39 436.478 663.72 412.922 633.946 395.485 cv
619.058 386.769 604.143 379.587 591.013 374.58 cv
577.879 369.575 566.546 366.737 558.74 366.733 cv
557.762 366.734 556.84 366.778 555.974 366.87 cv
425.51 380.684 379.301 395.636 211.67 396.711 cv
211.463 397.665 li
262.745 421.376 li
202.465 426.256 li
305.744 474.016 li
190.201 484.497 li
270.204 560.963 li
270.95 560.301 li
270.95 560.301 li
270.55 560.601 li
271.022 560.765 li
270.55 560.601 li
270.954 560.895 li
271.022 560.765 li
270.55 560.601 li
270.954 560.895 li
270.55 560.601 li
270.922 560.934 li
270.954 560.895 li
270.55 560.601 li
270.922 560.934 li
271.015 560.783 li
270.557 560.604 li
270.822 561.019 li
270.85 560.989 270.916 560.99 271.015 560.783 cv
270.557 560.604 li
270.822 561.019 li
270.621 560.703 li
270.774 561.046 li
270.822 561.019 li
270.621 560.703 li
270.774 561.046 li
270.763 561.021 li
270.773 561.046 li
270.774 561.046 li
270.763 561.021 li
270.773 561.046 li
270.812 561.028 271.19 560.9 272.567 560.537 cv
282.258 557.975 341.913 543.455 708.093 461.871 cv
708.774 461.719 li
708.411 461.123 li
707.984 461.383 li
cp
.75021 .679683 .670222 .90164 cmyk
f
693.275 457.132 mo
273.624 553.105 282.64 550.289 282.64 550.289 cv
217.5 490.977 li
327.902 477.934 li
230.326 430.277 li
283.78 420.109 li
244.154 403.307 li
404.714 402.019 497.992 373.379 555.916 372.834 cv
580.269 372.606 663.833 407.766 693.275 457.132 cv
cp
.597284 .512352 .507713 .201328 cmyk
f
693.275 457.132 mo
693.167 456.66 li
494.974 501.987 392.395 525.278 339.324 537.238 cv
312.789 543.217 298.63 546.364 291.087 548.016 cv
287.315 548.842 285.197 549.294 284.014 549.539 cv
283.422 549.661 283.064 549.732 282.853 549.772 cv
282.747 549.791 282.678 549.803 282.638 549.81 cv
282.601 549.815 li
282.631 550.07 li
282.631 549.814 li
282.601 549.815 li
282.631 550.07 li
282.631 549.814 li
282.631 550.276 li
282.748 549.829 li
282.631 549.814 li
282.631 550.276 li
282.748 549.829 li
282.627 550.294 li
282.918 549.911 li
282.748 549.829 li
282.627 550.294 li
282.918 549.911 li
282.625 550.296 li
283.108 550.296 li
283.113 550.122 282.997 549.963 282.918 549.911 cv
282.625 550.296 li
283.108 550.296 li
282.625 550.296 li
283.023 550.57 li
283.057 550.52 283.107 550.43 283.108 550.296 cv
282.625 550.296 li
283.023 550.57 li
282.628 550.297 li
282.889 550.7 li
282.915 550.68 282.953 550.664 283.023 550.57 cv
282.628 550.297 li
282.889 550.7 li
282.647 550.327 li
282.795 550.747 li
282.889 550.7 li
282.647 550.327 li
282.795 550.747 li
282.676 550.408 li
282.778 550.752 li
282.795 550.747 li
282.676 550.408 li
282.778 550.752 li
283.598 550.507 li
218.609 491.332 li
329.592 478.221 li
231.844 430.481 li
285.436 420.286 li
244.343 402.861 li
244.154 403.307 li
244.158 403.79 li
324.466 403.146 387.952 395.661 438.593 388.27 cv
489.232 380.878 527.033 373.587 555.92 373.317 cv
556.152 373.316 li
562.209 373.313 572.008 375.491 583.693 379.542 cv
601.23 385.615 623.054 395.887 643.226 409.238 cv
663.398 422.588 681.914 439.022 692.86 457.379 cv
693.275 457.132 li
693.167 456.66 li
693.275 457.132 li
693.69 456.884 li
678.935 432.155 650.759 411.057 623.184 396.104 cv
609.396 388.63 595.756 382.696 584.01 378.628 cv
572.259 374.561 562.422 372.353 556.152 372.349 cv
555.911 372.35 li
497.852 372.907 404.666 401.536 244.15 402.823 cv
243.965 403.752 li
282.124 419.932 li
228.808 430.074 li
326.212 477.646 li
216.392 490.621 li
282.315 550.646 li
282.64 550.289 li
282.502 549.825 li
282.462 549.839 li
282.401 549.866 li
282.315 549.923 li
282.227 550.02 li
282.192 550.071 282.142 550.16 282.141 550.296 cv
282.136 550.47 282.253 550.629 282.332 550.681 cv
282.455 550.767 282.512 550.764 282.552 550.774 cv
282.631 550.781 li
282.788 550.765 li
283.198 550.7 285.029 550.34 293.595 548.455 cv
319.279 542.804 405.382 523.468 693.383 457.603 cv
694.031 457.455 li
693.69 456.884 li
693.275 457.132 li
cp
.75021 .679683 .670222 .90164 cmyk
f
380.806 437.255 mo
407.017 421.97 443.738 419.887 465.275 416.394 cv
465.275 416.394 496.146 412.742 512.173 416.246 cv
539.81 422.288 536.703 449.842 534.087 451.34 cv
481.976 462.146 431.406 449.484 380.806 437.255 cv
cp
f
389.857 437.512 mo
413.566 425.71 446.939 424.398 466.492 421.841 cv
466.492 421.841 494.533 419.242 509.132 422.145 cv
534.31 427.149 531.707 448.819 529.341 449.977 cv
482.044 458.02 435.962 447.596 389.857 437.512 cv
cp
.597284 .512352 .507713 .201328 cmyk
f
590.234 382.68 mo
589.708 390.66 594.986 398.174 594.986 398.174 cv
594.986 398.174 586.082 408.213 582.097 406.14 cv
578.111 404.066 592.064 417.561 592.064 417.561 cv
592.064 417.561 645.919 413.482 637.417 404.842 cv
628.917 396.201 590.349 380.906 590.234 382.68 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
590.234 382.68 mo
589.735 382.647 li
589.709 383.037 589.697 383.425 589.697 383.811 cv
589.71 391.564 594.558 398.42 594.577 398.461 cv
594.986 398.174 li
594.612 397.842 li
594.611 397.842 594.502 397.966 594.296 398.189 cv
593.576 398.968 591.703 400.929 589.558 402.68 cv
588.486 403.555 587.345 404.377 586.259 404.972 cv
585.175 405.569 584.143 405.925 583.334 405.922 cv
582.951 405.921 582.62 405.848 582.328 405.696 cv
582.172 405.615 582.036 405.553 581.909 405.506 cv
581.779 405.461 581.662 405.425 581.506 405.423 cv
581.393 405.423 581.225 405.447 581.075 405.582 cv
580.923 405.717 580.877 405.914 580.881 406.035 cv
580.891 406.289 580.972 406.426 581.063 406.603 cv
581.241 406.922 581.526 407.304 581.905 407.767 cv
583.223 409.378 585.666 411.903 587.792 414.042 cv
589.916 416.179 591.715 417.919 591.716 417.92 cv
591.878 418.076 li
592.102 418.059 li
592.109 418.058 603.682 417.182 615.273 415.379 cv
621.069 414.476 626.867 413.344 631.249 411.963 cv
633.442 411.27 635.279 410.52 636.608 409.678 cv
637.272 409.255 637.812 408.81 638.201 408.314 cv
638.59 407.822 638.828 407.261 638.828 406.665 cv
638.827 405.909 638.451 405.177 637.774 404.491 cv
635.69 402.377 631.978 399.959 627.49 397.471 cv
620.761 393.745 612.304 389.898 605.158 386.977 cv
601.585 385.516 598.34 384.288 595.801 383.422 cv
594.531 382.99 593.438 382.647 592.562 382.411 cv
591.681 382.176 591.042 382.042 590.578 382.038 cv
590.432 382.04 590.3 382.047 590.138 382.11 cv
590.057 382.142 589.964 382.195 589.881 382.29 cv
589.797 382.384 589.74 382.524 589.735 382.648 cv
590.234 382.68 li
590.733 382.711 li
590.339 382.686 li
590.638 382.944 li
590.733 382.711 li
590.339 382.686 li
590.638 382.944 li
590.424 382.759 li
590.494 383.043 li
590.638 382.944 li
590.424 382.759 li
590.494 383.043 li
590.513 383.04 li
590.578 383.038 li
590.745 383.036 591.09 383.084 591.54 383.186 cv
593.244 383.568 596.513 384.668 600.531 386.215 cv
606.563 388.536 614.316 391.868 621.256 395.332 cv
624.726 397.064 627.992 398.829 630.736 400.514 cv
633.479 402.197 635.701 403.807 637.061 405.192 cv
637.628 405.771 637.828 406.255 637.828 406.665 cv
637.827 406.993 637.704 407.326 637.415 407.697 cv
636.877 408.391 635.744 409.134 634.182 409.818 cv
631.447 411.024 627.424 412.094 622.951 413.003 cv
616.239 414.369 608.502 415.385 602.449 416.058 cv
599.422 416.395 596.815 416.646 594.966 416.813 cv
593.116 416.979 592.029 417.062 592.026 417.062 cv
592.064 417.561 li
592.411 417.201 li
592.41 417.199 591.746 416.557 590.746 415.571 cv
589.246 414.093 586.995 411.846 585.125 409.863 cv
584.19 408.872 583.35 407.946 582.752 407.223 cv
582.453 406.863 582.215 406.551 582.061 406.319 cv
581.985 406.204 581.93 406.108 581.901 406.046 cv
581.876 405.989 li
581.833 406.002 li
581.878 405.994 li
581.876 405.989 li
581.833 406.002 li
581.878 405.994 li
581.645 406.035 li
581.881 406.035 li
581.878 405.994 li
581.645 406.035 li
581.881 406.035 li
581.487 406.035 li
581.748 406.321 li
581.858 406.224 581.885 406.083 581.881 406.035 cv
581.487 406.035 li
581.748 406.321 li
581.506 406.056 li
581.506 406.423 li
581.534 406.423 581.639 406.418 581.748 406.321 cv
581.506 406.056 li
581.506 406.423 li
581.506 406.283 li
581.488 406.422 li
581.506 406.423 li
581.506 406.283 li
581.488 406.422 li
581.594 406.456 li
581.661 406.482 581.753 406.524 581.866 406.583 cv
582.32 406.82 582.821 406.922 583.334 406.922 cv
584.577 406.916 585.903 406.355 587.24 405.562 cv
591.231 403.174 595.341 398.521 595.36 398.506 cv
595.622 398.21 li
595.395 397.886 li
595.346 397.815 li
594.839 397.079 590.686 390.688 590.697 383.811 cv
590.697 383.446 590.709 383.08 590.733 382.713 cv
590.234 382.68 li
cp
f
593.804 385.397 mo
593.328 392.654 597.853 399.469 597.853 399.469 cv
597.853 399.469 590.146 408.627 586.716 406.756 cv
583.287 404.885 595.273 417.105 595.273 417.105 cv
595.273 417.105 641.714 413.211 634.414 405.385 cv
627.113 397.558 593.912 383.785 593.804 385.397 cv
cp
.653773 .579889 .56878 .366613 cmyk
f
593.804 385.397 mo
593.362 385.368 li
593.338 385.741 593.326 386.113 593.326 386.482 cv
593.336 393.493 597.468 399.678 597.484 399.714 cv
597.853 399.469 li
597.514 399.184 li
597.514 399.184 597.419 399.297 597.24 399.501 cv
596.616 400.213 594.992 402.006 593.135 403.606 cv
592.207 404.406 591.22 405.158 590.282 405.7 cv
589.346 406.246 588.457 406.569 587.771 406.565 cv
587.449 406.565 587.173 406.5 586.928 406.367 cv
586.794 406.294 586.677 406.238 586.565 406.195 cv
586.452 406.153 586.35 406.12 586.209 406.118 cv
586.106 406.117 585.95 406.144 585.82 406.268 cv
585.689 406.392 585.654 406.559 585.656 406.664 cv
585.664 406.881 585.732 407.006 585.81 407.166 cv
586.109 407.729 586.802 408.591 587.709 409.647 cv
590.419 412.789 594.954 417.412 594.957 417.415 cv
595.103 417.564 li
595.31 417.547 li
595.317 417.546 605.303 416.709 615.306 415.028 cv
620.309 414.186 625.313 413.136 629.096 411.863 cv
630.989 411.225 632.576 410.535 633.724 409.764 cv
634.298 409.377 634.764 408.969 635.099 408.518 cv
635.433 408.07 635.635 407.566 635.635 407.033 cv
635.635 406.361 635.317 405.702 634.737 405.083 cv
632.947 403.168 629.755 400.982 625.896 398.736 cv
620.11 395.373 612.835 391.906 606.683 389.274 cv
603.608 387.959 600.814 386.852 598.625 386.073 cv
597.53 385.683 596.587 385.375 595.83 385.162 cv
595.068 384.95 594.515 384.828 594.107 384.825 cv
593.977 384.827 593.858 384.833 593.713 384.892 cv
593.486 385.057 li
593.414 385.141 593.368 385.262 593.362 385.369 cv
593.804 385.397 li
594.246 385.426 li
593.904 385.404 li
594.167 385.623 li
594.246 385.426 li
593.904 385.404 li
594.167 385.623 li
593.973 385.462 li
594.038 385.714 li
594.167 385.623 li
593.973 385.462 li
594.038 385.714 li
594.052 385.712 li
594.107 385.71 li
594.249 385.709 594.546 385.751 594.934 385.843 cv
596.403 386.186 599.22 387.176 602.678 388.569 cv
607.871 390.658 614.541 393.66 620.508 396.784 cv
626.472 399.901 631.75 403.169 634.09 405.687 cv
634.574 406.208 634.749 406.648 634.749 407.033 cv
634.749 407.341 634.639 407.651 634.388 407.991 cv
633.922 408.626 632.948 409.303 631.601 409.93 cv
626.879 412.148 617.75 413.854 609.848 414.976 cv
605.894 415.539 602.24 415.961 599.574 416.243 cv
598.242 416.383 597.157 416.489 596.405 416.559 cv
595.653 416.629 595.237 416.664 595.236 416.664 cv
595.273 417.105 li
595.589 416.795 li
595.588 416.794 595.017 416.213 594.159 415.32 cv
592.871 413.982 590.938 411.947 589.332 410.151 cv
588.529 409.253 587.808 408.414 587.294 407.759 cv
587.038 407.431 586.833 407.149 586.701 406.938 cv
586.635 406.833 586.587 406.745 586.561 406.688 cv
586.54 406.632 li
586.531 406.634 li
586.54 406.633 li
586.54 406.632 li
586.531 406.634 li
586.54 406.633 li
586.353 406.664 li
586.542 406.664 li
586.54 406.633 li
586.353 406.664 li
586.542 406.664 li
586.199 406.664 li
586.432 406.907 li
586.527 406.817 586.544 406.701 586.542 406.664 cv
586.199 406.664 li
586.432 406.907 li
586.209 406.673 li
586.209 407.004 li
586.237 407.005 586.338 406.996 586.432 406.907 cv
586.209 406.673 li
586.209 407.004 li
586.209 406.858 li
586.189 407.003 li
586.209 407.004 li
586.209 406.858 li
586.189 407.003 li
586.207 407.007 li
586.253 407.02 586.36 407.065 586.504 407.144 cv
586.895 407.358 587.329 407.451 587.771 407.451 cv
588.854 407.445 590.002 406.93 591.159 406.204 cv
594.612 404.02 598.175 399.768 598.192 399.754 cv
598.405 399.5 li
598.222 399.224 li
598.18 399.159 li
597.747 398.494 594.203 392.728 594.212 386.482 cv
594.212 386.132 594.223 385.779 594.246 385.426 cv
593.804 385.397 li
cp
.75021 .679683 .670222 .90164 cmyk
f
552.208 409.298 mo
575.533 405.659 li
587.728 420.807 li
564.347 425.332 li
552.208 409.298 li
cp
f
557.972 411.191 mo
573.849 409.1 li
582.232 418.391 li
566.32 421.021 li
557.972 411.191 li
cp
.653773 .579889 .56878 .366613 cmyk
f
411.818 431.839 mo
490.062 420.348 502.289 421.242 502.289 421.242 cv
502.289 421.242 524.535 425.891 526.697 437.786 cv
528.085 445.428 516.931 448.133 516.908 448.138 cv
516.908 448.138 514.882 436.845 499.441 435.791 cv
435.408 431.405 411.736 433.063 411.818 431.839 cv
cp
.516472 .431495 .431495 .0754711 cmyk
f
452.429 428.574 mo
504.498 419.622 507.087 425.157 507.087 425.157 cv
508.166 426.054 520.648 426.797 521.876 437.052 cv
523.24 448.44 521.64 439.565 521.625 439.573 cv
521.625 439.573 516.978 433.013 506.281 431.456 cv
465.398 425.503 452.306 430.432 452.429 428.574 cv
cp
.193668 .150057 .155337 3.0518e-05 cmyk
f
297.975 539.482 mo
259.165 526.439 235.459 502.832 265.385 497.945 cv
588.361 445.207 669.449 454.525 650.736 440.563 cv
632.601 427.034 645.628 417.916 645.628 417.916 cv
672.888 442.185 li
672.888 442.185 683.56 455.438 672.892 454.658 cv
662.226 453.877 357.508 525.982 297.975 539.482 cv
cp
.516472 .431495 .431495 .0754711 cmyk
f
302.019 536.214 mo
266.045 524.8 294.788 524.498 322.136 518.664 cv
551.781 469.671 680.632 454.104 664.878 444.73 cv
647.25 434.239 647.044 422.475 647.044 422.475 cv
670.033 441.543 li
670.033 441.543 679.964 453.005 670.089 452.282 cv
660.214 451.56 357.06 524.875 302.019 536.214 cv
cp
.193668 .150057 .155337 3.0518e-05 cmyk
f
272.849 410.916 mo
363.818 403.832 435.63 397.871 428.457 398.41 cv
474.449 390.546 492.16 388.461 522.388 383.818 cv
551.476 379.41 li
551.476 379.41 577.048 379.183 574.162 386.174 cv
571.296 393.117 552.832 399.082 552.832 399.082 cv
475.875 404.943 li
272.849 410.916 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
309.241 409.124 mo
385.089 401.169 450.769 394.059 444.789 394.667 cv
494.267 391.361 503.835 388.33 519.371 387.045 cv
540.951 385.762 li
540.951 385.762 555.921 381.232 553.451 388.13 cv
550.994 394.98 536.195 391.289 536.195 391.289 cv
475.488 395.471 li
309.241 409.124 li
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
610.714 398.33 mo
610.498 401.628 612.228 404.701 612.228 404.701 cv
612.228 404.701 609.193 408.897 607.869 408.064 cv
606.542 407.23 611.148 412.723 611.148 412.723 cv
611.148 412.723 629.214 410.73 626.412 407.211 cv
623.607 403.692 610.763 397.597 610.714 398.33 cv
cp
.516472 .431495 .431495 .0754711 cmyk
f
617.156 403.217 mo
617.06 404.682 617.734 406.041 617.734 406.041 cv
617.734 406.041 616.521 407.916 616 407.551 cv
615.478 407.186 617.281 409.608 617.281 409.608 cv
617.281 409.608 624.425 408.658 623.33 407.104 cv
622.234 405.552 617.177 402.891 617.156 403.217 cv
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
566.941 412.701 mo
575.97 411.037 li
580.636 417.576 li
571.583 419.625 li
566.941 412.701 li
cp
.516472 .431495 .431495 .0754711 cmyk
f
572.673 413.313 mo
576.433 411.962 li
578.238 416.433 li
574.458 418.054 li
572.673 413.313 li
cp
.306798 .242466 .247654 3.0518e-05 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Hector Toledo Soto) ()%%Title: (vehicles.eps)%%CreationDate: 3/26/09 4:41 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6k@3_fdP1UT!;A_c#m:=<!?4SI@%9\9l(*?gOO.HET<lh(pY%ikA@^Yg3R;#YSRa=@/PX]-1`C)08>O`SFdoN$H`?c.69(/:%ZQ'VoZFR3$B1%g&?L(i6fSUq77`[p,A3,Jq#[&=mE`l@m8IB028*Vs$*Mkh[<I50d0IZ\L4`sR,Q[dPtiM662\l0-s.d_EJ?f=np%hY7FH`;T&/ghJ?[:[QYe@?sJ?E097R9;>P"Gs(B).V^,sjor8bI`<K`#7)(H$fB(frGJAnC+?+eW7'JiT\BRY+["fR2.\a89HZrX%Z1?<0Tp`\_(f?o:3#6r56CuN"nJ?r?3:nNCY^@c;]g#TT>D&VQ+1?LOa-]>Tg?WtJl5'NG$-@R\j2:1&a!]O[bD-7P9/7AK+3p!!%*3""QFSbD$:a$H_QuEtWZqme,&dPrd?:SDoI$ePkEm'QJnlJK[<riW8dHV3gK+B/ndoM*W<)eX\epid?fF5R8n)VdiW3*"bh:<,L%NM5K+eY?GLBk%0Xp#U?;,f\blXRT$m>h%;JAV`1=f,fK6$K2uDJD.).s.uXr%9ic,Up"knH<6KnFZ,RZB#D/9]X)%4't>ri'uELb%J:csHHKB:N/:An=!>'dTn<$U::/M+cW3,ep\"HSG4R];PVU=T56]Sff#*M!q.o0N*;T/3HW,so>OVX7D$oeZZ4K8tr(EZ1&]Ccq1%N.[^c$0MjO-);elWBRD9i!#\Ymj\8HQ[TB0)]A:7:;]0>_g=QXn)Z=<RSLb53Xp;^Bt0X-PIn+/[7MsALJg5F^N^elnN<&qH!.!u%o6DaJcU4*_qLdMt4I""OTbMm,G:6HD6`G)DC6m%^Vd+s3Z4(qgRHL9P/Alm=-?TU5KO-tU_+<u\9mT$`MupXZ.GtNhTbQua3@4EM%,C"u!^_+3]hc(5a0(9#4n-_4-GCW*B6m)S%n.'i`-X6hH!%3mU_%3Am06i7-Z4,>uqZ,_G`^G\P9(5Sj'$^gVKQ][$_%)^Y2PMM=%+-Zj+i#Nr&(*m.KH_eX='1r:T["X?986t-ahVf8i8(o'A$0?+0hOtYQ#OeH'M3\^`')[9Bl2XXUonTsnToV_b8eJU2\Id$moftO2%Mr5nCBmYsToFK(EG>pAL4/bl`-?k#*G_]0b^O\Tn'2fY'TaYlVMGVQpI>:@R?m+/tFdVG$eMa(jBF<,jg+R-/'"J\@Lsu`;+uc0b%[KtuScjlm#Fon5a-hk_)Tq(aKU<TLYM/3G#)?1<I20q?`'8k/nC@j&,-U[WbG#Q(5oFG[U3^e>+dE5G27QUT=<0C)4O9VPHdS'*C%\>1Ip1ADADM,e)o5E6t4N)0!LK,=G'TB%X>a_&X0j-0BI!r6\\P.t7^r6FCPm[WtuMWBff8cD=.o%WpbJ"_ZDOXnF!q5[K9Dr[&Z%1&;uskKnDA:>2!2VSC2"ifD9I1KdjQF0[@ZEZ&"ho'fAt$'HEB\L]+!n4T'L(9YP4Y/1M/<=)*eN%ArmX[-;"8d<n0A/UZVE>8mB%,Km#L/*B`WAG+>3"'7K+;p(=-Smm:l+tKt[>:p#f3!!^7k.(i905q!BL9b'M;J!KHji.\$MRg#p((iu+;hPMINF:kRGm"6L!=V:"%OpH?<n:GEY[nmj%j-EK-:qPjEa$<3ST?ST3H(gDGk;%XRbFgBL3gL.D8th],1DsM4GR'a@6BkAmcX_'-9HiPS^]i#i*0ghp6@ABl%,"e9sBtQ2=5"F<3dj5$jC`4^s\:I,FaE^/s"4@/XAY:GE.&<t1Bu@'qQ:9::-!%g'jFLNcX0jM.'L6+M/!CB909A3R-;S0+?^O$N%68:h8JDAcaOW//,1AV0='5_7MPU]WF[0*c]jV+Gdh8=_E>;^96Xi6`8PT%[76IQFg]nmpa22Nme/hAGG8sl%ud5'-Ka=">9;Cl@k%5[Ij5YSNUF?qU#)$V8;j2q3.U6:bj7$:4J5L*u?g*"s>_\8i9^=XH1j-l4l$7Vg+>.50,4>5p9B#)sdf&T9d&NG=`u*S%$l:Gc(h%g5L/@]+1(chMV+oe0'4n%*4P&;!8Wp\X>ZJjrd6s%jenZ</f\2e!gH,d)q)\;5jRZZtC9qB6mQk3SXkIFof40V8RqL3!!h;T`mDD%4Wt9CM9Q\Og7]]rX-i8]U4G[n3P2GFS\Qn=ZlusjPWNPiT&?IY7Q&W*VW-Ha5"1R%<L-0>1:;mb/h^s&`X)`;q:6rL93[So8D.`n%i'fN@XJqF;dMHt=OFj>KQqpDZK_mC!P4VR5/dS,$6q=16_`qrTb:oAeoo<-5WbYXpenlfRD(IhWHYM-<HL3h4/$26]fOgTF)G?XJ%?6X\Hk3,?hohQZZ%""!,#jVNUd=?jO=<^ZhF0daR^Y?aPgC%GR88XG:ecTb'`#:;V*i\+]#oCAXd;1SXPP->f_`Q6`3W]kp_.,$S%qZ.a6kW%^@R08T_VpXoTEC9;qFrG$!Ge.uWF1W$4a*%mTWG!3'.>3h>dHD_50MkR0-Q5?A0b,a0T$gAAi*J1As/a,jA\Z6:hh%tZ%?LpYW`].c%Vj)'CIj064#PhqQKV`mTD*blH&*7?+2HX%:-BjSHCf@`]%dU:R#9Y(GQ$T0ifRj7+QmNT:_DfB`Zj-8)Z%?1+%=JI4%$df_NV?40p:4+lb1"\Il`ALd!9GdCZ/[?+aQh,lS%'rVaSn]saa2CF[^("jAY'IDS;scJ*0$mS5J3=g(%oKJ)NPq1&g4OfQkhf@F%LAm?5&G-(T-84lO"HeCEWqDs@gIq-abceBkU%=]V(TC@k:R&pf&d7,3Zq]Jprc,TPNU%eNCV7&4.Q+a<hl*W,HNY85WK%S:;gVN'%:ZA-Rr)AMa^_\A8"BXPdVCY].Z-HrMG[[(sHr=EVLc40g:pBhr>-"us9$OPmq#JV@oQ^QI<"_E\cqPdIb9AI&'qp*`KGmc.gA3Ca%3KZWGZjLRM/)i'E8!_>V,mK@f)RX-Ro:Ik?8&in\(B.l<3K+jT#o-2+H"n#3*4Ed4c][M&<E#P+Yu%q`,0F=DMl%`+n$&/uD*E\c%$oQId!^RUn,+dBfs-d9`i/NrR(%Ke0*e:+#$"QVcdGDj+('86u0;^9ub6&ddBB^^QeCA(12+=0hdNRbX<(,.9!#=fj#q-U7h-2^J%9njq_$e'X`5menb-XeGp?sA.3r0"FRTLf>jHA'$7mB0gXYm6R>D#esQgE4V0f/8*!rj:h*6I-AlnBQk<bi.1Y_*m-7D])M1Me`^A%Y)uRA9fT#`PC0::7@U])->dC<)opABT\&efK*9L&E9"Z<+`.OfU:##5Y)!shUg!rX^eJ?.1mLm(1eX;Eo*@7_eE2%1DAUHK(@'_N%4(Y)o&cnEA;ECRU,MG@"0iP6>b?;iD+4'lpas8N^h<Q>.J3ShDY7+[!*^HMg1mMa.AWBJtRlOg#F!.6"<gO2N0OVW6;I7Wf)P]qn%qp]$d%u0:':]h9V#cu;-8K>U?MLO"L<//f%Z%a9%&K$?s<mL(c_uCJTdeiPcP1N2'P0(=F2>gQD72!qfe,EG"q]YcAQDml;)6l)7%ki4@oNn?AGIsBEi:\m$LL-5Ud0<jU0A@/.P*/`MI!o3LMg+8K?onYQAW)f(DLgCu!Up^lY!5V?q0a1tBZrn+5*Uj?PR\NQm?Gt#5%2*k"M[1(&"JfMr\8NV?`ft5]RihOtb_tdlNR.lNS!adH`,2?t?pDfaG#Q#d/-N]K$9Sc-HGf?ugG8dm)@tpf.jWQ4^mXucR8Mk(t%D6(^BZ?W`45&m)aS&8i/Mc"5shCE(sY`D&V"4t^.haRb/KkHB7Mnu$_0f_&a1t"m#<iHqiU;`0MC5<<A((/`J1dnq5?TFI>7H@h6%(Pr<(gf0Jo4=MU%6L+Q@aBXe"ipT9B!I=r\`!@ZO!R/Vs=%)O"nI+b0gO`pV*)#GmU)'YiD4gH3]hWNNmuZ,HPVh.si`CXA]U5Pb%M-hI$GmX0bH#3t#85t+C5JKu<F8I!+k!](H5NY(hm=#A98Usm^\D^`bU]iO=l/T#:Vs^IOn!#]%%bi5D>o&,l\K^TR(>>;:-@A`A%N6$;6Q`G8U7QmlgJ?0>rOho\4=$f#(W/YH0fKU)>lnU(oH79_WTe<O^"A1bUX`He,c^(i]$Znj9QA(8'SjXn9H;$#,08`uO>.0Am%3'%,p@`F>[8#C,mE<Fau[`+Ph>//WPOiLK89#*O$64rT(K=W1cd?'qb@X&)?qY2KF^d3gi@/S"_`1*^KRQg7cH69Q+8>M,U7Y6X>%hZ\EBH$I/Db\u(o':1tob62":cm-DU@Rp?'8889C(1YU_g;rPjAR^]c6Bk7b2nIKe7IU@3&8;i>D$bs8F*Ke]d8botVjHR$h\LOr%?PZ,$*,-@f.p-k#-'$=Sf*G*,Dc)]""80f^1,$f4\8i@qfi]ZFkL-;H$$mMiS(/q&09'lS]_X1?rX#OZd<$C=,B7N>?RCmmA:GoP%*3;6SdmW]J=Ya"`U^"5H&4Jt"4NET:Ajs2M1)VTMmSE1(YloFia-%\\d>"S,Nho9W%?&>K1`h0WC>dohBTsb%#08*[94p5iV?8e$%As+sh"`g-q4)uG]Lp,nK*cl%_%['_?PJ4=^DINO(lW!@%BU\2GSt`o;KEnSPSrADl')WC72(]]*"rnkOPm!o_6H6M;s0TkHp0AX'%&5M3m6>]mupOk86aI4o(S]2"]JW?iH(4'!Q[2KOqShbV/%4B1ms.!`dGXJXW,T<_c.FL5K)%MW<&k_e9>09meI$fj\fFuF?W"cD)%1IH;ZN+2iHR18_3jZn_a0GGF[kQ1q.;`Ra=N1ZP<dom^oH`dPm4%2,XN`W"FWbN$)S7M>0SoJ^+3igME[$=k4\&JYi?0'=j;b9Jj%BE_'S95Ejb4JP3YV$JYD_dG)%[S$;3WSC&*?Z1FT(O-dOlj0LWfA,F[gY\*M2TNo)X/TV=3c!\Y`k>O%j^E*r,cbXHem`m;,+CNp%51>f?1m,=Ug(a''OTPqT^l,J40]+ppKEc+*''CN&PP[cIqFk':E<g>,?f5%d:ZG[uf."`C[Lm^+(sQj`QN"&/?d9O;"=V<>Hs3"l%'A5/g.SNsPQgU8M0/qpMO1\j`bcDu-MssHm3bW=RSKY%hUrV,'&UnHKRc5nGHn8p^1^hS;mAU5tWLkna5Fp3aIuIelSR,p/39eVn%rb\LW[.\"\-@-D?,Z0JAQMB"+"V"djHlA;Bf1,jglM:cPbJHD:YB4Lfb,M4+1uXgq.8D>>(_kL:as6/E_.7)c6)OXP`>%Ei*h-qa%Jm4`'.(!"^ic/5FcnheJ#tE^n=__hpV3h]$V/oYb]>5[iC"fuC)'Z=h">\m^oYS`b*H?^IRj%BCkub2//%m2H7rS^N6F`j+'7I[(%)1<5[)b`a2IA`;kQ_\sk#hJN$m^6ak'`&?:PscmSeX<Lg_`ZE*3mdR2!g2d%QqV(.s2.r721OU#%i<n[d;&)8f%O.V!WU&n#ZHcQ%\e!W#V2bIrFI;\(\;=!i)?"i-8M`LTDIrH:i`G(.S^hSQLU>j5"uakcIj:P$GgdSm=n?=1q-K"DZJZ=\d-%;Yr\%@[Un]&tJMG<r%&^BCMi`4PdbQ_3;-JmHC0j4=L42)!X7V(,r42jpBgGEEY^rQdIGK2rth95?K>.7<B\&#I9]&tIe/WMI2a<+QE!BUgXC!;bsGrA^K%m4TY@bctPXHQuRid8[Ac!M1afePm_'_b\Pqm:H$[Fl(;@k%%FGo58gLU^*(H][l(&g)?8s9_-eO4-s"'j6]QO8FDV]Yedkq,_CGh%)Wm!(Q,td7W`WI>\!SL.@l9)=5h7sC3"K!7c$)^jOVjS"rf[43(o'ZgFL5\')dj`UX]c#pZ?`TJE+R2;o]n9Y)IBQV>B"D$9ubnY%!8,]"6O&HB<\cLIRBaog*M/cGX61Bp!@%;"X]]BFkUM/>npi@P<@1WI:nKE,OU,S\n.%2*VjXmb)`!JpI^8+>;5qs/dq;C"mLO):%g8nSXhWt7\o.b*2Nn]8Sa9i`KJORQ[Q*Hu\6D7:K$$_4S?m+rL*60B&0M%uIQdT?:\@l$=O1&C`ZRp9[15THJ<&:a80au_3"KSpA%h*U#@^'b_&@d3;0(9a9paa+HE?%NMdHHCVQLpWhDA3V-lWI\Pu:aW)1cQir`O7)Ok1CT&hW5Of]cuT6tf>alj)J(pbDJE!f1lZOX%O#X'hNlGh=5_)KOZTn\KK54r_FJW$5$om;nPF!dsLn[_CUQ$&P`E727Enr7=?7qo]U6C6km5HI'4(N=&RmgXCX$s![fH5`cXA$d!%hG**--mUV^H!9F\G%#&G<6D*3`R,7A5&4&LkcFKK8e$6eBM^$-MW@Y^E9I\Lr3E1]7PE&`6&M$o9j>sZM>YB!QAFr?c^I[)1fC*4%mc>nX&Qlhqc*2DS-2(3r5HFG`g;6f>TWVD=_OQG41__.*!ldLi-[<cFmt=ktEhe\'asBdRaXa:ZOOJN>f)H!i:$9]!pG$R61KX]_%gH-b0(?2_"HitPjc"eUZDU<^^^OW*46oH#6/IH`h;]028!#aDOl2F^Y,&nr(%p/oQrCo9qX.#\)SE:CcCtLTF[-Q-e1eX8P_;EM!%Xe1]WJD1jU&@">SXopd@Ok;IP#`2*ng9(iE7n*S#Ynk>D5nX7L=c(F&N#2#HM/Hh<5)\S]BsLg\nGI:P(SS8$r*RH`A?n!X1rTSg%j<@gZBCa]PZT5U?9n%^h,3oGBNp^3)/1XM>1IN_K-DYUDDrk:1&oIq2\aref[<qB'T)KbfW@>_^T;8IGhp9>+<4^V6jO)=/^6<n-%D3*&G?*uWVms!Z8Tr?W1]ddI$?!!:F\JYcFnPB"LXLJ$\ce=QQel+Y"F`On<rC^l!qBiHCQ$TnW^94MbJ'b+\HFL&3nT>jm[Ik?I%;b*o,Y`3Gt5VH*X>(.!S]RD>i+f_VLck5WRgEW5(h,BO1^)r4)iCCE-<k?P,%Y4Ja;Fdnc;cda"$EtF$WM@:"pnHAUlX6j(FQhFi%Hkjg(*]Qo7L$hO!#\Y3A<ks_e</84/(0'!."1n:i6SI'GmFJmQmsh\_:'_j-l^5c,8JLJlkI&oZ%6B5-RBE(2eR>N+<bfAR6`&fH%%A`OFl8FbKejcd8@SkhFo\l2LiS$f8Y@*a8%iL_8klA'9a?#dWhtjpn@8)kHR][>9iu^nR92T&CFgW(p=b#F$")q]0VEL!eMa!Y]%$/bZt57c,m:NZ,6iCs"pI/h9@S+uj)3W<F'*V@IIcRSqTn0au\P3ZEOr<1u**tFuQYNs,G"u-6"X$MG0)-""QAo)DLPsT43[2SNg%Kt@+2>_#I+8(Ge2.?"D(,"n=qF89JB3>UI:Xg-2-n<=-!3u1S!:oSkROJB4ah.PM$(VcVki78*YBugVHXG(dts(!K$-I'h$b[m_>%)BQmqdd3!OcmR^Q-Cka1,$9;'YmZsnP0%?i0LW^>Bq@uDU_c'OdP0_.C&?S4)d5$$B6c"?q*0V?/8O2QrVU.bZYF"DcdBb6<?&8o%N]-H/D<1^2D+o$8[#$U:o8hi]CZR,EkAVbM3Vu`+8=I_([5%:9BOf&^NL<"$)`(N3r+!AiJS!&qiLbT.B6c"?J'(;6YUjSKN;Z+5%l86g@#%RG[T>DCWiJ[SCprZ_6b5<-)A\#IqFPpNbs660`pH&OYVC,tR29;/5;#KX/>7K#qP8[+jbf"7X@E`JJ@K+<t+S.[o_=YZ>%W!5@/n:hk>?[p"%LH*CYpr`OaI,u2$?b&D>R1smebQn1E;u"L<q"dAM0[I!Nk9'a#;u"L;q"d@JJ&DY3iThRtk9jS@7KY$kTQ@Lk%\(V*].&DD^__)A/a1\>O?S1<ClO>Zjs1?bJU0Hr>/@G.3)Cbh+HI7hWenl]O+0B]b<P!.Ae&H3M&)N&pYT8/0"L/r56O#2dfkiUn%h&6@PICIf&X54n[.]k$Iku=H_n)+h7%OdP9^ZMBLr`B'M+>=bjY<`890SN!"h8VO.]]to1)lo>3^sI#Ki6#qc1`3Ubh,8TQ)d\o1%i<.6dJ#rVKO#^d8%#\@_2K7+SL.t88X+ek3$-]?U;@k-uiJ$s_`S$ImP[!h2fCC3d.l:WYl&.VL.<"1)hqQGORHBR$s'N/)BNG.C%kPogN4t!RK"ss@8G5fP-#Ia5;B#FY9q>WT6O4lbkA**`)<h;lLgcM,<49PVgo)I`NSkZ*2ktF,[fVSIA>43QL3s@58G>)iE*1P4W%*khR'C(<H0o;.`O5A+c&JO;F84s/QBs#Vo5s8I?^@X29fo@\4^L40;<kh"_-&2=N[8]T/LJb+rlRkfA[q=0sRBmp_b`+OI0!tQ/3%IaaA8`%h(h&6NHA;1903U]Z[ts!5>c:6l>O2u3dS9h\$t"a2^$)/`BAqf/,)-f(Z8Om*ssl,RZ;ELZs,DGp`]U`4OirWfu.\MTob%hA-#UDA/Lla,g0ZnKok?jO(`X"3s-JE=t$j`>sCsc9K3d&i,Y2bWh-:Dr<Tpa9H4C^hYPeDUX[$oEW!&fe!.N7[mN@1U6k=g[puI%9p<O:I`BVs`GM&[>MG4no]%k.\4uuW[u%>NA[4O)1&_DpI$W`@[UT0pCcn3J"eK@Y05LPhq>WN,:U6*5h56<m4AA:dT%jq.@;Ye?%XUIOq_f"pM?2Oe]3\#;m;][1U\-\8FrM@lQ.Ja<gICP-"5O,@gQkYW>L*.-kV%pfj\nV[XYAF\e*("LEDgY7ZTi<,@)Wp="mn3sn%T>NVA-`U3%@I76Sp"o1CC%ToPdY+*cQmRBg-)'-TSK0)aitBTJBtJ=4*&W;@c&/a"Fq(A-dHV4#Q$_?LW&5"#P6Vf[FTUNJM#u3W%om6"EoQ$U(r_g<T9k'+`Kd!(P&=TcaG_$UHnAlLpR21H<P=8ia%%HE_qD=f%P%:\XeBthJd6ec)A*pIC2-GS_Df=:XZL/onlMZ\V%`_WU))";&(d1&P1.T$:!\p_sEq?tePV;RX0,IIaSG5W6QBeg^SV0.);pSDA`(%G-[I)a-q1aRj,=o/WjgX8P))qA6K30^H@>A9%H%"FNRXKu]0U30WBO%,-b.q_;bK#452@B^$Ukp1)Hu%,-b.qbmo,k/X.n(pkB;p1)JK'SD_M0k`cUmDkmu(plNHT^b5NmDkmu(pkB;%p88`aiQ%Vi(po\>)Tsg>%aGr#KXAOF<F]/qS&rJ]oTt:_\NJM'plaYt!=W9eS',f>+(OJCm$r9Y\J[Kld_DK\A!.^)aQ9^2PQ+?8%0DAuJIVdl%c26=5T(A.)gh`R'l/0kMrQPgYrl<[i(qUl"p\PgiVl)>^)`stG5K:u\m./A]Z268!5K<-#1Nnd=Y-,diZ1O*^ZPu""%a4U>-],tPW)]CenUd#B"k>;#qf\)8?:\)A`Z268!^R_Y,=f;$Jg:X'UL*)oZA+P.2S+j6an_Z$D5Ih:h`pUn"rJ&>[B:WN2`pP3-%ilB^M(q\\Of_qmMr"k=J:X6n>Z268!^SA(2=f7XZZ+EM-l_F1Cd:DWZX\QX5><AS&]#)%-+oee#,*bh/=b_R@]TD;tC&E\D39UfB%j7s*`Cb`/[Z^R2P,"k!S0n^X,=6VW&LZ8+n=mr`S<e`sFS#=`e^r/_2cVa)G:rQ3pI#R#r]D57DIQ_f,#Y"W5KL+u4Hoad)K[omO%J+p$f&\UD`qpt<r!8.YZA1[d`JRsL++HQqR&G\m`jR"'lG!Zb=Jd"Q2K>SEO!.cZQ5tiOu;S`iP13):\2@u9J)9IglP*qPsbSVRm%8K#Y&(h(i+K"r,f+=:#=>epUg4.0jB$?cuE16NYf,WdG"feGtk8K$KhN9!!bRfidFDZc)h&4"5FJ=dAQDZRX0_F+BCGoM9j9J.r9%"d!4@"+\O`!Mk!Q+sGt:2?4CJ,;*m:0G+]&49eX]:`<\uqV&!Nbs2gk(!JLF\bni9!gg@ra@p2[EHs'bbX>@EjT3/28TuAWY;"(>%H)o"(0Y:@q4pinrbl`K!L>8g-lFciE!9X;;4^6Qbd07$LX41pD3_FTEeVEfoj>fYY,EE@aR9WhcS'P]q=m]Y>#XTB=R(0iINF'5p%,!iqXO%#'kldI(H'cV$gW3&@h>otPp+S&_o+5O?o=1?fVlA^PWGI9BpPG2k/'g>^aD*l($1AD-If*A8->5uEf=86#d3(EPVe</oF%Qf2uQ6urXFU'*'K.SWerbuj0h)%HJ!:iArc'4g/MFpIuWWcT2p&-]1JGgQ;J&s*Gfbe>Z<@a;Hac5^V6O&K$r.-b/3pd4fN0O/>#%L@s/!]/BM_2kC3dQ.=E_V@5unE4+PN+4]86n7f(%>L<")oPk=]I?$9:8tRBs"(Dc0?(M^I[%Pm3_B[CSN\[[p;+D6#5'n;M$2WS-%9N8'lJ"9S3s(jt+Q`o+j/(@pg&Xbo.VE2JQZtC(dg0:5P%dKmi_-cYN<5@U0p1CQ^%?W73H0ROhPOP<glacnTB7D+oNP\mqmF6b$%o"/Z.a)KZaUf./Rg.q@kpJeJMrc_OB!qFfU\+cS=-I[6NZ[3q)iDXMcm>Yks2?1GE^81P]X(I>\iOYq9rS;!Lo:/JE5?ufA\qB1\%lKVb%J<>EKK)khtJo`]uJ"q+s]rmj9Rg%81I^.mVdLrF/QCO0!2(`1=/aVl2!I-uSJUBs#Nq___>l+JBXT#DGF2UqVNi#<4'`WCG%k`*ttf^&IE])"Y5MA?*tbT%>q%0k_)$A1C@s$0rlFg7V)pg<J+LmHqSPWtk.%c73X)ir!gF#OrC>E+-D/`m3`REf?l1goFbX+'9?%D\F)Q?2pIC#tut>B8*E/?hDQX?afUeY5_8"1:\[NpbVU35[EpKAqoE/lK'c]5AkoRiTAbLc4,bk]!:eZ)^:'8Wk8d:eCJuI)hb9^%3krMpO3Lu?LB:)P61&S4rm;k]GEY:e]<fqJT95-[\j-lr]1doujng:!fc#!,CD2ch+X3g\^>+I^Z*'gaomgK'Quna^Dt;k9]oU;E%>+JO&DCg4?Y3QQY#^jCgpA1M`eB(J/0n#*$Mg$`/E5XG=:.XNR*1n"`3K?n@3L7p1@6rh79SUk"fbdZrYB/bGT/"SV2%f(4!KBQ$%T?a9UP,T_Lp$Q2[5tt^aM)(;"qSgr.[B&-HX-W=[;X`L%[i-JL>F"?M=mXb09q*[qotd!>l4!O&Trh;-h9rBV5YY=dhb%W.M09'E%=k+6Rg^f=<@8C71U8Eo)XlD+o2ncV!>]0KnV(q>9iR`CfhJJ4\];8,<1i0Y48smPQK9RA6rLa63^UD"=G,p[G"stYr%]d`6P,(m5%5$b_arM?H@=T6f"7+k6H[@+#)^;PGFe8Ea4^/EG]Jrf>7'qDYTf%QceVUgd59U8>KGqR?PSP/C=]Vqcj5pYPJ![frD^,CA&%8\!l%$_^:uloPV-d`I9V4[U(F<Yrrc2eWX8:]"NT$sXW`OG>PE[fnBgL1VrOc$!uB2SiLT,XmPbVQP`XQ-?gO=na5=GL_#G"U;!`D/'Hp%[KTaU+t]cn"a(JY;@,!ig+2uWJ.5RTCI)Ms$G-[S]^1L+.;J!?@?qWW(0F\7pnZ=^[J\#*UO:RkU^Sn'p"=[d^:&ce3qQ2U0W3?Y%[[M%)\k$Oj?iUGg-$A<uD:]_q!TaI)dV:Sk;aD[O*s,9T2q39u4nV%8<7[l[mR_"m7%.Uf&WQ1(5PYnqggBKVp"qi<8MoGA[V:uX%@;U+f!f>+6[G('7WFL'IUCCY4[RNoQb;tcFM`-hZ:ghagb*DUJrEX,[hg.K*<7AijT;'u;Gce"K&)lN"87Y?!p\'nh,M,"riF/o3%\?'G4pAh&34@#C@],'kbeZXOhl2ZN\WWSJC;&u=:R;1<T9lqFH!sO[g-2?`PO5IOdA@()nhg/S3mbT$2@IulEADjR*K-W4ui"^?2%;3S+$/,AX_;RMu>CeL<k^'?B!W17J3$tmXQ9L_&%$FrN'S*IfCj&r9\_SrH$1`3`4DKM&k9knd!I<h2GUL8$8Tr9"6n#Mn6n^%YC%VF`\cBtB&=B.%O`j\1CsaLd`na/#GmnqJ\l1]7)"/?*;0U&%kN<534?cSubP)^Xp+b_.q_&dmUr?\,:3N0Y75*65`&WpMa8W:0^Q%%P%(:Bh%#cC=&og'ai-nSB(+f$ME/5?QKQ3b;?d409Mta_cGO)U!VI*%;;c#7i?-Fr'hQh>#Zl4M#jq>M.;sik`p1RFuETBjY*It%C"clti-KYakpl.E@lj!l9"RI'qWq(Vc%<d6;j*[j*mF"A]r@s-q4(qDX$meoS18%b/Mg-\e(JX3h$HRTHMrSRMh)6E4BTW-R\NG@%.(8Et*LI]0;7@.Y+Q1]@DO1P0N4I&4.6f>ACq?=:dE?&P)89-Xd6sfp7)ngA>.ZsYI>EUWEd.f4f[.u$r(50O(%TM0Z_p<f9IXU\%Y^>cGJnGpdq:->[_6?W='^YkK!Qmp":e`HYZr)oGr?b(<h$m%W5F@'5<CjI\24V8r)FX(t4^\4h05,T]mUIgtC%;9f7U/jBliDEk%SB1XJ-sh"YZ-uatEUMIY#-IX&BenVBDbuNh"L\$4>8uf19a^6A)4.B7aQ1kc;T$,B+eg1/nmRn$>Ck>-G,5Sg((`hL:Z('L0Ab2q%j,4KjYf3mbf)W[AmW/.td[_rqAf.p0nl4I/FPMsN]Brm=nC?g!BmJ=Jab4+Q)Y;I0!p$>sd*d_jE/0>%0_+9p%N(l8:iU7;KAPoX%R_2hY>&Q`t6OcM#d'(n!/7[lFc2bE%j8S20(J:TDi3_A:p[Fu*=uU`#[..r)^Q]sRBNkAC,$G/e)-ACp,So33@a3toL:orb"g.b0%kbkF;>2rO4aIYjb_hEAYb^?2>CH-E5+JJD,1eI>^Z!n/f7ETR/:*bhX3<mPA[o+#P'/.%PXXEr:P3Djn]04#>Ln5NV@J"T1;1_uB%9(I$@iYPM]?X9u9Ah8^jF7PN".cYrpibOUdI_9%<Z8%t8Ciu68^!Eh3fr/e!L3PMcX4DbpbGVbNSP:bhTr'?R*qbP>h-T,/m<'*F%Y9>+QE.V.s422Y/=TJYLIPZOo41;8$KSS,A_.0a/.O0<2YFbSjoo;&CegpQM[TmU>qZN[!.pc%ZB6&3e_UJYbkWT=B)a2hbjqB]d%bS6\Yf+3tiju?9H^1ui*jagLer$o=\l+*fBbqBaXV#%J_XO_kMWcp=\<5T4#I^ale18=9Ff5>lQ&SO>PA3mG:P%pe$d;>^Ae51ca%R&g,Z*BoR^J,p2"_$^bM9a%Nif(*jKm,Bo4ArtJs:mL?pP1eH]c/o_*0MF]a!a8?uJ5-ec%M\7d?'rJcSq\/J$2Hh&+/@+s\)(kH%7"Y(QMmOPM?X_VNi6^RrbdjhD3/O#!N-t\Tj,F]b0,1iL.O\k)/N@/Q!OA'kK"XubSKeF9q\MCsh?0(^Ot<#&C><qI%=%cAb=%).%j1.:6@.LF*<ibTR>q8)h2RENl_5M\+].IU?-NSVR\]///>4PgFYnGjWIX)^R5Z,*X@uB]cJgIQ\3:5l_<r(4<]A*EJ1Ds%B9Sq2h%Q+V=6Ga\9ZYhj6Vk8a8^P`u2(P^$<%_XO%0cYDqsWiJ:Kkh!(P&<`>K!q5mVe`;W!1g5Qppqsu[-*5(k_V4p(&H:::dL?`PIf\t`%2f,'._718`&)]3gRMZ+/kOp:@BKQ9VkhQU4=)SdBPM^6pGs2QQQS<.UmN%n&f<QMkKFouQC):T%Gh<*0%40fHHX,jpG5W4>7fY8u%)NAuAK2LY2aP6/U31ON0+kXB)hi/1i]f-%ACChP0^Ylq2ahTLb:g8@C`AYS1FIi2jAUSHpak@:>.0+/O4^<8?hh-!sHOZU/>Gcfr%JmdD4@kM>O$E6p]:3"6VH%/&FPn[U/DJ"&e<po";f3>9pop`lcHKA\N<)e''+,0IW_L]@]Lp!%Jp#KMK^YGmZ982Beme0LiVbheD%4Y!J,L*0R-UKiJsA<n'E+FQlN$"g`XnW[9/DC544io#nkKd+Kql@MV9*=PU0HY:mgAk&bb>?fhk.@FFh+%'%FhBI?!,Y&3Yh<n,9%Hn8jsee;Mj<um+o[GaW'RpR)U;J,a9o\!Qa%Rm0Pk2=c%fWpTg'<]XK+2j(Xo#_uP\Qn*u\G7F8((5b*-S?\h,<<?iHj`BIYiHVM%6)D'2CSB61[VlLkV2o'\6b$VXicnUg)Jo)Y\@Jql:#I.W#N_lXV]P]Cnh'5fpD6Hf\^+il[_C6;1u-TMUJN69)3$R)NU0fTr/l9]%fG#RpQ$DOQnIdL@="i[@10WGH3`u72BJf!]n?!G/]N%0%AsQ$="gtc9;J8361e[5WcK_tZIi+$mg<)A$+"M4KI&'+AIcK^u.!?Q1%SbUd`7S;l,CpaBh20_cPC1ElqIhc'+@RE0n>Tp?YX,:keAt"ES3E8T:b8tLhf+UcU/Y$ti#Ii5SZ+Ri^FBqK!ZNJ]0qtL$:[SZBT%`AauhpBBu-kn/R(mR@aTg\fb<1s%n1c(B,E:>;VK(r*5Qk#Jb1Y`DFI;Q@IA+tpn'<5?AgN@,,<(C<Ntf>[[srZ9s_2mmRnf9J^$%]UYq5&7F9F[uXM_L5Bhe<t_%1o=h';\_c&qBRV!eiKht"7ds/F=Ub`g<'&A4GVf\6UKcnX8BKe*fnGU]N(&_"_G5j#j$+LBL%H7L%hGT-dQ$Rk$\\u6hT&i`m2j`Mq\TB=7eQUkLn&N:l-rS4C?9Am0hXSk&atk!O.V3M9'3Y1EIP/)nq:*Dg-h8mVhptmT_!Mq(3,eL!%I(@sTk>4:?XrYY_XEd?I6Np2++1;*PT0/&#>h-Rq6ed!k?JN%-/rCGM_pLGZ2T_EK5TA]P?(dj*W99\8LS79#Xr2NJ?8d!Q7Xcb_%YmP<]Cs!C=NjV9feB:)0gWD!KF2QF\+I]Y.0c4=J+^WB53iMJ(cNc#PR*Bl*j$f!B*@=3eoAYdg/O+(b6EK2)8*>.dNir"ajU_@g%WtMT_AOBBn#Is/PKrJ(@TV4g(WB)Pc[A@"$rM)+Z2B%qFU2\.YgY:Y.YC0u5]sq9L:V>h\RO%p0*0rr(n`$Jb7i#\u09rQH?V],1%P,<93\&'*L1_l&0Fu)YKRPR'kA#J]'=j#T@na5/!oh`Tb$ZX^AP:KO3..QUN=4lFVftFEh7Ok6@qJ2qR@C&mIGHZ>P`Q-4Y!c](/%!V@n!hD$C]X:+d^q:iq>WqNr#ioAQ"@P)*<gZfi@W9o!E.p0?nfqTl6+ZOk^8B]!HXW&t`0@FXuj''*S1^;NO/)pBDI672V?Ji[:%bnp]t(?9l4JCuK%7JeZ^F-hlTD#<&a>2:_C1mXMf29WXm.abBeCLa0Fh*mbP*=D7k4JarZ5PGfJfH7aLMqqLXQIo(3?ECg[PdS,K%nYNb+=&,J603?4%<*)]Yh<8"CN@m!+?!J6"0m'*f<#^N+dTYf4RC_503@T.UiNU&7*";:ob[IkW6#Y!\F3$7.o'P@Y/!%F#Cnke=%UA5`)?G\Q2(3@U/<q.m??D\H%dC36WPgn)q;Zm45!S3T7\Xdg6m8G2t[).6C74/TQRGhO)*Q\f.7(cjdi2\;@e.@dn3",u<!*BMr%(a9M+/(M]u%2e47@tE?W&a:RqO]FCufcYO,Qhqe%m=XB>-7X,JKAQ#bZR@R)kYmU9EV%C"![>t&eRJsJ8Mh]NYZMje\S3F.#[9+K%=La&j.P*ud<r@E9b/kh;;U5&/oEB"??ll5^KpNoVJiOt2-q*I*jX6u1[#9iOGc8U;6Ij;FTdo*>_D_IQPHY=r=;"RQ-D$p8UJS45%R!@0bW(Y@[26*G1dm7*80m-C2mesQt.DR0!DmjY80j;cSW^M"1OVC<KE9\oVLP0Eh!R+/n;14UNJbtXgg/hXcaDV?"L5tL-Dq#rd%n@^rL)WE*kfYnK@4W/4Zp_3K51B_M*:0/O=Y2>[mEHTp!MlXu(o(:g!o72r>]4e9nYKALg[fq%c/VuqO7X6THk\.`FN'%p@X*D="%q-Ir%4VoW.YO<2]PaU<`m-rMQ3b*=pin&E9KB?Xo#n84\H=)a#&D-Am5PAKDEL,8nZW+S@NTSD+U[pS3nF4&#AuP@'M!&(.Uf_tA%?]bTJ/p:>IQ8kHt'TSUToB,n-gp>m4/]R5+,kS*DBd></,sK/IS*#]Hl1J=[egc$$DZu`\_'j4-7e=J<E[R``S(WW`;cB(<k1aqF%NOWV2!,aQjg3PDpFT*Ba?-#r2hKnm5QH;^KW<mfA1JU[H9MI@I:Y3s9@#[jJ/T]gI04Ta"CF@XqXUQm-?^cIdF&9_kX<Aqne=SV)%^_:ECTA"XR%SQ^L64eJqSJCVF8nX:,+a/X/K3_MsOHXrBK%5=>5>4]HT0h?F)k'o[i&'t^h*'_s?+geF/e=)UUY\S,dicSG;F0BS%c1>^s#M:W9q=f7&rJ)SOs$'8WE['n"7247bc8HiEd6QS%_qk=OCH`ita;eF#<a@%$S#aKEm#&2o0og"`J$Y.+SJ//N\WGETWY]FX%'%U.(B@>,^I4^^K*Yo*=i9+b,qN"4dDA)X@daq>99ghb613s0S^r501oYkZ!(cQPJB*umYRt504Yfr7*P.XqC8Es"Sq<;m98Zm/*%W)n#%Hm_E@/$YVUcO#Tr60[aCGfn!C43&85UYCTLG$MY2\Mh-@rL)5Igfn3?YL2Yb;sbse]7Ubc[:.X4V%*130o$sa9$0S&rOC&c%NimR[Jdl=)irs%=A`bROhD`87l'M*9R8JfL':4=T9,lYNM><.KFoB<Kju_6/nQ`/Y.&r11Hh(>kO[8-p)U315bq9p*c=Qf3[dX<f%VMgqI:Yk%'=a[(8&[/Uhi0XJ^H>^%6@f_P%Fm2.sHQbF.Xt^<LD,O:#^D:4nH8!<s.sM2M3/h5E9cHAgn(qh("F;_i$MN?!X[.l#%W5ABonfK@=AK/PfZ[<G=ZNW1+e)$R+GKYbY>bo0t(628LO56B;`PYog8XaYbn@0o)48B"Z^??c0Vsc<;H#JNJ7dIaAm3Du@OQbBj%<jn[6X=0O-p.eP_G4M.l5\jZlG(_%Bj7-^KZ1@f,\OXTQ0,2/o:JlPYqU"mF=^?J:Jg?K9LG@u*ns[.*=a_-'Z1%5<>oTuJn&SE?%Y)iE:le"p($Cg:;;L(<KI7Crm"rNl>=JZUB*lL`/Itl2)FcQ4u)Z')(EHC;`7G@4;mRu66S"t;;G5<h_?c6O*?R!+C6KsDFWb,=d%$n,=/C&boY#0t4K/qU1rB$H2-gr7EV9n$DP\Wu$5]LqSHE^DgC`hM+rdJH-$,i0bQ813td)fNp-%gSmJ1l._6.e,CqbriX)>P4U]%:W9BriD@R"78<]o^^mJ$RdlZK(WggCXjmSes*f/j"/1dZ3'quaq=[j&Xe$OVQS'H(dd>n['5NnSfm"pNn^tI'n1&Of-6+s&:2E?W%Pc*.MNh[>Lh`"`(7.6.)Q8-R?[B0;9gDR/r6Ffm,@E,ZfBn43dUCZA*m-lsGjl>p^N_MI>eI-NY*kBPQkGXN$h^7eg"2uOJGd%"<%#[RLNBS.SqT8,PD-%GB#9'pBEE.YJeHs0^8hJ+^WEbfYTM\J6o,'LHiHVQU)m/fn(dVJLH7rKhW4=O5>M]8M,g%3cCgPcoup&#)3%E`!MlS&`r]rZtRT;hce\H0.?AeI+5%5M_41O-;FH0rqVDmLoNp?kABTg=\E!an?LBG#FG"QWUd0L&<rS)kWt9ZN1u,M5ek#h-6&c%io@XU0#!tH/T7ok@QsH23YrC[5)WJYqfR0_)OdTjQ?[,K=L_DgMn-RuN8p)]==RQl%C[)#U=50rS.[d,$>":fIFO*l$bLb!I/1M2%\CDNJN=9B0!+G^[U`H'X`N-J+OU:_>Ik[%KkKW[/iV<#fjIE!S$[tt@QF3P*]t8`O>SXYq#E=0JnZTB"+3N%?'t'2ZMdu3d,jd`(%##aG\Y&)+D,F:q;Dner9PO7_H^76dLiToe>4J`KFMX4RpJm>^APk9-mU<+JJehQj5rP@O;DF@ej/?2?=6g:_N-63dYO%.Cg(p*,[%aQ9n%[*a</q$T.e!X)thM^:%6I'skEqt2-"DFYE%@cVeIK5FlL%<SfnEcf'A%?ns?YRrgWZM=W%Ki-Wm!7Fl=oNF);bGlN5a=H!C%'Mm@Z)GRP^^5AE7r?ZMlUi$b?ekDL-a:&]*r:X^!,%fF;cbNA]j&g7D9^%\a>r[j9MfQ40Bk4g]o6N1S+KSR?W#a!Y%;nt\T(j(D%`e#IcQu`?A7G\^L?9!h?d7ASgZ4Nt4>1B.NMjr_l_09LI3q5X?A@NZU$n9^7;eb$e=fJp_s/(J`4`KV0U.Do*`AV$^e@^_7f"p0n%8NLP7Gq?@Wi\I)tBFC4j/1q3D,Hr!IL%VoL<ThjOJiMJB0r9'*s'hJ5)`hRL[U1PgbiYqYK@_7:jG)<i/$LM."H,-rGi#J2V8UK"%PBoi.,FrT@pk#cP<#U\m,FZ_*W,a2.^1VXJ^A#pRGbVk@elc-Ae+QSon:_iEJ0SU0.nSOK#`FI6Z#O'+T<-%p!2%iUb&&5oDKr[M%0[!$8bb9iQqms;jQ=FMKg^^FJhX@*FJ!Z3Hq%l/d`4#tqH,DTcCC)P/7F,GP0LIiq[?_/hRR9^Uaj9>gO)-*!/daQ+'f!0Z(rF_q%\f<k8^FHRVS\^%Y=Qps"cXUS2gYX%<7=n7jBdd"t3>-D:rHH_PJ.:r&=a^hVH9Gm#D5=+Re(\)j;PkB/_D##Z:k\j\o/5TIf4;Ge%Ng.17\nLs+097Ko=:R"q3'unOboqRIo15r/MPsh;f=GQF=?.mkdGhL">>Hl'6ce$3$OoU3V3Ldj2YjDsa/b`7;r0$Sgc$$XL:(.=%4A.n1LPM@WqI6_C)Y1r0qF[TonT]oG:>mbLE/F#fZLW3HBZtnjMs'Ko[D`F'Di02"c(]<)O@F!"<9cO_<4ZgoH7)r[O1M"j.TtVk%hR!.>An(DZijZ\S.VKU)p+:4*%8@daqkT].C6LJ92UEccV^q;>U9H')]`X(Pa0JNWp,8$lhHt_82hINQB!ZJSi9G*UV=lrsZ$UP9%dm`XZ//cht;WRW;FX4^aN]pj[`@@GuX`kEp);Gec`b+-o'[dn<WV(&Vn<["Wqt`M'D4:^g'A('1TP9I@"mctE?Cs\XJ@?,$f$6b)%?(ti\il.a5@E:)$<W&pBc9'XDO<mHnjVeS*I:aTWS&]qU9G@l8[(:N+XgM&dc,B!X8^&LS!T$EVnUgY<mLZp#Si2VkiDksq<GI=;%LO671qL/fmi%-.E/Y^'I\_j>mpHI!k2-'I2aH_.V<I)1O\3pO6rRR\;$\*GBs/B.gWr1c^>E0.OHBe[VbEe/tZ'Nbm5E!EQg`DG=%6f\0.]Sb3aq6%#PRsQf"Y1)^6eo*\thSfk:Yf;/7ep"RLgc10<=.?9+T+5FL$h]k<_Uk+GfXb?D.@L_O:[?Dqdr>JP4tD*sS*SLO%]6nH7nepl^@7cJ#Q?&p0:@AfY'E=@X33QP@(<f"LQ.Lpdf!()Kb]hu)lnrduRRTj9ni3KJF6#1,[)Q>XQ28[:6L=+kSB<M47h.St%K64?e`Ydc6f[!>4q^6aRI,X5Y(%J$>RYuu$9sYT?bWBQfjQ=DmJd6@uShDWX#237Fbs06!8+A_,Fn#V"6PkAI@s\`;\m4JQk:\@[%bPCmJ1e1$"m6Ou@q'99o1kn9Us4c,2o;qiG,lGSEZM/5fV9:hVdWuB9lp2r\,=2#?]beP4;pAA`pX$mgZS+XmkNXqDUuFo7ps-o6%%H"\>k#ik0h`0*"i>Wa#SVpn_Gm(`dHV<O+F`?HOot+IVl^[uWLo'jS(=lEbBEl3_hu;>7L`PC7(D7fAFR/$?\I]htC(#ln)ei`O%3T?FUenl+rcRtGlB:/cZ5QakaqTA/p]POK=\TA=\?0;^<Z*8ZoGF?-WV&YAklLrf0R-5V6'G'efmG-R\F].Y`AZdNJ_]9uXagW)W%QFPIQOiPi!Yb[W3ioTj@F+ga>]<P!G8uAZbAL+Oc6IgXeD@A-/P/KPJb1$\9#%`FW4M9[FH=&0rF+qT#:COJm,;[t?Y]HT7p?od)%AfS:<oT`)ZEk@appVnTW\_BT]D^?p^#PIWNiQN2(Y4.Z-loud:OZk?=,QHJPej.Be%X0/C82h?Zl@=kmc:CaaLWgrD=>Q%n+pQc;%C>rp_"_mZT>$ntF3$Z]'hCp^kG3"I$;/W+JBc1'@@jbS#q;PRu6-:iL:2?TfL@g2Q?+RX)OQ&F$3niE_ip-MYo#=PB&"duN6[H>T%C(kN3A(Y[.Udu;//(QVl7@O.q*?518fQaGDmk\0<jZ#Sql&D[je#)Jh1tt2s*#_?W9dXQ>lI/Adap"d"i4H%;g(ER7Hq_-qh*Vh@%h;@prH/2_a%T\8ueHr39H=8&'kg'.%'2h<F=1/R6#`H)jQYT[fL,79%m3<i?m[ZF[\gS(I,%%=MRM/RUleP9oNa6nkQWBCGie\&@%$Rp5F5@"JhCLc?ePLju2ikc9o.eH(?40MYXFK6Ru?'!^$o!Rc7'gZ#Kpl[5!hA)IDI3n341_^fYmX5V!YGF#rUU;=0>#SY.8;gj$%A^L\GI>k-?PQ=5\3bB&piVLH#;b7B<Ok-+J2I)@c5O9DTS</?aceOkTX4<]0UOX/]9;C5<CGY.0oW$(->`i@\VKU]2BdhuVlQL?"%:D[;um_l9"Y$XReUt7]3CJIE_9a7uNcf4HJ7DKEOk4.LVk)As-jSe[>g0A\eqD_0?@AGTkN:Ya`NN_-I+dJJYZgUV$UaO-KH7ocN%2P^me!OS-<Fl#R&\\3^_A#;k[eea+RekWQHNiqh,J2BI@BhjsP@S`cE1[:7MPqCP3lc\#XZA/!%^LeF!<g]ZB/4RdaDFaH&8<`>s%rEoqnXrBnD(<o*DP7%mo]Sqpf#@jY#TpI,tGG:@U9tUk.I'QA+4q7r*(@fBsiu<>L#7(](Ri45>QgD:[?26lZjcLR_g=hBt8.0'%%/#R`\V9$e+7[i2EXB%&R^d<9O\fYHimnWs51FD&?r6"$Dn8'0iji4C.._^'Zj,ru2oA*:Sg#Uo2lGJ25rD@uOPM(GA%peV+DR9#P%l&sM$e,jZ"+];L0i3&8tfmE,WK"T=Er@t]_h#$<aU!2b=<u"IOpTh6>HL(#/LH0PT:2mAL^TpZu\ZVI5g`:8PmN3thSF7LSO.f*%%*m]jOmdncF`U2'QbMC(Fdt2PHmW^[7I)jZtPY3u,XNE*[D7MiZQX@;)hcI6lmVYLtb+%!OgKe)oe^E1EZJ$e=eD<h\QhcOEkIX6Y%r4*P8a.2T>T;*"oF7<Fk]A10sm%ak8cK/s,]=7d9jIG\q5+_?.olX0a6"5mjpUYO/f7*_5U@usmDZ,=E>"f4-S&CP\@sPS/U,^bR%@idj85PGs7mmaJ+RTImjiuP&0Wk.kN(5eoGB@/-_:QF>q9)BuKV%29$1IA,:g_hY*Y"F^u7k]S[>%D^5"lC>a(qRHs>:X$`eW&;;%rRb^hTCMTZOkS+L/Uq6q`U(:.QM%5Fi&!;IcR]j_%QE$oKQM[VOLTU'o?-7Y`Bs2\2M,kF0`N[WX<0VN?g-WF+P!p0H=)Js=qTdN%0W0qOh,Q9P]c#eN%\=u[D<bf$;Q[(Q)"R/3.qlMXZJ&#qO^$X&?.UDbb<>G.]Y0O6o7,+1PF^=eo.T^FDap4Q4h)_BPb6N4OYUs6%5B0!30;2NH2ne`tTX>oUII]Y7]9%/*]">$"l:BC^?'s"$p6NGgd/uhKgU7Iad>Tn\>;hE6XE\VLg0@c`16<\2)stgY"0G;5TP]*i%Um]tAGGL/f4(IN?<j[,>i.;Zf-ILW-eI?6K'e+Cf]1g&+=6u'Z+pEJWdS7@\""EamXM!u)fNOP7+C>5Ga5=7Y3$'pZPri,HCjk3;%jPn;46@a+AkkQ`<Z516^DCo3*G&1G#eP8NmV;C-tBKu>o#6/T`$\h8Sn+"";k=ET_$12Sb0njObHjJl"RDcYH5Fnr"o=0*Rf''9/%QOojEhKD-;]Wanc&Gf;i6]iS^[\P-MZ\>rsBFgj#?=MMYT/%*Q'+foOgYT)$9Q/!-)ZI/\a>+Jo?2:?d1j8QE"X9?pa@7BK%@"[a%dEj:'d5d<JgTTj)P5n<thn;-@5?D7R)QdFq\A,Ne26[[(,7,.C')7I-PJh5j'LPks@5Jd)'<<@-U#WV'o:4Te^E*$PlGR$X@ce6:%eSc_2(,X_u]lS=9jO\j;,>DNQ4p3o)c68p*A'J4[_:rn;ej[5F,V0I6=743PM?Hb"6WhRelM""Lbqeo`Q^Cp^H>J"TF`/JG]?*3I%B_'B1IiWdW4ldn?S*@IXFR>s'nkebD&a8"S9i!1sgDWj&[dlE1eNp"%"h8ohU,ceF]s@3J1A%@Ig\(c_h4'&"A$W/N%/S>mCqKGa%Qn)t:jc.1C7''N]0d>n<-%AdqO?V_p#c#nA0+G).3bI>#[Xu&12P[a<^3,h4@E?F)<$%j2`PUipd%]]^Egg7<qWd3Tg>78Q`a[?U%ajURYXUr0e)l:l&V+I%23UQpLS@f@4bS_,[Fd<m2p++b$pUg92ofGFRoBpa'PO#M\aJCI%PluB]g5>8YX2Sk#dA].B;mJ;0]P1CX%#I,:kUV:uk]';cMUDMgnd=jHgnEiO[pW\uknd!H6-;%,?0?i8uQF3OUY?]u9,cLF5l=k$dR\!gSa%f]IQ\!9)B=-l3F4Y/,9uBjW%11C'/j[PG\:X4A1&c]H#/M,g5j\&L#d:977kR$1q+abA)DBot)^)s]c?!TM9a?GYc4ahcP$i7DU_:qc9LT32]jB7!j=6gT>\jDOP%_#3=8??B?$`%`r)SY)ED_lK8Z`2o8J7Yt8"g;FWQ,$UM1EM]/ZFmHtg&%YAEEpqYR(!$-$T&I,=jY/^%c?AQ&cdf]=7E-<`B4#)n%4qjQ^=2+-CO/(.^";>@PRQKAh_juT,)f6oc\TEF!qiGVNhf;CO];M3m@0@BQ[KhOaE9f.XR`T?&B-W(S8rf_B=b.]KfR:rBAE)5.%.3WenN'+),it,5%H-T)A-RVQUHAL=]LZG:^(Wk"JU$\d8S.'sA:h--!nEs%Z5$U,SRYEE*Oq`dI7+@G*5h@_hQi#R1P6!rHX\:e5%GNEb@E-C:onk_TF91-Tu#SbUhGk1!!+87bi@-=:aW'fF1_@:%'nW%b'c,i3ER5]<Z2Lp72r*)u9#4:EQdiN@l"N&=,+KW<1A@u^f%D&jV_(jdqD0^JFn/fiS+\6FX)/!b_`jCN7E>lFE%#YB?Q!.b3d8TB9Bm"+-1;b`iG9S,MtK8)>#niI@K#@k[B']G%s!M^(;Y!Wef%Qpac*%RpJ.F<R8)?$\O2SI$b_=0Z-acfuc1&@ZlnP)`bZ`i@--]4m*Y=C#XnR`nl>ksN'5D&%LJ'#9pdg7WDn1o9Q;5=XjV?^('P%KIsLq+'OH9ZumuZd6LenRmVZc[#]c:k]u-'!T,3hQ.&3tdlWnYF9%%^hO8n,)t^!_!<#9<`AZRI-Q);[@;(%eF7Eg-3l5FfORC:)%J'9t'`M.A<rXHfr:!L<-H1sA#-6j`toD/Rmhq)^-O0+9DNE6.b<07)GFNci'$G`$3D/pNKZ/TFd?,`r.1$"bRq#')Q-^#->A#tMs%3&C:o%->;HZT$Ru8`39%m[<57%`#.rKG+fhQM!O+,1jF".4&5gf*VUd8%&jd;[6WZ<jtL>pGG,n-fX84TI<P&B.2ar5M%L@RY+&@%SD9jL77^84R"IgHI+_T%K7!(t^t]`SkZA^A"UT^!Z[5;U1e">pcJ&"GSLiJ/IK+>.Mrk_c^i3npBUA<nHc9rq?'iioN&&%>@J'r;%7^c&C%CX*_cCca^LX&)@mTXG%XJ-$jp6ohs=3up;!VTdS>e*V*K.k?Ak&`AaH3A[P1Q-cX@UsK9G;Z_9rQ07JfK8]Zl?=QhRFslW%/I1fR(<./Nh3"1_)Z3PX!b^XI&/^;"-TJj2mL.(KkIA+aNiNI'fS!*dYH]dT`@e6eiUnc$]gYL7^@>;bgPcYT=?ZhSDTDZF6Nes]%o[.e4[*1'4YaJuRA^j&ho'E.(p#I8Ja&22L(B<4m72lVI)TAkMr-Ke>Tnk@l5bk%I=@b#;IIW,_AMgcRKs2jc@>omYQEe+V;f,#+%mVeW86=[)RDk8_m@CZ.8Lor,Wl)7%8\6!uH/7>dAj&$$MFK%u(^]JZ"!1keEQ1^%bGhQ?%`4D)(/P3%?l\t$S?pFBh4[iWWia[VE%CDSMi^R`YFP&husRN.uIf`n=L_m"7K3\7h]P?eEjf7Csfc"6(,qgAFp^6d\NPQ<f]RYdAK^:`Vu6+=Ll&ZBXFcsgaVM,nNpfJ'NB%qarD14P=R_^tOsEad2>'T"nT9N,g]8Z2#/L"RJt8F<VHM.'KkZ8*A;jA1\!r3"0=r\-"qdZWX$cbJHU*j0JrXERfd9h"n?U#$iW4%T,]o\%(`^&Tdb'H]JJcmlui"A3q!J<YAD$HEp1.lkcEHhe*#)'B@)>Vo?!]tcChLT$Vm6[kFFmTMTdH'c9$Xgn*ZQ1%\7f(SGb:"%*'3Ns3cc!QQ5hsS$p)WTo?X,:DFers0^CfGgR`cMh(sV>h\2.5(?mtf;>iCjDnSUBj@boR^);.GT!%kT#Rqj>7<1G[A1tLj)W0eZ%qbFJSj><H>1VV=S/RU>94?sIs]#Nn6/28r1fRrkCS.!VLd]^Cg(:n?;a.FXObX\9ZQj64C.<?%@SM4b1R'!nnR(B\:DpMr#<"j'O%+ar6b1WWL+5&54Mn#0_Od:B>(]'fEt)rG0blV>OC!eYTBR5JGIPMMaqD="SShdj3q[XqV`,nc0W\up<nl8oFU:jP#%)>>K]B&/&m%k,c17l\^[<S!,pE4pJAsou.m=/InXLDohJX_m'E2?'@r08hnlepk#@sqTnP?VmU?)5@tFsq$.Dij'e,5Y#>DLF=UC!3VUI@V^sO7%=2?a)m!e0c:/$hkkPaUr_#*Je]<45Sc$QUPTTsk=g@fLK^kF$E=5#))O,.i6"0XXhT_?P^qsAs,+HN_lrN(RH$1dk=F(3pi_32^:%!NUA+UKPUZLO3XU,f$LVb)?s[n<p[X,Vf%iOGTCT/D@HDZNbj^F_mi%E-l!aa/5@l]^PYC0PXnL2/_Z@05%a0D?()tj-odg_3-aL%hEBXs%PW_G"e"_:Km#U+HS3X#i(CJ:/$jbV1b?[MMg>#2['Y`bbc,V][a=flM#3^_4iP[\n,&$\I>Q@Kp9)7d4]fHq*+#5[T(aI*%oV\5_o-:fd_/%Ka8+-7c`KH0'cWhQ\l-l1KCb[hJU7RN\Jt.JDER0G]C4WA^0gnnbB\5ZGa'@^_N!A[PhJ%/6+WmG1b/qAT@oWPu%@2DH<r%d;;8[@G&6TWsi&K)+BdZ]Z"?5[q&+u4VZdfUl7H&uQdG/k)>0X*uVd`_I#c^ZUY6tV3;>b$5/g-L7FN5!<p1Mu=qbS$&C%Si+;)Y0P=]6U\rHh%;aYD=WLA6agD%HeJqGk-c2O8=_@tDj#p89:R(,j1!K$?uca?%3J-)KC+gMNlD^V$YKkHqo47JbPf>(j<X.u%ZJIYIJkS!l'^fp(5on1<e';+^L`@ZLD(@O?-99iUdQ\/IFhp"bbdMZ1/R-RTYAUYZN/fu!%tj<%o?OBm`]2:<@K-c\34[?5+]W,K%%^o@J@:!-FD-KN^U>@u;a?UR4ID4l,o&7Z=(n\&-bkZ5,4F_2<HoU:pd.>P<Rq[Xmi-[MV*NF2'LVl#qjrW`Q&*N^U:tPYse)nR$%G=0d>^\R$03BVL"JB^(r0#1Bek)^*dC)?K-^,bAo3R#HIQ?==51@5.6/RM3F<hR6T,&NAXG5!S@m"l_:,r&]_^RRI#*fNq2SWLR)%]QOJa?Ju&I[`S+deEHlKL,3V*4b5@PDg't>mr-T+4Tf0erQ\U(p[!VE96lW9k+.<<l%Jot5L,['F305!)2;aIkUE_dpR^DSa'?5b%jl(B?FAeSeNoW?YDKsp.bL:tr*3X5sD"`bFbg6gD:f&O0nQ@dRNr+.6o@('O[oieelQ^$>Sq^h]2>4CHi%T&,@DOg.=5%FVD9>D_%Sju98_tP-,;A$//AY_M;cQONu?-LS=,IP71PjjD?/0bnGRE9?8o#1Yn<Q(4Ba6D'K)6(Fo")XVB47DLQ*Q7!3WKV3TJg]gtU5?-m%=GZf17'O1eQ3ueia6&ft#QC+ZNZK^7;l%:@[EEqriF[sO##9lACgK,=.\,lD7*k.J,o+][W\F0H34JZb_"eid5D,=)g[gUl&tc6E%,URj^]\O[AS_F7s+Q896O1h/K(a+>;^oS%jT>?;.*EXC=4PA_G2&j6!9EeV:n^tDQ=ajj83]!'%aiu`,!c!B;3pJC]BG$mnEb_,>%3`FW@+-7qah7j9ESU=EfVM:p^7=Em9hR\f_fMJAK8f_/09?KOpg54E6[X'TH*dud+73u$Yo$)gBjAr`+-/oTtE3C^^I-$IVG._>1%`I`a`]TPgLh3P3]:X.iK9+'<pTmV@UQL&eTRWSf^o<B>SG5,0V(SpsA*3/u$QL*at@Fn;e,DBX8?'3!tg@&pi=>=TGSLrO^1s;;K%>#W6+;:@R(Ha4S1OP+g#YfjsI1@,e<HI<NW,9Lfp\fc^up`c,9l,>7-mFa#CD4,T<\pLl-B-83VO"YP%3i]e84nfNVn_o``;Imft%PtTfaWlsIS"n\:-Rb_Xo.i#!f]$/gLOoAfCah4\i_uLA/L#0%C%%W4;gPjr#2.fF\%KgJ!CX9]_Q<Us+Mo;'D=kAJ*!#qG[V=n`Y%SuONgTjQZ;&g,kLj\Ae.B0WBi4qE)83k(=6SBd7<I&>%[-co("Kc>C&g!n]:]hjCPH&fCW?_?L)E^'Bsk&cEL.t927^'3;mlV!E0%=Ta5/*agLpj]Q?IT-"l^^\%GqQg_<;2:qqOIZ`L/Zg"?H_b?@jk;3]'U2]_HVK9nVF+-<s/D5,?0gUTo11N55;_Hl7R?&"4A%V09%T/rIe-5LrGopi>PS3Zm6+_9SK3i>PtYRu/DCc\J:)UheKVeeDl>WUW^a;hMMSDl*NkJGIgS'EJ6DTlGMPtgH3S?"Y^dlHO<=nds%%,Fctmd)N1Pf5*JqP3bt&SirRgWVo/GM;6P[flU!VkI;IGVJNh`:qgQL:Q\B7mT[smRr0F,9q>!;%LSf(2XbInBdGZ?2P&;*.l@!:%3[Xne[sG41FA;g&F3g_)=tLWH"$^ibSPq/3IJ,^K2P!eCQuutN*nbX1\TIQ8AbKq$-Xg+PbF2'^?%>VO3FpT!jjJFEa#EkuE$m-7%GQMP??gQUh`<_hR[U><2_q?$G&t]50$fYI9qn+s;P!$F9WQqR9oIba;anK=MMj!@'ZKI)5#B25GWIQf^&enTWSt1]V-Rk-+#^!Z5%7/Gt4'%u*G+!@1>W19A9;Ku=]%ll()H`n`Zb;pkg=F9HU=GI$7D:Tbj3R]D=IaHmR3GZp\gf^7j(!Itrr0TQi$ZckeI5pFFG93/W%_%Pu64VQUtJ$O7Eh2Da_N0(ti9l:8Vb[$<dika]rrO><24V#%2P,hRU3p)Ib^.kmDfJP.ChRSRu3Uo5ZF0>@pF3CoB.@^Q6IeDTm%KNK`mB?oW'*sUGWJb2mu46i>,kAsmZ^O@5=qt]E:8E[VZ2\[[Xd!ZQtd&]&8$pU(QA;@=]5J&6I3FN<MaROYPduN`ZkPT-E\+Le5%=%c;.TRqSN<,I)rTka2S%93eG)p2f'o4]RckOZfCN6T!LJt]\<%QkGn%*ir^Sn44@iQU!X0bg,EG0:Tnhq<^7q'Xa>SA9#<XOSCi%D!F%*PqDH%3quVS!EaV,Ob`,fo)g[!d*?UZf]=U*:M%ctaoLV<H8lMpXi9WgW6mL"+\b-VES!A'QP6pt*[g'om0#cn/*E5'H.?t1%A=01]&&&)c1ut;)\?Rrm4&I&K9(>l]eJQSBq4')#=H,J<GZq9:k9NfI&<ErGGUG7?\AAWff@j=N_s4^LAkKjV37A1X7Xh3*)0]#%%_m'mCVE_P9Oq[7G]Q&>=h)mG7V>-QUb4Fj]JPXFX94!e9)0Za8jnNNXZ+QkT#>Is@_O]"uYDMcdQN%886(_m%RoJO5fVNH:E1afJ%:TUZO55XEXL4Uf(ee_[66O!Q<TpEpC3@*0>HokoK:\pS3!b]qpQI@W6&=ba+ecHPsdE-_fjq#N2\T$]525Y"Q\u%2f:R'c)d%gKh%<RI/c\jJEhR5qE]3qpnt_(lcb+@$RgZYGtF=[t4(1o@O:Y[Gq';nKP7gi$f]N+M:>2hAiq6'@V,<SQ;WqKXA4H3R)Qda&UK2dAnJ%=71fg,0,dUUaC_k0a2S+bK4mr@gH2Z8Y<75TOW64l58N/(R+!kQ>SlkT@Dfob^/i5G1V[,T4q0L'cS>Oq\bAl#*8kM@rQH,+(f?h%L@=,RkLkHn+8>Ok^dDG$XCm$@G3esW.9kB0=,s?/H^U,r]^CH6VO8lE<S_(.,Xq028%9!sUc\DG6Fs4r7<+C'3%1,VNH2Ro3eV@?%[6>UU,&JiU>'.l0%bkR0IIEC2(Q(Iug:bNmG@uV.ZRT,KiSkf9'=T7"m)N:?F.m6Taju+spY<O"U>/GQ,%]hnd[:cs:kY@VB$M$q%,CT)Ck&*>#6>FaX;[8$O^_FDb+*<j[q5A2@jSg`#>uT5%d0o9-KSLh-"h_Cn0qC=;9>e*,Y%QkghCJ3$_c^HQp>!F>`J#hjQ)aE&%F@3&f+f4A9jc7Z)>Qr>NNph0tOQQ6fLDS[,SmeFl&U=\,9oT/N9hW>SN4$B@\II/2g0SQPqk4o6@O?7jb%\b(Q$71.BucK/mBO!i%4QF@KVpWe*gLQg:?-[VNfh*p]r\:U]q-LA0.rYM5,jm*Qha'gX)%[iW9sbYT/[5WKfUTBNh+OmiX/n&.!0O)+<VmQ=!);Wu1<[?f%g"%X6">K_:-`>9_o@ot<m=PkD:Hb1f::mu*RUjU=+%]M`FQbB/KcYW.(60bhV#n6KM'qXC*rE=%KV%_IYuYq2m#<T'h^2%[ANFIE%"Z'4UQ(Z<e*\gdpgpjmW26I"_5Gr=nVofu[Gn=a%ZcC+X.W]iP,AM:t-0kl0CHZ6>ftM[;1674;64RDMHnjM]$NP8*V%k7>B%o05%b4Y+(Zh;;;2pXcAbUYW@f,Qe93&k;"=E`LV7og:T*+*=jerfjIY+.h%=CPUWb2=X7=>g`WqEK,=mZ4m'`1+@[KB$L!A@\E6R43\#%ae%kF3A=W\iZ'I5kKOX!V'M&`^T;<%Y0T*6i/O3t)V_/H6RnbZhE.TTg7EBISdIGUqcWJ@<k#6_kGAYh8_^a>'<kF9\uaSm*l*.6%s.)Pe^?>@rB9Ja^`7"7A=N2*.=M""3GA-W8BsI_kjoF+ZFAJ#A(1?E!T;piS_DgjA:_"VTrq'?Dp@`RN!As1?SK\Hg4,7<^?#7Y7%5b"d`c7m<5_7I&$/19]pM+sHCBPA*?*5Jg!.p$`7Eh].>N]]`GTK>`r=G^n.P0c#)Q-FZEpe\\]:1Tjj:d42Z=oYTkq4+/do08Jc%s$X;@*6Le6aK+opPO"oiGU7@8'C_kYPg:cc2uc8@4O6NhgS'!\c``kt:d.NO!Jmaf*aFL^\I=]@luK,`4IuuckPEFLPA>'^L77L7%5:^OC`24u,gH(qlk8b:XaK_3!>X+]Yg.q=1p=W:9F8`bH6EW-7$.&9cBd)kC5IY8m9mWsL+AJI'>X.\J+f<?29]u6UaQ/f-\UGff%b:T6bO"W;\lfZOHq"^3(Sa5HeWo$c'J2j(bkKT+[%b8\IolFprn#)UMENYr.N\d#76!L0!2#YKQq8hXic#g+\pHXL8H00(KTD,=6%'0^uiois`MWNODsk_[XYF4rK_SE`')H$j\SGn5A,T/RJ>qK"XJc[.ss[%huFF8``bB,ra*V`NGUGsR.Ul=W2L@Hqq4`j`dP:\CL[%Pbq2OdE_FV2J+,efJW',IZE_N\dLf98[G&TkIoj.RZTZ0\UKkBXg(h'`h%6/jgfis!i.3Lc$HObB4&7R9qKD9Ibq-C':d*%_c&\!%kOHfgpY^G!hrNH1cKG%L0+khb[[lbi5As>hjLiffY+PHfIe1ZRo@olLMTk6g5O\8Wq_!J7ch6lneSg36pa4XhiH64!bR`1M:\C4#%H$m>Ikl=Lt(dHVjP,%eg(1t!rrPk!P/>r@/)+-3Ol_geMj/ILVA>N#gk.'^/K]i2W\N(2XBYH]tF8b6`pZd72?a.2p=jQciT`dIs%ICaLu-JNV'E3A*jamf/+I[9Sfc)XGMk<+$\lK@]%Z\d!#F0T5D)_a1-9mNn6pI;'cR*q5^qRNHCAc*eh4Qi[T%G!%B51a_YH0)Er%qH46YfVs>+llJ!UlfYA^Tn#F8^N9@d*CG6$EQ3(u]G"b6&UCg+rObr!F7@5I3nM^$#pMRW4O3U-lGLhhY+N*JmAKf+B%KdsY+PIH%i02+tpfp&P_*R[W@&YnA2EXqp*[Hqh@=6+NmC?-Zjnr2;N;KL!/mcM=mEXQ-n#^;^2ER3rS6K'5<\3&jg+eAqY[Q)n"MndR1^,@A%%X-TN&4&e<6M*H">$+S&*[T:cr%]j'*N1GH&/WpSe[*bOUp-#r50Aac5!Jbo:\@3MeNG4F?e`+u^0=jp+3#'aq)l'0qns;:CY)3W%jJuLcXstOloh^=F<PP/[Y@dI@q"8\*EN%CXq;[7Dn#IA]5CBM[S@.(;];_RQeamZ0qYXTYa$+FJT-p2Ypr6N&ITIMhO]lj,<R],!%M`mo'MD33q)mR"ij!pX]+%<ZRQTJ42qiS%WW]Pp`KsetWUBRfBdZ/6&1.=ZEG.&:ai`]r;Q[6]rm`G!SWj[*%e^;G2l<lJhr!JB9%BUP1@hj*t;me@ilA-&UA0pO9J=WP-s/4$I%;&g%.eh/qsFF,^+mUWRPDi%[-is81rNo4[:qqP=VD)P>i\6MLPZ<HVc`s^M>LN+\J%$)aPbjRV"sjQ:PE\'Zfs:2@HHX"UmZX\=3*Ll^lDTr=A#.dKEDjV+U^>TPH=qs+W)lOdhd,]K?MU#e\Mp8>4,qn,>NQIm[s'3`&V%A?][)5%ZhA#cf,E3'Alm\Lr;;'iW"-.A"kuVFhS@YDB>%*>IB`094"7roH,2cYi-kq;q3[q=.j,%s,mYDW;J[XmrF6p?m&;^.%'[%+u5=VHi*\Vjf,I%MNh?<'FToLXYdc+o1\H3CRoh/CF5EJrHfR)pgr(iYn"1hJ@X5-9(-";-8AV;gQtt2A;Efg1GSe@8Z^Q357;K/%'0inhr#8oi@Q:CoU6<=Ld`\,L0Cj2NrfDDP._Z]XWXC;Nqp8#MK'C#52qH23b)od(#4*<fh7@-dqQ6Rh`r">VIY0B2=C9qbTJqm@%QrA1;\ldRf`Gsj5KG<<l8iH<GlR"U'r;m)Q;VI4o4_>gFWPe/o<=XIu"SV.[7#-1+-UhA=/3KchCu$q^/0e___YGlu8Q)M'QN>AL%K-)&Y2YKo8:CV.#m[hDH'IIrQa&>L9Y;Eh;Ohc1O(gkY/Efm/"R+QG>iS(\1-'=6O'fVM\A[=uQP=Z04SmdZ*?8]oe+Jt[eKd&<<%A5!QfeC%_\I^u0CgR"=<;0ZnH8T0LBeJ:I`9n.*M3O.&6%`H9Nl^.XD]eA9(X#ShI!o:aZ6K1EPpV&m8(n&>s"9QEEJRE"k(^FuA%A<utNn(PO&Wr"?R83V**+U]%_%!$&W:NrG2m\fc=^!,U$pO?qDrpS,"Kp`l%]aZ7^n&!oC`n*.l@J_"UTDA?4UTY++7%AYbq)@39%YabA?n(b$0R0Od#pbKeDYM[<T?V`[P`S>l0W]Q8_p\>VJm-cUbDRo.Me!nVVDr(FHG-(\c?%)b(m>nK;HgP"NmbbC]5C9rODa/TD%GKdFl^oClKRIt[K/0-P'rJc:&gW/bh4*^IC5&5$uhtd2VQ,h*8QeomT+$V@b&7#F*MdPhsFBX.;B>`9^6b!%bLW8Hj/9$IFqX"<4%H`^TA[l&'WlV$$WPP]7G?fRDl_X+r7V;m]36iF3:qfK\o8iMjTf7Y5`m2'3`q`Ok[*76uup#\1`9e^\gHs7Jor==@N2uia724PGK%k>.Im#g;cd=5,2(LF./-k4m4[T5p80d.u.;O'[>,J_p;Wme'>GGN,`c[_Mk,qL(]/ceb]mn:tpg`ln1BFg5)Fh+<<'oS6dZ9([QS%I"pZkZQ;gO*-gfle,%>pE<NH#RIB*F1N-8qCs:%]S?K[*jnnd&89fK*%SZD(os[_SY/MJ@g]+kJqH[^#ME1a02FDll`o7QUmsY1"%65&O.JQ73qg3h\f3go]qgNRUIHuTF.p!m;Bqs4<Qm-]8X+2U8@?uZI!o:'WR0B^g?Mr55/`@'Tt^RE?,hi"uZ0@<)c5iGb>[pQ*r%s1;1.5J;L\0A3fcE.;cgTDm=_N]2(c/?ZY_mjgJY.0)eUhLGO3l]g2V`"a)!D9FKSoh<Z7=4m30X++NOYN$FCk*,`sFmnGcCJV.I%?Re,'^NZSTCAmc2J*j(ZJ,\G3@U8`e@^1]WfucDMr3[%#^#fg=q+Ch]\4(T?;`C1+>@0tM/"?%2]fK5@j83F%gpM#50Un[M;p*5u%gc5)7h1BRW/YI$-lhNK3[@=Bs[U\pM:$B%$^AH5LQg,@Qr;Et4/U6l;[t&b*I-k_J=7X4&W"GQDqsRhiUtpW`r\K!$^L&S^6'7N0%T%Qh0qSL2@Z_-M0R-2',#J6UVH5%INd$c_*oAH7&rDfq@lju<dU`fpN0],ZrL+#caf,8%;JG6g,kK8B=PkQq4,5tbl5-@&(I[j<.%,tBQ)]Qa7uegdre*?2AEOt/5(%^cO#CZQpPWoLXqW=O(*&=<6@H%^8]/)-ECEn0aBW$2"B3UVR2eE>$S&48J;&p%Vg;<Q"DqK#aY%U>sCk?g$>(r96f#`%f2q2\q24n`:V-^=7-KX_$9!*EO;g%uk*6fj>Ylj\,9oNA'b.<Ht+ZJ*q?tHsEnTrS2l<4u\SDN`joo!@Jt6%m+<JAi3Au'I_!d7j!=Wpd$(ZnZ/m-T4>pplI3'?<N2(W6jW"Vg/^@h@NVqL;Dg_H.3X9`qh>@7S(/DU#NBD;1Y&mo/F:O3fns'5g%hskdOF(N6$.rOEXhStiK7R$h0=u`s:2tE6=2_qF^HiMp6<_^\Shf4).rYKX`d9]BPI&j8]+5FQaBQB_0rSW+qBtB1:GC&ksK6N2V%>HBJB]ftOjM;''n.WoHOXf/:I4*N@.TDlHX&AaF#=7S<LnCR\+V>TOlrTfr>J-nNpWdgSM3WuFdLQ0#p;mk2:s/;!%%We3'47R@c%$_Di`l[.g^X1_m-r-A2,jqlcVh(R!!?[qbCjqft[Fhb/1Id=iCjqjZSp(uVkbnHWFiS.EpC4G\9gtqDrUA)nShOK1gYL)h//_^[W%kPos*^\C.e?gZacHB%q#q7C5!NAiQ0>n3>Hl3D-!"?5b^a+tTkJAap)2Ug)E5._#2hkVq#hk0/:?h(@%b0.?hq)>aiPgSXnl#2&\%;[&fk;c4P&bdrf0^A4)`l,AF][r,I*q:f95I.64#?[_FQpYC=G?AG7JIsCj_9;*_FQ>'Z$[WrS"rUJo)-5`?!jc@kTF8GBYGQ58K%Y8]Fh^\q>IloV]L`Z#Ajri9sT]):d[T,PW#Nb]HAdq>M(T<UOhZ`;(?^:I?Jr8):en',`VVOtTMNOSc<^$j0,q'N(hfC&%Yk,8*:%LT%EHV_<;5/bVc`?Z0;P#,@g);9_noFe!U#r:TNbGNs!n\o6j#GJF"B21)f7pqHe#J&Mi7`ikC?NjMM$DjfUpnX!XQ3o2WG>+I=a%2KcZDMQ>+:"P_GrQDo1jXg1\"^NVSFb^/P%amoD6II[6_hYq0b%j*o]1>1H-CZF.ARp(=7jSmU=p@n:[[J0"GNMjD7+7D?QS@gkm%G5]VORl?PGZ+'W&rn`=CaF>:9)7`rH]Ge0RT$TLDh-7Cuhn/DGrpZhHrq+1a4#_UbGM_T;_>"eWCd34b?G.ut?sJ-CVn]ogq&`u,%f/A,+8AG$#LZrSUT>13`CR^sQ^@BpCqUFHS=Qpc;qgj/KfbD.1O2(\Kf(U7KNW6HPrX(IJ4)a#g^A7+;+2@\E5'SH'oXB<G5C!%4%]Cl1&[pLX<ZH<Y3QG6uAmOTIEW%8=fnt-HV;Pk3,p\&Bl\%[3]-NEPhY?fl9Goc5J)#nmI[B8cgF'A6D^3f8<_aj1.[e8^RhnF8V%GFEN*^9MVoWP-2n'?a9tRa3uaG5hF7gEMi2IJZdITtbgK/t^QrQ%`GAW`&Rg/#"+kiYn!d*o["d9"k8sl`fJu[+ScPgJb?08(71J%Sr!*NpDnIWG=gZ+FQq'4(N3XEh1Ta'28=B[ZZjLgVgn]Yo>.g.MuPp>mbR"AZee]p+?Y%,otU=?GH^]mZL@YIrS\";Ab-pZi)b$K%HoPn:a:CL63-27RS*Rtq$t!QDoD8(GX*iOLoD8'J>A`@"+t&8HHp4$c$h:E=h`d^JI\C^+B_p&'r:P4NQK7.!JMH<XT;S"pa3m\2%P?7W_qjl'1oimgHhqItqndjJ>L(?Ipmnrp[lEMVL>51\4@#NuASR_]F(Y;]I\+.K5&\h4,WVl&K2n,u?op</%hu5?Zo'H4fY!;`+%\P_8]jpFE9l8@;/rNLF3fp9=cn%[b,Zd%@G=V/Ka0;djVI/hq?Qci/dYMUi(-uJdHHrH]bfm@)\O'o</6`fphS,?35[J(a;E_2Q0%b!1;3"]X(Fee/qo[V5$nQc`)e..u&Ll.q@"E@p\Wl%*V8^t4RjqR66!0=YKJr(gf90/^eoS&ZU,FMct/=Zg<[n@XG'oOFD\TB!$K%kdA[YJ,e,XA*2*qa%YH:3a^'AKB7+roUi9C'*%("qOsJ[!@m!CSa%i,CPS6q1>G$/QA`ZBn=BR[E\kSHbc]GZi4efippA:QhgOlV%p$Ldmfjs2r?d?'7[h#A_gAU!mRoe:l6=BTeO&s<u&VL#APK*>rs+=[+<NuYboDT%pAX/p61Z_E4UM'0KNO=.SXh1"aT_V81J+"&h%Aq-QPDWpio(\hV)]CI%Fg(a[kI!`P!"9J'[/*HseSDX,RN[Pt&?GLCk+hm1$SVrDOpB=llf=.ruhKimRX`3p"K?O3:2BTZJ0Z;N/%5QC]\Sk&'D^14cjR;&k>rm'CcD#@.+Y:TID2VpE<rIYX;k_;o\YPW)C6eoESq=SoeLR3<q8^+acCVfK.rGUTIZ@@/c)bk[,@hWha%S$bO?;s@W$2(d>X*8IrL0/bA#pMb$5q^24qL?j"KeHJt=HbXDY7gL(Fs#Iq4`'p(qqgp`_(ubgHkK`4RToP47D@d#WXn@.%^#EdF%$bk<'pR3[ApKZO+NAiJ.Isq@/AeV%GF.9tA]T.2l?28P[$i[m=^ScKed%q]Y]EQ6qlZ`S[^7]Vmp+$TJf*44QNq3Q`^=:n+\FF>0%oEA8VG)4<L6OXf>Z(9.)onSnVi9De;i:f!++tdeoS3p?rY'/ne_(qlXMKRguHgEMjSR`3V2+a@'WV#]_<6+3B6Yp'M+Pk)[p?%X"%2blEPa\S;Kbp.r[aq:+sV<X']3Q0\m(5J7eGb+1Xk;.CKgO/T\9SEL.QD,B=2hW6VQ(;Hiln8iWRN]P?3q57UrPMF>k<=+W9(t@<%K(s_eO[]/XX+PZ`\5cfREp@JREU46@-fjl7diOR0PPApG)5QB!V'4>[QdIm;2Vo:[%("M)R)]tT@:(R&+1\jF-+0?-YlB`mEs%fK%;l@6iL[Kg5&14_CLP6]#S<U"sF;7:sh8mXM%5S.BXGZ`9DIfMso&[_.=R@@+s4r<:IqCQR4p8K2YDY^!009<KI*5t1p<*r^DJXam%6.dhP"IhAr71f19%`.9`Gps$rAVXYp]B)?jp<*r^Id'/S.mpO"hH1MGrN\ep&T59%K`/2DYkdZ>"_#.o"P_/[!..^YXkGa'HW=^\%i`(h7Z<)2"._]7ba^0+t[8rQ6CnSK,i;^Ksn^b]!E$F+ds2k5R")6eT2i.%dhVn'=pjg-VhVNm?:M)]'mHniU8blH8^\D`k'5c19%GY`hZT[)tB>WVZUJ[mn2OVW!3g@bE^)\7-'+$P+YZiAe@9os7B3rA4)NQIZRqSBWfQY7H*/q&uJQf5.-&,cUU.t1sH#Y4lW7f2lK%UF5^"Xe!AIrJ1-=+7:0!6*KbGmjrm%pW&&MmdKU-.A&>YCH%k*G/)"G%Y&i6=+5M\a2>f-DdL'Lb:gV(J$IJ#q[]joSF\ULXr4RR%J,b;+KAW7?mejZhjPWh#-eH).msjn9I^#Gg*^+F2"9%.PHL-I651t3d5?d5S5Q&A=3o*M,;\oY>mbsA%%X*&fmCi>ehYmOMDTF#g%T/kr>eee>Pq>MUfh=l,sm600US/be_;giNP>J@j6r$CC0BE!pn)6gQ%VtV8sUHe(Wj5jo[NHa.kC87$)7]4_n[sRa[=1hl=n>ihV%k$:XkSj)&hh>;a=^GgSHGBiMp^M^EngeuVuL\HSm7=B!3%;DGZ20K.nd%!MJ&")t)Z^opcK51pEn92J&JJHqe4`SKrnakUu%sK,_%*DD6F67^^_TC/"VX`52bcb(/IYe.ZZF857f^"oTI+$Y0o:q0nm97;#Dj*pahO*b&:O5liS5'qa7QTe]-gY8d@4FWV>jkc3/n,;@'%2c%/4II,s#]X0>1I<bKn5<_2S^YJ`S(:<]>e*525RTuaT[t!(U:B,e96B$<d=1`nT);UP'p3+96"I+DDn)#,dRtkk?X,=RQ[Xd5M%=&0k]]'Y2VH2mZcc?%tC1D`FubuD5e*5-^beMO.:1]=E,=E5WZ]Ogg9el*%t>\>.=)W?W6-TX1dfssKii_>g*Ut+,Bq>&_"ru89j%jgh]ek?'QL<;PK5ZHugnD^3m5gFKQ&QgjQq*Ou3cT(rRA9'>^:[pZ7q2L,0.cb0B=o)'PnCLP#d]QoreH<DYIk4.<WViSu=[t-p@%m_AMNc,\/%mN:lapQ.e7>e3&.rU4_[,3]pJ8RN>;9F.!s0Hjgj^k@4E!>AtYKQ/JIGV"D?&1A\u6D/us$%W]j,m6i!ZqHd6iNWOS%Jq+..'*9K`9F.!s0Hjh5'UX\*)Z^W)"T]8<-3R!JQk1qp?p_ZI3&%%k(GLDG&25886GS8)#lt\@-3R#$";=to*4uX\-3R!JQk1qp%?p_Y^J;KCr_Irr`fED9h![\%D#ac/W+^dXP`)n]:M4qQi(BdF-4LIBK,[b'bR)j^pPr7\JJdK"\NE'#W]e'[gd5m#]$f55mFE)>=%&9K)Zie!p5nU'aX>S)!#VM\m1KpX@.<$A+G!>>M]7Y1psILk9=!>>M]"AB)g&25886GUNA0OY,Y?l(F$Qk7$Q0jm?G*ocqXd"V6X%"C2;E3$GkpjAFcf$\C"L<,i>X&6":M.`>:0?p_ZI-nmreM1>oh"T]8<-3R!JQk1qp?p_ZI=>1oo*kVj^-3R!JQk1qp?p_Y^J;J8R%_C/"Ei*?mJ+^dXPKRa@0'*9K`9T0)f>1,KW(G5u\OGM+j^k>*d8jm9H/gMW>d"S-N';>lVpY]>e+Qu-c'uusT0ia%/6;/*q-3R#$%"VVN2ah&['6GS8)#lt\@-3R!JQl$2X,U/FriIZRdnTu5X-H,?rIZFtELu1SHKqO?fTaN)o&)N!JJhFu@E=BDi;h^Sg`)Imf6GUNA%0HklUh?<on![\%D#ac/W+^dXP`(2Rj-$b`!6,8/(#lt\@-3R!JQk1r+&kk8V*p$Z=0Hjgj^k@4E!>>M]"AFaX'4RBf>nA\5?p_Y^%J-c5i![\%DN!'f#//,Z(![\%D#ac/W+^dXPKReoa?p_.ZGS_t<R#kS#A&*cYMFt$bLFsiR<7$>lM\Dfm8akSC\01!%9GPU@$SbY;%WBs8n![\%DN!0kmer"Z;^k@4E!>>M]"AB)g&25gS9LqPun%o5/'B8aG##'j16i7uG\e)W3TF4%%-US\968Ws(/dT$";oLKT6;/,'%WXr*_J-c5iA&3hOB_!b]Qk1qp?p_Y^J-c5i![bp=$&Qaa>nA\5?p_Y^J-c5i![\%DN!0k-Oib3X?p_Y^J-c5i![\%D#acG:-6se!%G<s#tJ-c5i![\%D#ac/W0bR/J$,GV-&25886GS8)#lt\@-3R#$!Y`^+!>E*R![\%D#ac/W+^dXPKReoA@)>Gm#Od7p#lt\@-3R!J%Qk1qp?t([SODGE`KaRr/Ul*\W?p^kq8JS99>t>\\5o5,*:5CMJ]n:OfJtNK+<?-WD`)InW$8GNdQk1r+(/.8F#Od7p#lt\@-3R!J%Qk1qp?t(CKYS*)?]5U'OK_R]j!>FJe&AL_j0#[3%kX*Y8$.4J%4a7bq#eCRG`A-RC9GM$:&6":5#lt]L_1_SHGS^KV#ac/W+^dXP%KRa@0'-k>HQfM$#"T]8<-3R!JQk1qp?p_ZI=>1o?UV$s9-3R!JQk1qp?p_Y^J;KCr6CO.*>nA\5?p_Y^J-c5i![\%DN!0l(RG_?^%0Hjgj^k@4E!>>M]"AFaX'9^VV]5U'OK]J"3""#9p<,tDhF<S2hJh@13S.JssH3`oU"[Nr6W]12gLoE^7'k40S0Hjh5,aa[rj^f52%9F.!s0Hjgj^k@4E!>AtZKLBAA/mJrA+b#J^^kDJG`:)*I$h8QL\e&t'6?F@oR_0"E"C6h_iYZb\V@#%XLoE_VKReoa?p[1:Go$TW%#ac/W+^dXPKRa@0'4\k36tGj@#ac/W+^dXPKRa@0'*9LMJr(`bRCin/-3R!JQk1qp?p_Y^J;LO=66\11(BdD;Qk1qp?p_Y^J-c5i%A&(L`fj/hRJP?\(+](LuKKoip&cs?^8rSE96(e?t_?GK'OsbPaP`S")aV4'GL#e't[Ld7p&o;!@&Ssb&E'^^^Qmn'3(1O-P1PM2F%"A/ra(^VM,j+0o9-m;DRTS,Q:JJ&#1"A4W(&j]Yl&]H(&PRo5d:dUh.5RDuS![YiO$)b+oY/2LkPRo5d:dUh.5RDuS![YiO$'V4_%(N4mj$%W]j,m6gGPRo5d:gsitY[448%jeFd![RtA#a>lK+](LuKKtAk:dQJMi4p[E&1A^TTuTD)aUXU&cjj8NG,SdV_%nE9(1O/V%-<q*u+_HUAY_AGn`(V=d$@rfk,t8&6"=GW=fE?a<![RtA#a>lK+](Lu`450\TIr?k^a<:t-m9XmA"\L"4N-:-@12UM#dt:\EAD>R%[C3=H(BdruRGo'"+_D'9;i$i.TS,ReO\eAr-a3mY,m6gGPRo5d:dUh.5`&@S'@@)M^a9>O&1A\u6D/us$%W]j,t=_QO@F]XT`d8>%TS,Q:JJ&#1"A/ra&1B99LfKb`'A*G=&cs?^8dLXm-m;DRTYsAL+XnGa"G%0e,m6gGPRo5d:dUhn3%0ob%66?*Jj9Xa%Qt"g89UqB%LN_<:Z9ne"#du]1[LeK)2W96q$SbR"K.Y#8+_D'9;[AU!-nu?,LrTUe+AbCtKKoip&cs?^8dLXu#:6*TLLLoL#a>m]a"^CW4<EMP%kcfbc49Sjo[Q#/5OE=?9_?Iak@\u*h>DS\6bS4N`&1A\u@N:X%&t"MM&1A\u6D/us$%W]j,m6i!JJ'S]Hf:Y$2F4!h5RDuS![RtA%#a>lK0a:8F&E8D!'%d><&cs?^8dLXm-m;DRTZ!d`?eXfR%jeFd![RtA#a>lK+](LuKKtAk%DQrU(EQ1V'*Lo5PRo5d:dUh.5RDuS%A"\MK-;/Y5mt-&r!>>M]"AB)g&2588@T9^fEDccMRikNoTS,Q:JJ&#1"A/ra)!0aJ=^2s!"G%0e,m6gGPRo5d:dUhn-n+&f==(0X%(Bd?$!R,&HKG;4d!gk":O91f$/Hf:J"C&C#"^B>#>S(]pAr:*&KpX=-9He!TJJ&#17R;kR"Yb38"A/ra&1A\u6D/us$%W`L4<?u'%LLLo"8dLXm-m;DRTS,Q:JJ-u_*(js[@hSu;#a>lK+](LuKKoip&u2+Qc!lsR-4#hI-m;DRTS,Q:JJ&#17WnLS62HUO'*Lo5PRo5d%:dUh.5RDuS"+eDh]cR`E!"Oo_0)YZGH*gl'dMhEKs$:`h3qp7HE-`AchTiso`<8Y4q&^C^D64HdgDgO74FD2Lkq?89DRf,fF1h'@%='PFcR=i.p]'_.Ds2Vg.%t6W'_>9W%c?L#08Rm9V?,SB,miVORJk`2iTCF!#Yk)P!ZgH\kVnY@H?gEC2*]`8W52,gLDgr1Wh0m"5%hf60F",qNc$Nlph5!42.dC"!*mQ]NU%eR%!r5ljoK/&k"35QR%JkKinZ:gr0@aqfpHhJ8Ic$Gh+dUV^Yh,-,fmb-K?C22A"FOn\6%s.2E&4D)Ro\MIR`3qZTY/T9gghSG77F>o2b@eH<Vo+sUQ>/p]9524b=GW8=,k8lj'@'dlLTAKGuC%d<X+78Ia4P=#\@'T@b3El*.%k7?h1&W9tCnBBKXs/`JA_I93?4oa;?07"Z7^@uaLrndYNK"^[/))(e]JcAksft1$%4^A;tc96=$9E'MB)89XO_!<V_pWVdA=*.@#%AnqIf*:Nq*E:9,$CMnRGs/O1R)[+WtZT_1K#G70'pd)r:5f)u'o`Qm0B/P,QFUTmG5MY+h;<SZ,6[s"R7Xt6$IeYRYI[R^fViu&u%UF,_lHM`U0*VIoOXXDMbBf*q-*cDmlVKBn2(8iXZ0UWN45,Yb6R[tFm%FK8S;bt_5U'];%6"VXeRr/)-nKM3'5$b2FKY6$]Wp0u2%5(<;P!KV_Qh?*$cJR,0Q[^6'1gWV`fK<cq7[kqrfV]S6I*kUR>7D0dVZ`k"CN2MBjW=H;GAJ:6gL"NBVeuZ7cMrP9(KW)q/6H^0*%gIuD7*Nsu0'X'>`/1/dPdaT5&H)3oM`,*g*;B(5JQ,[OH%]aeP(PqNn<B3i\:0:Mb-5Ut#9B-Ial*Hqu+).QpKMh[V&*I6rF2Vds%qF%C1*t1.r<^$*_*7$;(0T7Ym?_,"t&/jejCUL@)Bi<AQo0ufqF?,)mQT=rcQTeWsdMA$=9NrKS[ddlV?[C[(iQHqa34\aDVh\Uj%DBc<0s(2,>E8;?!IfRK`^YHJA=,5dIUq'1amloF*3;iL)oUk<V#=p*Ah=D:De`j5r=lF\u9'=Qmo=-Hr?PidiI]nhdiiH\t/&Xjo%_Z7kX[VAo@E<F"mg&N(\r`-U2?5\T!\#d($em9e,YMZucTD[X+,Jm#nDVsdSTAJ>7Hi7Q2@"*CrgS;Hoh);H]CI\Zq;&fQ7YC!n-%n_p>3VdK;Nj-Mc#Yd-%Cann=#Yd`BM8A?kYRnjM(TiBm^Z#dErQbNLKSS'I=fZn+.Jc;39++HV`FXcfD([*g]#7Q?B!@T?Vjot4J%,IRWko@fQ5nSGKGnKc"#L`dqX"OVgl3j7ag7Sf5VHr_n[[g$/pE\>PGgu*loVCib,?o/_hR5#"kLWCj-GDp#tWgK&H3X4SOb8<'"%Au7K^aL&q6epn,uBJ%)e(Q0kpJ%4E4&MC-r0;:',=<T;Q(nP(MZ;mZ[719)Gd=OUOBYb4<mX*kd39nq?;.SSE*Epdmhd040@'d2/%>7;4R<I&N+CoXJc-7%p@-^Up\/o7!"G`Dd#,HPT;[3g&s7[n<LpNG_=J*4qi%o;pAccPGEp..1j9!F_@RVWQY8sml!RE)*u_bWr^%!Ai."Ed8)Bd%NB+hY,:J(\B/[F)IIoP&q,>i_S@e#d*Xc'F]I:XAc"sb<hdIQ!r;h\Y!W;M&+oHqqRQY/?jOn`P@0XO[PFq*7=+0%qdSkp)K*&jb9*EXT>#<+(8@qKikj2)C[)t:J;$Bk[$ilG?u`\6p>?3bH<I[>$TfE#Y0k_*I5.E,/OGe^"NG:h'+1ifGc[HT]IU3K%PPSo,(?MH^O>bQ'LDp`R]jN&#6nMBaV!<4qH6?+IP,W83F\YU;8r(QUhN4Bd?RDU"?NsUK!p$c1jPjjjOa9"(Zn>U/Z+0B!8*]M!%%=:ar"V]auHkkq@KOKBW)-\i\=J5*-&u`G6%b0<KRIr[iQ148U-NmAlH3%nKRgZaT.93T>+;E$c=ODYY#Vcrkf(:[m^WX(4(5Eh=%'nUZ2j\Tig!qDN,3-G?aC&,Pl8Urn#a9ND6=(P$VX,5NX(7.+fA^'(=n7N"8'p_<n""T0@:tY>4Y_##,XKY%(@$Oq/YX2S+0g*3%%A?/0?$Pr)3Jd$MX_1E\Feal::\u0/jZ\0&u8t456l-73)gT"=%!9:KK)3npgF(s.Ie*Lcl?;Io9`MT!!+U''D.3U0>ULI,Y,aFsE%6$Z[eo13'L;&?+PqdRlT(i?33bBc8(S9<h94o0;QbJ>JC.i+<i*D(30Gg^hW9^?N2dVsj5+?4MT-9[f.c?QUVNn.H/HB%mSHNNO[%.OpMs'#@=WMgUM6;TY1Md?)>?[lE%0=7*qJ,&jJLkrDMH64eo"XY9oj8l$@5Ti;9tVGq[6(:Hn3=16&`a)%/rDsZn5UC@Ck`0F*-%;Rl9K5e8sMKAMc5_0!.3?Q^so=:*)RPd(suNlC5E/2=^rmhjlNRR*"]O+CAq=<R`95%[ol14hRgm7`Aq-hu_$Kg3T.cmNC]+/?_I%@Vb"n)f;N:cN\_!+HePV@\(Uu8l&5_^o??<!X:u&9*4@Gc_kHGU`m_P3tR/@Pq/s=mlF1Y?PQ=A*,I<,+I,L-;Rl9KOFf[@+MD@N%69O+fI"AdU@3lh1;8uWG3Yj1.ZU>/s>U+rrQ96,Rmr$5T`"dqR2R>k9=i-fG[j@(_i984_X!J;*d&1[$/!,`Y#N9&9R@`OW0WUS9%F(Lro_NO"JJe=Q&AP!57pVS2F99=61-7&D?mF_`6O[Pt%R*rcq@^Mhk[I$/"CVqV]lq'NrG12tem<qSsqA%9Eej_u\.S5"\RV`1/%!d0.'dmSMudKFFs7<qX$/r&/ZNCZ4i5S.K09.FHV&\IYr'r-NA)PsQeC"KbB@+n;'C9?Nl@i[<T/B%NG5WQ)h9'Sr`X@%^f!AWbZ%3\WNeOVAa07>iJXBXU%Y@,%OtRrPQo,8J@4<iM:`_6lZ=fs<!])<DdKX!%Y-D6_KV3o-<g?VQ^O<RK'W``lp^7pH-L?3@0]8ir()%a`N:,)Mhu-`s6[mIYe6)<L'4YD*qG-d/k=1n.>HSaq>JF>@Rsa",,XK:cUuTEQqXm1E`N.VG/3P=="d<,9;pO$2r4qSSQZ+9[oYd%=_]M2dVrtQ@AH6nhs"Ao-N2jp1/l=o]'C>3NV)^FQf(2bp5\m0@U2;SWp&n8=&!CK]J\7oZ3UP?B@])Ln9P`]EtUdda>44T2aPE)%`?PK':OT7n&l<u3-I*?GYs`gfNAc.fBr!j%_-??+)AVSr/HQ2,g.d9NED2g72GJ_Vb1X"u'=">B5.jQo`Eud891nl,.,R7'^HYD*%!fX1)(3(=q>(N6W%WJNN%V_TFh@G8eX,F/24A.miq*5Va9sa!R?7!RFL"oYe+J&n^kSc$hOtKn\S>]]<=`4lcDc2e*]KG%YIN)S$%"G\:o7AcG_K5Jn?Y>C,ZP1qrjm$*$GArS>i?dE$[]r$$/PH.4Br+KlI@-kE=;%Y)'\3Ce!A'="TI-QfN1QmEZDA!Ej;(4@]"^R1?%;_*6O`AkC^g_q[[SR"Ro9@<h@mg480rkTBrh\p0,qhOc7kXl/#XlADq'-F7bKKaoa,!o[p]/@DJ9h6Om7a2LA*,?JU0b/?.bIt8>%hXG(uQ"TXH$`?SW+_K[o04bS9ntcr_F]Ctql0aCb0,tq`(k=KRj;]9-2ACtR1u9.SDCk]PCoW3`K>cU.H>1g9W`\EGPUl`%gA[?4%`_!Tj;Nu1e)pVW*;LR[t>@Rg]_&#h.Sn7&ZHT+A5L"9Jf5A%X"QlSQkLR8TT4GG.2dOdb20s+U+Z'Q(#OZ7>0:$AZ$$4aCqPCqe\%-5[FZ9-kbD5f`A;6.)!Y?#0q%#sM>t/n.OWRrHd9%ZO68&Ih0f8L+B2oHc4:.nG6Ql(G\siB2rZmW=6H)&A"k_CUHjQBe46YnY0_%'+fbO1#WBJ+fbV8&@=st&V\t%1S,^a,H9Xh.bJ(=+!<58498B;JN:[,L,*j=q+P;+[+PZ>J:pbr1h'\#T1C5[U'j\Z(=Z5E@1'U)%4NYr*D:YK0Flj@1<?9j>_EO-5[Spigg[.[=dVK$$+4AW$gqq-MGt(H&=\EL2dYup5G%m;O#D6kPqX!fqE+qMgN2>j:(tE*V(J5g#%NGC3o+@qO<"kW\pn!-Wm3kQe*@kGOeH_nghd]QdmhQ*=l^$B?d9='=G])aiNI;_dKYeK(ui4UbkAj%&@765&RU`J:/X%G0cVpH!`%gPIhQfg[*T-l_&AkSZmoVAlriFRrWZc!"#WNb7'iWCqRppoVsPq#,(e!ZQ6Tcn%?EXK4;u8,MSYl"II$T!%@CHSbh,V.m_qJ2lUL%[1k;ZB`]&gEeu^?dHJFL88&8&&UJRB8i)0eZJEg5-.0>`J.t/0cQuT")7f]m2kq\IX<k8)BuY!+]<k4H8Ea`#Mu^_R(Su]fE5E,L%L<t^q\P^ilJ"Tk9&>*>FS#M[rjio">/@^^p2[dXM^!@QWTF;<Lg([YT3^R1AQY<]HNDr"uOgftl]Erj&@Zk=1/S2P^BM4cP1a\:t%3YH8laes%;QI&??M)9!>bt=FEgU/[%d;TuJ^E;_dbi]SH9OJqGTC=1KJ9<>c,_FCAQq?"+8(7*_"2b7qn6J*0=pjtZ=;)'KVTnro%RN6-5[A23o,8H2[NFiML@Cr(D9:B_Eqbg6D>>jH_i7*bA&_\ZcO_-2E>tQnl]@s)e>2rnK[=&[07plkAddo&hXWce#FX5[6dV'WH%]MPtf5,pFm`@5Ra$J#U?:G6:A2!^>rMmZ@ulGt$tlj1S*IX+<5DJ.TuBGcBCG28:fNeR5>EB?cST1.20,B`<cL2N?hYWlp9Og-5F%3m53\Z2[Fh"U13Dp6Eub5R=IgP`D$V]!XAZhB"52ApmR`GKnM%p,6:8HR[2bHZ-lMBS5-=Zpu9H^8IE^4%_T07FJ7^FXq0\DATpp%7r,c'nKic1X>ok9C3P&\)*2.b(SaX>B^W+D+3GIWU]m2C*T>(hAT+]'qm@`p2KG\BI.(!USPPG^,Y9E.&[q+)kaZU'+.$ZI4q.N5%HI@aH.(RjbCVIP0Cq$`e8ULN8A5bu"c6Vek*Okom4.dhIX@K;VBZ=nU]!Oh?@$K',,\u:KYbjlf.XM5SZHeIU^*fS0\'=E81aJiH%d8KDb\tsN.YXFrQ8QC`'Tc6R=^V2(gbp7W;$H&lA4h4=dfoeZt5W_RgTSoUK8*U5a)7gR0`B>.;-ES1l^A=W,MR-V47N23FB&mtO%l54>-_fb1$RC/l*e?2:'4*]KkQL@c1cdchb>GBC=1n&=O@FC/GEDm(2g!$.dCj0r;Bt+s>$7ke@K]8kMm#Bk!\p5mTApmjhU1X%8%eP#eIL:mM7qOoVt?NeWdR'l$l'ADNK;b&#lEu\iAqj??6cI"><F$Nu'nQbWO!W"IuApkRkh$N@S*??Pk:-ff3:8&tMG;F)M1mC::%IdT?h&;=G.mZ$%"\lgW4Af\!X:E@)Po$UjH+h4;tM%_6-dDb*-nTG0U^nKs-ec`lJjfuiS88NXF\@$l10L\NfoVOkY<:50(dk.P5%$Z9gspl4ZU.'0R5($V6poR\<e[Ys$+fM6:KfVuhbh)Ar;bde0="!T!%9B1,%?^A"=`m="j@0hG=L?ij"Ls-p5bNMP(+(B@P'kj(b%_a]o?'[B&h5cm4PH0G;8N]p^\3]Rj*d.rh<>ne0BFbF)#<,A#42B8E4/e$f';J+n5=d\:>GX9Fn'leMU=>,kuku4Q+bLt.$2\L4)%CY5Q.5omnkUb1h&e98t8Let#U$IM?LPI$Gk5R_O)<!?+br<?(b]I^q<#Vk#nq@jqVa]Zf[MZh?,JrifrdL)fq)-BR(>]IqPaiEd8%@]Sb-p'?ZeYgodRa$HUD!d@n&MsXi%n6/)-J>-&ZT5I$b&X]$_erM\?!mbQ$1+Z=\2R+J<*.W0O)g>`3Lkfc30^D9S3_:uT5GHu_%V+i!4->IepH*%#o,(H%*J'u\hD)grJYf'Z\36[S(1h35Wk#ar2290^r?IMh6$-WO'?)U7cO!2$3BM?A/OWQqI"JQhD%1[SVJ7T(Z%f'Y8RL'=062I)&WRlVH,G<=$@0gV#c?saPR>;RW=()+k?JE@*[o,\As>r[UK,U.>6,".binV\']PCce`aD((nbgfWUs8QQCbT+"o%V3/.:Eb4BdJ1ouG)!rYD5j"Hb;oDJo9Y_18rY1aRB"kK?+cQcmKo-`k@0YE(W3W-l)6]g^7B;Mf"q,&jJV7cqW,c5hj>n3`0OMP9%@jNO6aBcgA9?J1i)%6P.jf[CPVSkLRN[-KbGa4p1E`FT]-HI&I$1:$Bka4rG9#Ed:^+$/k/-n3E?m!u'!?>-.[jta/2HGSGQVW@n%20"R:+!/MNTrC%F&rs2EDgFLW[+3(%n=pCBYI)6+e=UVrc.X>@L(lK@+@u]82j+['bY%=.cSS+F-)AMqQB*Ojfi#6^Ps2=d22BX*%a%DgCDg4,<=@X:U_sr+San@0!0F1/P:$48jKXoHJ!s5r)@1,24d"rsNOj:>WRN$.(-&f3SniRb%TK-%`aMQCpdOf-S7YSDVNk5^#%2Z`/tbO/LYld8AM%;C:$iUr\[S)mG'gPiU`EPW-?9W(]*qiO2Z&XNhC,:I@0RgY&h&ZP4Ze/6LElPH"t*50*LhAS'<"Mnh#ZgY\/%CU5W+A?9i0&2@:?1c`MN1G^8')MQ><i#5,2<aH:u2URI6XKXP:)OiFL("PU)9FV+7%[fJV\L^d@0QYT=k'1^h;Sni3;4`GF;XgtD%$O,gYKZ9HE5Mkm@X3iPXkS7_SP6Ol>OU7OC[GXlZi0q$>EpV6Ji]&5*7C($FB'YshCTn(=cckZ"k$DK,)<k:([V7B>P8`jr)K(Pb%NoY;R7mMTj:"'6mHX*EU*u`An^7JF4"[T)JAKQ#88X.:Ed""o).u%8<#pWqhGTJP[_TL3&9N_F2CSoH6(T:qLLA2A0&b9[C"23L*%1uhJ$RicR.24R[#7%BEnW$,`^c3j[Z--$UnG.iRu;irfOpU6Zsd8udBhGi5,BPVG#R5op0WfdUW+>1)g_T6),?sH[?aIFO[RV-7G%BcfBI(/^-!<a^7;o<ECe?5daA6[*V`k4$h)AU&K<$M?Nd<_fPN9I"(I?9#)+"Hqb"0rY@O-DSbT_a6+_*,G%)mJ+k9m0%I)S#BJN%LjtFWKTFW'\dE+^H1V/rA!ffG+lKqC&.<B9;&+tnbk%cYih?0"dq2:[JWCDSiTQ51O"52YTb0YEWgqb5b;GGK@<67-kG#aa0Fi:E%EujMtR:a7A7-Z]9L7!Y9e*,)pT1]k=pumQV&>[N)-B#5DXeI@'=,8bdE\KPdMQghVZf5M@]8!rpJ&cMI@qajUQEu\7!Z.2:Gcbs(%ZnB4_,/";@m($A=9*5-].>\/bYu?D%!6__ee$=km+p]+/YV^U8ZsgUgfM?Bn$@<mm36cJjA!r(\MM,abZ:#'l@G_*V6bR)nC^,ba%ZX(d@"")K!9=,ScMQ/pTLCS4];]=HpfFkG$@,^4L)?*\0.HX5!UB&@rH."=oSYS3R8pVC)EdM#61W"i48<j.K!0@n-.r21ENA@#\%AiI7e"<H7bAL13gWWnhBE0Vmn[pEaTGkg?tK3`esDmgUi[Cc1oE,U6lf-(?W@ip3Z-CsQgQmlI0OE<V42Z.a(D<OSbr=M_%XU&r1%-KXK6j^UB8!)AF4BnSbfR59,O@]dZRaW"BDBgq!2^q&JR+e`n>"?H](rq^.;m7+Qfqe)m%J0H\:\5bEU]]BQENEYWrKAFmdCt7Zi%K9c_ZZRK$V@@H00kts9`.[?t)7G=h5dr5cFrQpOa4.ci('ImP'2q(AKZ,G=>'LZn\k%unl9B[_07%3d>FWp.^m95j"BoPbrZq4j-%`-\-s"EJM!Z8X**)5_j6VP+a6![1Fmd5:6`G"*:+]Q/E%l*dj/(bF*I4dm]_%$eLF>_h=rCM-HMgV&GEdYsBs\L)7lPU`NAH36*j%hNX=>ZTbLoV&?jMmF"2#nN+^7kr`\T/t=jAe]ABsmT>+hd*,`(;.Wo[5G1?(Uq,!:k>9d'31$?_OQ*E9R)L7`eg#000ti`20Z%aj%XjDNB6eLhhfT8_^7!:V8O24#J<U(%K;7[&cd:Rf1Z]\qiDQujH2#Q2+Z%WrcnYakIX>YqT<g\>D[8F(`:2O\Nb%(`d)i!.CZiSCo%Zrs#%6_E,\g[OEM%fO3.B!2*JC;e/Vp<a8L`k+PoDAQF2;7aR.-/,FrCBCQ+dC[3ZV>XTX*K@J]TqSo(8O4f@(i,@XSO]MBfAR_=%gsM5JWe)hnP9P#o3sqHg'8K.4dUmor.Xa5/dBV/rOlT(qLR,7%c*aB6SO:PqZFqWF.42$3oT%AECPat8e!_"/UN`bFg93BjdHEC7%_j\G7E7!gWbOmFn3\dd?EZaeM8G<;PR#^Q1,S(k3Wa0=$$sh98H7QK<rp1a@V,=6>4h,eSU+)@\[&nm48BK;V&fn>]ps0qr!ahNE%(m$OCoB6aUQj,Vhls\70CL'#dO[P=(G%F*HP5?f$Ju6&eOt,@n["cEI`4\0DEMEbo48\?R_TS]iGeq#\3l=stFd+FTP3tP_r:'a[%m]WHlocH7sbC06bao-A6g,sGr$iOMsdD8]H\8ni=4PDeXGe!0^HV^3Ce\Gm9Hj]2\m*>S4Z^/h$#L7Rna9jhnh(`[sor-1Y\Q"">%9;O]uOpWtrh!Kegh-]WAm[sFsFck%I2=!!crd+$SrtTdJBGhY>9C"-MGE=+hmc.rn9ERpTnj<hQh7O!GD<F*3`ln#?/.\)cH9m/U%M*I(:G#2:[Acl``"AHVeV2eFl$F)Y.?(c4X7VToN/%)8sI>Q@uREHEi5Kn-+%$^2AfGeKECeTGAOWCHUQ@j<K;(0L,1&4,cpacmd%#*"kYbjf#da?o\B4mUa-B1a0\cuMkHZsd]J.5qQ+B#NkKD)+:ZZ&IW[Kfs(.SOK:bNC#H/d3qDX&<0"5$IL7iUC`FEPaaR+DSSE=%PUTd)Zp<FQ,7M;i<?NpuXpY)Wr!tbFP#(9Y_`c`He7eWRA$)9rR,."sn\?G&:tCAZL`o]Y@rSiDgd0VMT\s4eW&1(YkFqK[k]l+\%5]D8Zp<#HrYMb:th!Z4_hU0g_rX9La8BNhb#O&dcB/DH=h4(0sW4o98K;@S!WlEj#^l^jGIj#"S:Lce4I,[=sMNU!<o;K`A>a,;F%V\7>Y`[!0Z@!SM&91:6DiM&!=(=8Sf,-i(4?o6"`G`Skp!Td.c6h,SXY(Otlr!80N`.1`<8:!.u'Gui]$]#j,SDP5?E=PVaM+jG&%9Y@/_K7Fi`8C=."8Djb,A8Z#cK1/e(N1rh`-&SOlO\8r[Pb\CfFJNUuP]PMiRhH$-Ts>&?.:@;p_*^OG=<2C+89&341rp$eP*P6g%RV^%b05$6q*#Rb$.IH8l-[Amek8I6>%PtadC0lU`"RUc%l-,.D*6Ug137f0l-9)uX34F"W);#7\SRZAC#KbobT']E5"iVW.)9h$[%0@]Url8A)0K?'5=c4INC2VR:K`nhq4'X9GXf#Tr)KH@u7]emdgEcG'#R`NH:PRE[Rjt%ZdR;03/5Q^qA*$&:XQ:@Ru;Nm#V,-JV=%VGD.PA33Ma8rWgCm_FP9=HUmIY)d38=!9le/'$V:k[U%=fSH6.,W%QT0=Tt.>fIuW0;?H9P(\pn:2#I$3bcS7p&1SP"C+YH#i&i$%`CdZ0aK8@*Q8?)q/ngWZ4S@[0p!-cteCg&o3Qi*WLR*2Ck6mlU"(`egZFWV^c:^2g[H.ZgPX7brqT<k92+9T):<M]jmC%kdB;G(`%-9DHF-R7W$#&bng5mJrTS#)DO3o4iK6'MaBqE[ArEL_sBf?kd62PTeT/qqE0^k;58,2_1KkW&-EE<`_b-Bs]s"'q[^PGQr5'N3(3%6-U_BTnBHnpUS/!6KMQJ1mhGk0c1QNb>TL3^e.82=8dY<;S/!5Lj/!BI(jp8j?t@#m&R,$Kf!pCr^(Td[Se6c#o0I\!LdiRL'kmG%.(QW7b19&SDaCm_[&*W72Cj6\UG.;D."n@bZ?-,,9RV!df-:29a/L_I-dH)K^;>Fn\D$F\*DlDdE3T\;dk..=L\RW^/U.4sT(s;&%k;fnn>d2Zj0iU0tM[iP1f>b(D:6*ZXe'i!;ZQ9t6plmaHeBll[nm(<j6G58STMaaJqdEK7Gf),K$sFJ3P4>+-846@=:8R.bEb:jM%[;$haF55G>-jZP?g`i;BAqGJ'O_`(W;Bu*PHmW$-e-4>N79r`co:cDQ,o!C8MN2`ZFX[VpP"(_uIQcm^Oc6J\Q8t;STUJb.7>g7U%4k+@]_GN2X?JY5Gi'7]`Vh[c_E1B;![C'89;5)Kf=RC\hSsMGRN'T=*/kb7u&^A?8YarUo*_btlNaCY+9+]Kh4=PG)4^9<APsj:f%#&t!?IMabd7RIs`*_6$Q:XYRV&-H;ON.MC4&0@tr>RF=S;r%5@j,c!b^i^Mk0bV$RLri!&i5PL%Y>QIfSPrl`k7rR=g.W^uCEn)[%U,VLM%SEY2-'VSg;27`(K%:9N!Su^RG"r*.R4<eo,u]#-[)(_f/f\;iGi@22B&JaqeFAR=Kc6Q#,q;bTT3DsR%tJF4TR+>4$25]G%Ku+ks=4LP"EI"cG(3"qUn=g'pW'V5`4j%k&]F#D0o%@`dWUMQu[omM;k*CQ__8[HR[nokSc8DbQA)\TDi7.IihgTq4l0`U`f"kn[%ao0>JH\[B`g4O=YrV4FHLBi0%kQ?/:592q9p?f=J/(3P(R=%P'3k>'2kJ83fq"&u_f`$9.oAlh6ZR6:7J_kag5'skj\FmbW7ofE;%^thZ0T!@^Gf1H=IZiBFlZ\N$k?(O-=/,j\PMLTJEr!0dVg2j7M9hP).i'YX^g+t3Pk_uO<\H'GAMZ28V>gH98*pO]2kW3F'lo>g+%Tq[q;E&aYG)3dj>W=;e,ZrrG*;CUNblTMk;eic+!ejm$@l^<ncM$u7BAeS6@1X=7#6?Po&,:,+i.CF5\p0OZ99jh.S'A>oT]gl.c%g*[,D_$M#I)U#O(gR=`mgJU(=WMI%kHrIqM:e!uaY(lK%3c%E.IL@WB'Ha^.%c2ld2.'#aoN"Tl-6``$o)0I[S<iCPMQ7k[-c)=R%_=:j*;QiTs5DV&'!*r%ZSm=d#`Z'lWdZKXU'u_EGIH6V%F<*.@=4EWuk&dHjn8'DQa.+Ync$4"XV`5?C3EKn\3Ep$Obc0mpfns)\%BPN7h^P486H,[2$&dQ*_XoQ%be31?oe-n7*GGPJCn88b?hrsZM,4rbq3>daA@XU.(G9ap!p4pf?5&kLK=F*nSC,6=SVO,S3;gM]M%U34ebU,Cu5_:Rkq!?li=C4&1?2LI8Mh;U)nb-<todE^_-\!ON7`NCF+_4+X5_-L3Y4PSU:]gAd&5IA1?B+P]Tg8nW4Gm*e<'^Vi'%B2T[O;pobNnINGdbFLDQ$66QgOs(Qu<D9IHqdYLE[A[8UMhjEiZ7*Y^-n#uLnKmC7$J@o]hh_d[>n8KaBfbmb\?k-jl36#_;J)hq%e0m@$!ceVZT,0XlkI-S)[M'r3T_;C"[1Q@`"W,!"fp+HbhF@A4C+YH#9pV\7fSL:$&Ns"soP?J+EfuT0=lm66.I`']%V8'.$3Wk>%`D-Zo$5&9*Tr(==G'$)A@3!6=!6aJ7X+Ep3m_iQ:P:h/?3i:@q_SqF`E,9EL>l?KuInfQEp*dq;BQ8a_?qBlV8'I&OD^;?(.oZ-N%SY*0L[*+2N>gk\T-VKY,@jBO')<0nD36Kd[Nl\-CXml4FG\V^8e'_i[s8!@$g\\c<DMSB,C4PGmgi!n_8lKaN_]]3.B(#OpH#h#C%L=?5`D3--I20U#38?54X^r5V8i*/Xr<K2)]<0B^JqE#Y<RHi2)W4bjJUIke0Z6gccX1'uLChF5hS\V["Vht"YXM\L`8n+CP@_^!Q%a=%W8d#>o:.BM]Gi'>>5M(B;H-'W-6;iR7FG;bCM4!S5/'N"dq`j0^1,\oPU&u!,F;k2iPEC6Xu:-:SkV7XYP:u!\NTj(b%6FXC6%mG6K8W,#7D[0O'+ifqJ]\`taQs75ReQ^i/NjLi&0khq!j#REIK`RMFtCqme#Yr50$>LSs[N0@Ss[Xd\a[&-ZmHf@K^&f%rU>KeY?%Y(X>5@nV&E:eb!tA:PoXN[3<=dLM(3q_G_cTK<._Gfu1"X'(a:)*`)<@_0>q%YMu,$^*=t8N.Y,_(,531C9:h/8`,nbJLf?W!l>F%QR8Q-[#J*T,g$-H.t&h.BI/X"0VBG,k(4'sJ22h=QcQ/k.B,'\Tb*tD,6pV%3CJSNe4//Z^iE,tFTce/gIO%GWD+[P.ln;M)L&L"%GJiN%S@`t1,0-V;HhjJ//JgC[Kp,rTGq4_,JNQ8U^8&r!1rNXGDWoe<\q8Ep3REBj`qOF6W@+`*kD8hT$Tl/2rXRk(<ZDt*5.Z?q%4ZRHd@QHig:Z%;b>=L;TD?DA&I1Bp4*5$Z?RP$/&`24ThCdW5AUU\jX8$5lZr)<5^n(X,7p=WHQB"[*(If;ZC`?KH)0!()$d/K;j%_F<Tt_4.R(opKlXer2Q?>Y7OYQrBAn/Jf10%=mF]_>)'pCMM:5Zr8!UNTj&=oAg6V*GdFm`[I?-SD/)PaW+F@6>1QdC$o2)'O93u%ER&mrfI=Fiei^Kp<!OAfdc\qs,:n8?^8mW]3X"(*?)^Qpo/k^4[Hd_3[d6fs0@O.u;?K54Nn!5i&]4FdWhW&:*croGBX8`hD9W+e%)7>O.+E^HieXc9!.F6hG"*2#tr"`78Ig])e:35=1hQs7rmB]/i+P#[XfTYUHrInct(\jZO7dr_@jPVU,*=Fr"LXo"j6S0&&ldT/j%PchN18B;SS,YOT6NtnJYaVCU4f^Ot4Fm]n&jB=ZO"hJ7lJm'cZF/CV8M-&.%]X^FG``n'U,sYV#F%lfV(BZ]BTi<-.,U2q>3#7XV%%mMrl<O:5_mb(Ssg[mHDbe=_,/F<8>ZtM:W:DM-.:k0.o)aZHOO5&_TeRp21HZg.+N]3K3[=gIH?a$:ukHW.^I8q2>=L?UjF">qC%c<g>Eql82k";!.s99LTu&bN-(<HC9W25RpoAp:&/Y(UXMUfib3%Y+ffRJ!.V7;EtcW_D[I3HZ]JWorLa82FN+!iF606(6Ngj89t"%TQSQjhLm,,i7+%W\V9fV/U;6M9H1kTh6V_m@D$ks89SQ$W9g@=%=gUj/gI),!R'7aVKgZndFq)ldHY\gmmnnX/9g0F?JY.770.o,%k'7U\?,A^>[\Sp>QV#G0CN-/(9F,:6Vc;\ci%4_48Sa(.&aB+?Wf[CB-Gdj*;P@J%XaP@-XVl$dp(`4VYjY4_WkjHqC(=h?%%76K%Y9SJ4nR:`?([,$kC7ea"CIVN\X2WL9>eQ.iSb,e2pfcNgLX8rfm,h=k[4.=3f\b@^?"[Ohl.76KWm'L7<%cU)eY8D!>,ahS?ehOf%.27h%XJ7Z7>S*;nBF::bUs5CM75$NM<pjeVR#BOO&seYi[$%1%TOo`12:-ul,MX.PkD3;mg#pK')]ksg-2E)r8>M)e:'mU9+u6F-%JE9q9OUub*W5Ik4<iR'm)(dQJ&h7TGI4dd9&HhR?`8X#kaC9.&\tbC865hNr9U*\q6#g`RC_PDGU]jJP$FEMUUlN`n)D"t<gHm7S%PrlRNfVpU<F8Ua>CAN%pPN?M\O]jMd0=ApIZY:ZJ^mRR.(j<&,;HLlGD5gSd]OENMkOR%VI$g4?a?CJ`,-kGR!)1N3iK7o2Qn%,m%cP=i\3hj_;dC:GV_QcqlPogF25caWM1W>Q/2HeG*]_A72;FFZ-bF@S?EsYm!a?<Zt*\],3%!%[ClH^9hgcX3Hdj"qK?f>cuEct1o%r1,OFejJ?7!F^*!k6;.u+3>c9FI]"fN(!^j5(u[/(Qc\['p:/*+Bh\Vi_*Nago/Y:O(I\/##6l?fatH_,K>kmTV/S\kp5@_<6h&r%3=HEQ:ZkK@57lUpHHLV3VARG>VR:eITK-fI/&_;*`c9W&J0Ms:Z^_$VQrp-b)4=#*7DT@@BSZc%,nSiWk)[t*OU>OEN"s;SX=CU`%+:]/mqRDGo_)$2"1<2lg'9tpbE0O"=Y%EZg<XlmNWCG9D<.e!Q(qHt^%`?6d%<4cU6l^M)-PSl2:eUo30)j4b^7#2l`?/2-&44OM%f5Ubd`3@As93\P7Acj_K:f;j@KN*rj;a$eLK[!18i9tF3O[XLABS>(GBbL2]!IuU1p`beg'FRVZ0WZJ&L[kR3pfdF?q(_rI`DZaB%6c4iDH*1#pi;D9X"BN2KeaYehO&)4T/glZO8H:Xs9LI#F;9oFM75C2L+H`l2_B9khrs9,B%As3*TY?PGO`dYk8u`r^'gc:7?&hbq%5poJ;ddW.>OVPI15c<QF/>u:]8e+RQ)mQ.$J4?f<V.m(U)s>O&-aI`LjZ\W8:V7'SQN0.9m#-mqZY&f+Ki<qmMN2!d(Y_#B/[jGY%!>Z$N*9#$_21lI(,Al:5/>kd8QTMZE\[16/WofsO)lid[?]#i41qF^S;[?H[NG+'7:c8YmU4<k?W:-QRW<l2gA`B_06R+19j:es;%ZsV3+RS,FV/1Tm(p:D,<3B^5"@H\1&bd359(6:5I/@q6]@hX'5229D&a3BB9oS+r%$:V*;\epj2\RhM\m"joR1j&P&^5<-gg!&04%@1#`^DuguBjhq?TOqGU^FU3tPNCn#/9CZM`(.<AqnjJ7kN'Df#+sJe?CX=iY-'%NDFL10T5K\^@(tQ+7CB^Z7_aC=knMJLEd\+HE%.<f$`8X23+_.^C^fQrh0mAHoP`8OD4,W2`H]!I8Z=#>IT_/8NIHC3,Ggg8;,IUR2NCC&OK6X1a5O]$Fa],_(50@Go%/p@"d9!0bj%F1A^/Mq(IrVRpLQPFG2-F'jMA<D$TBWVE%EV!Wt>crkL]'`S\fnVSkP`02_[Tti8PP:W/YnHDeG@EpN+3pBS/[$_5:AW$-h6T59C%YQ^e:)0&#Y]f2'"-G`4ag#*eNEi;ftgnt4q8<k>i;n?-CLdEof/27P(>XMuGSVAd1F.1JBKQdjY2L:nH.)"fjj6lFAXosfkU#9\S%i&a=Z$8`[V!t'%bG;eqUK!,8qatPJ-g3Z3_GpC+AWH@T-0KHJ$_Z6Rlgg6Sh)Q7F^-bY]c2$$-A<HQ3%:@Jc5LH^9>SIfop%2U^n%>hkY#8e@kD[&.=p\Q13L"e=PqC+2Ac6omaN!WX,O^+H[H(<6-"P-.I8^W*F9Cu:$3Mkh*74WT^%Z*TJcK6PY)#&EA6&rlTih%SQa%W%%ZNO$IChe<2YQA`>GOr(48\[/+$dZ8MfrHe2,<2c*YCRi?OC8euB[2c</F?\c[*&un4-0^/eYej=BE^940rDKM(WBYCh'Od9%W%48=f*\#uSiqeMbejiKB?oBr[)E02&O(@h3^*p`4;pBU@jTDSC$0@N6S/Y-fq/TXb7oXU$TnM3\f5ace.elh/'HHY),qdlMQ,i(Ft%XgbjQ*n0QVg<qSXauUtRE/Lf:1pM\)TfD/C,<<>/%B_jYHfL"qH"*RqfGkJS(HMoZ?Wi_sP3u8F0XL"5l;?ium;@#&isP/<7Y7WB%Q)4AlL4XcUR8lUi-f,9=[(%ur]lRdBPA<ss4h::Ig:IpJhOrq`UKZ?SdB)/NoNAE+=aP,5,aC;?h'tfeRp/p?P11=AU;"!L+47+e%^O(aaWI<$V9;hKW/,gc:C+k@jMM.mR64rXg#F*XM3hf4s3Bj@f.IX*5&W*;pE#rQ6J`d]@1*$*b=pC.2R`sXa]I%04`,$e>[2t:1%?)7l7m:P;;L-qL&5gU1*Y0Jlo9k&$6g#b%XrJqfD)A('D%F\5?GL83p')PAb-qUCMTMR(ZO5RSBqs.(bjcp8IP^%Q34Rs:T\NhoI%<f&I#5I>H^as02bVuP\t73\#S(r+YV4FbKWU5t6DCG'[uEcHiW*.f'^q&UODljp[9(S<\Q!slm1&KeR/@eZJL?YcY=q*,E5)N_-j%[ljQaJhh0?N%2_tM'P8$@[bK_Nln7VQ^&R2*2T6EIZHmX'"L<8BL3i1RmuhO`%>4""R)dVAl2&aS1O4\[PnOfq2%C19RrG^"q!@Y%8%?ZSND>js;*l^G%c/nn'ur0U%lkBZ^jhi:jn.RMF=`[#9lA?P1O<5&TqQW?\m1u)-'+9B-OFBQSJ[WhV<]F_'I'g#^o%QU1;\&l%*D:&;rI_kul"@31G*'-(*$"-T%]^7H!@Hm!0F=cb9kj$5;qplsNWoS?cWHs.99[^+\%YVK\;k9FTK<9Fl:>:oSM[J3$5o;@,&qo`%h:Po[<&Cmg8hrH]Hh+=Qg;9"FD!Cnli0a5HK\8bOhOKQ"C;XJ-)bgr""59.lC^6Khc8KJ*FG]9N@O?<cBdp[d*.=?=FoPC/2HU2*%M/[F-KT$@ZaL[4j^JC,KU,G=-bT[EW,Z'TQ%#;Dc;hlqpM\Wl6HH`=NF[-%q3["?01b[M33onB],d&WCTmf".YpsHO4Ld\RjK+73%*"saV0$oDWCS#aSN3L^VO["iU+Z#R41RDFGR^SjV=)L"a+[_Zh[5APC[R+kdj5]`5Ig<Y#ks,*,<%^2e'0Z6:\^j%ObJuK^"\BAV%Yf,]!5rY'RFH_95U)^0Y80A-UeJY`trCq:-f6l&52XAam82D&6BV/R!l^f+tX,pG3F;KUl?/e&Ok]tD6LqMkbKuqc.LHDU9K/Eng%X9I3Ll'p>R3)GCmN<0M#19D-GLo\>?R?c_oCai2n/Rl9eT/*QS:YePnV>7j]NB(1^;;@o`:,QQK;MDnT*h[j=;eUoSX]Wm<e)dP!%OK[s6,20M>hkGOWp+>"-B]%t`X-#.P6HNYYc7i;"iS]_=9CR"+GH6M.l8L/_XLB+4Z3^OHD,HVC8(%YP(Eq6URV5=Q"Mm?$R0'tJ%6a(+^]hsO7e3JPdW-HEXIJ4.lG`HekUnN5$,Lb(Q4FtFs+:1-]f`?g*"/MWW&XOh)1uOc[jnts(Me[<Zio4I%o+&1[\^VXn>Lm/?%#s$WQ'rLi(mPI7FEakotXu(>+F0]bPC:+BYN\`AiNOm2g7[F-00\gooHuLe;\BMhLPd0m)m3Aq/f_pQk!6#jTV9R0WPB+Z4RXk#@%:b7e)?sN8_`-cij6_oFD-$'P(-&Aq@_NtY1Ye_Gp)CI9YhP=TpCh^59#*YL^>V<%)Fqq.Rlqg'b;,-TcFD`3<au(l4$dP'^(L(W:%E`P3cB=Z50_+b#eY&As%^1>;'''GptGt#1G%IL)GW6_W@oq!0Rh0JW.S<sm$o'?ZA(en'mcEbKe@NI0$Q8\&Br=q9;Y+kT\*R"fL%>BlZo&JCYoE)XPrJA,La>>T$(D*`Sn's75si%5da'K[H_+QLd7J@4A9UJdj;p#I%>X<[D(gH;ute3,d9rM(=!S;7>F:=$``#PSq)%@rohsZm4/Z4M-L%HZnloN,FW$ij/W@Kbm7_bo!U#i%8[TRZ9;ld9IEB=nh+e;YT8!/NBa6g5EGu`$dC&l3.!eLSKmaF-_8K^*Cl`%&nt6Kq-hj$EYY^'FRU')k(:FsC%0D&*:3gU3`6V_<g)[;m\7sfgSm&8Ug65(m;-e2[PZ_3nj>K:7qlJ]k"$JU2Fl_nZpG)(+-Y8M%Taa7k>0KgD31U*5bi^<RENtCZ<EuWb@MK][q"Z^NXQ@&a+Ah'R*]Ud6iHcQE\@pSSmSTbrPoW]I'M`pO^2beiJ^6$H_uZ]LZnSmi%.DgPDe.<-Yl9h9?=P`Au'o:;9EW"0G-("jn2=4n0j!V(4&>d;Y5[jfSZUtrWb`Y0m8hr9HM1HsO@`e*kAjqZrQ1F(G"=<ZJ(UaVs%s+QHUBoukZ>O(TQXYg8)#s],R,QR)Z"@s?k8p/\i[W'%5kW.Q_7ICbaU+;Oi`Ni;<U<,+PE.M#KfP\-HJeWhj;;N8rbr-ZNP0b@R%"i$lZ>O(it(X!BLOqD0j/9d)J@AY*33J6WMQ6:*129K^C%s%S*g2hO-ar7FL_*PW12GPJN"m.%7WicKU(7N.c)u2,(5R&OZkgD-9%/c=QKAS6#Ue(%#n5.fV`(N@ZnKQ>PX6JmqHf;-[:,?-`:(bhpUL.&f<?u:Z,\qG@0">`E;k%GL<8&NTs!U\MY3k[B%'J,Bn8X7_s%jjjom*i$\q?"nskduIUT\49OCZ--&H-$*(C%]:E=)>#R1_;M$@?\&brZCt\>g4gcn>7nZN1$'CSc;EGiHZ/0.].@@1G`K["*'rFX%FuN5Kc0>4_LnJS62,#`(W.>c'6/H1r;4oY/7)Fbc?i2'jL4[OK6iR<hH=RAAA%(;4S]^9FhNrpdKJ4OEgmbIU$()^kgs#/1:Sn8X%CDUZnUYuc&2BIF4'"S;KO7Bi8H*0X:V^>35(ZQNYBa*+d5mU)o@un&@1i%bhT=aZo'&rjOG?$Z.+lCi2):DTBS_9Rm*O9"1k-tU'%7E0D\^J)9]69/MC_KJqRE"VtamT!=DP#9:>3m$sV[tZ^=3K$-<<^0%2E\ai#YL.'S;<A4H#?T'uK?"G$c_K_r;9armP?,E+%V#G)%4r%hY7(TD_8u?O>[Gdn?/2;br+,5F)(XgQ`%&W,8%+hKG3D5$lb4MSZ$%^GY-i=!'>IJPU1_e>&i5Ca<U?S[%Pc0[h)2XP%Q]t#/%2n!E4Q^?2m!hSMX-7Bdq%1$qU]BYj5=SeA_>[oUP$&S@X9/B\&OcP#K"3Mn</]XGT_K%iHbqEdtk?D%FMG%"t\SYc+.cTXl$kQ2O%3n7.+$0W"aGntg/:t=<@XsPS<-"@1a^)RHX2',JoZHlCOGV/ufUKg"gZnh83ghtQ-C1iLUgW?;3Tm!eA=IR\W)gT`aOE)P8G-?de%h2eG1W\I+u2G*Y<5q[58"1PLQHYttIG<9)kXQ)!goAB\Z-KYppXBiku!7<lHH0jJqd%3%'Z66qa?.k(6Qt1`a\7=-#DH`rI-jMOu%j"M%_@BUp8;1.Vk(MY'kN28fCHKcS)+''MM!lBLZbia(f\i3aQ`tp)X`2HnU\*!5qei<@nf6omJrJ=]VCq.s8Rtm8a2@c/Hkj].X%<)*oG(Chu=O\k(VB]H`U4.nb(/?W.r-85m`Cq0p9O>5LC@)bhgEa^K,gRnlU:5n:Q+22CU#k36<ERRI;eqiaL>/80'&u\O4A:_.M%Y)>2YoG<#fFL7oh_\A=?!/8&aCmQP*A.54qK]-)N9;<"^=5E[./'5>J>+2i".ck+>&6&L7JjTR%Q/1EQ1STNQTd!a/bdir*@kN8i%\?#ku(@5<s+Vp)V"p=bDSO[+\/a+,G=$5*U5^OstY;NoVi[BAChP4lnZ>MXqNN9JF\:NIBQXouTi2CghY/B0[TYaCbf^dJ=I<h8s%S0@&*DMuH'Ai4jce/XjM,+?)1FQbWMn#*Zt7)#cVcOrSR$nRF64/$fbj6B=:'#S:16EG$H!&1o>bT1k&Z%EGt'2)o4m'uPGAmqG2%!"OudSV#AE*&pbQPoksbR@DsdfVarr68k]l[j7Cl6E0`^QD_9J`10'Q/eW5O'!k%LCG9?KFggMl-<LT5J4qd@<t/(CS@REbSb5[@%WOc$N2aILq'%sNOA")BSAb6+W&4%-MdmH57QsqTN:s`$+n[IKs"0sQT[Qo%Qb_uG8&0_V2?_6L#no=YV)^6B%khU2$EFgJ\k`T?>%N<tn"U`maZHY/buNmgWm,.3;FZ`TSR1"0V%ft4+[YH(]4B8[/W%VJcU5<bV"V40>T;3Z=D9&o>N.$TLs!PXaoH`s5ATV,K>XJ-9C%6U`mRCIAFV*4s%p";&nh4ON+3F8d(*MUD%F6jD$k>fR@;atYZ43SGc=(`,`p-oDFd1W!<Oo#oD?7[`8f!/9lo'&18!"C*/m0efq#%6S&UU#"L`n!#D8a,TVcs-)PG:&&dU2PqX69)*eo$ruo1T\/F6EkK'(1RBIb8k7:RL#b3*=b&ddHMTDSs5l8ocGW)a+6Q/<lVhQ=K%X%$)8Nj^GuI2mmZAR'>W'hr1Ij'4pT*@P0r<L(kXLoJhQ7o$o6+UBm$0fEc\;'c^eK<[,HaqqI(WaK4\>-n.Z&h(a@35ipYJ^`OL%Qoho%QDV?Mr1$"$-1^X7lgZ#;!19VA0L-?6A#:\U9H;jqUp"`7@P1?4&5.Ye_fo5)@H/s1^_9DS-(M2!%oC@[)G1:DkhTKW$$@3i%>p:tYo4=Y<YmdCH%7f0Ie0Y6-M8E82+_oem@<nTbA`gY5GS?K*F^O_HCPANMZrTogB3&'C*4.=)fc9hrfG&BV'Z^10OgNAQ<t/`-%+%+N:mR&BL!HA0pST5^&>_7JtF:mV3JuRE^%8!U[Z=>?$!bI3]F-ic>M1q74B-lOs\13N=]cB+u*L+KRV/;(`iob]14k@L$Y/DB6%;E(854lA*EYWuTZ>lL]>k]3Zm9#qZ$46*"-=Bt?;%N)?t9t+SJU:sKpC2%nD&G>YW(9/Ot,42;mF$H@8!]"M3nBC5"DU$UB]p=8Q%*h:rNSn"c7"9A:!Xd^(u:`E"eKG(3fp/d.%\IsJu>maFVkhBFT%=-JlUd.=?<#=B3&XD3G(4n&Jls6\]j9][,VUTAMb7bs=[sqpi%]iS3skfsks3n6mpUgOj;</$IB$,^7RQV,(/DeiMfM+Fa1j[sDge@#^DpO#338Ec6+"Q<gC$)Pd5L97&4.S'][fCnO==%m$3M)^!b%QO(MY$,hA6Ui_#)`@sXuPN%I==o6-s8a1.?A:e6Z>;:cnQ&2!!<A*UIq-TH5Ua%pamdBF+G^B+'s7u(Yd\1d-PtQn\Te$-&FXXAi%;j]+[-uG!E8TRd4U;bQSP`Mm#mfbnh6#"fBe0g4g,77:F.WC&#SXM$Jj<JC8AjprS?_<tV>`)!Klqg)A5Nb2II0;^Mqh!aF8%9Io%ctI<KN+Nc1cIkUgbD*rB66dPFZ&tT>bMs&7M\i-,<u2D=i,iVUK/=QSK'(eKR'!-/o*SGgs7Jpbd<2n&kSg+*e.S9'O1*%0bh**;%d^BM3n2*(1J`;J/O(<I*ldd7?a<Lc-VD?cggd:[YPQmY[(i,-,]CFu3%BLs+&;bSD'?83RCX-Gjh#f+l>+?/h,`jU8D9&U.T]D#t%NJl>&AS]u6qSG@7G!bg847Sskil)Oe2dp^92&70$(SaAuJ79m!#]f"Q(mItW`S,"<k7U<cdFPQO6]!Q`$#6J13Y?e%=7;"qRHnVa%Z?T<P4269c:)Y\?/!`iX[<*sP9>dm:qD=LDX47^/<@ZaLAe_]&*%>:\R6f"T4C9,'YL:C4SG:=t/l]i^+)gomdRh^m1j@ujOhB:5%K53;_0*LTH4Z0b'"iSO@PV"*AdF?IBKLE-$S/QJ/Xg*VE*#f1+k7c+m>`T?fB7OoZ%B8#f50m*N,1U0IOO0qHRLn5Bk3/0ODiHW5%5<=TT3/lOE^pPfI@c_]gC^qc0fn-X-nh$:g)laGsP9V.e6&#$b8)$US;@HFS2oF3RYAb_c=HAc2&k,<Ka[Ne,``lsGUX'PK+rh;_%)k!%&1XXml8IKAegVtSD9m4)^:U?bZ6iaiAC2XO5QG&%)8Gi7P6XobCVmb)3Z*d70?G-YO\"DuI\&RDt*[?&UC<''+[;p)W%!7o6%\PW"LlpC"MpUsiTRIkkLHJIPXmXjEk-+"'Pa4/Y)9Hf*b%^?:Uc,.FPKTpNmJGJ_imm8(@&9/.nPPEkY-sFi]-!b#>hNWahW*H%X%:VAtQ=N)M#2/$8i[.?-0%FtE-<drb,b?bek&+J@neL*!"U,Y;ncL'\0',8nCc&1IPo50`=QI'Sl;i['X3MTM$i;kEmK2U=8V+WXM%@^SE)L,+XG^pP-n^5l$jaN!;hZsJN>@5-7V%:`PZ2B_[TH[DJ"&%eTu`(1Hb:R8J$E*J?i7iokGg9Q]cCs`VJCcaIVHTN&.;%k]c%AoD,/>]kjd3it42"jbZ?CIoDSSf1Ac:b(pIc.<M!.n;S=lnlUIL>=/laYdmESi1)bHUPShJ]tk%Y:UARgT%d3;5gESiK@Ugj!"eJ%L%&e5Kgt';fNZ,lN$[3mr^)!eY:1I"Y.4:nBJ\cnK@iSn:h=9!N2qI9;]Ee1n&u^=GiZ7i^a/&P39"<cC_EL10=^@8hLp(ejh:6I%(*@J%UNR<k]q^R1Rl[ma8^^'Yg>#;>_'l//+5K>^OiU>6g9"l>B_PqNQh:0grN/@Ck`1)hN,:X\"P;kV)_g%Rp0ge>_.+Se,?]Do%n1b?*m%m9(HBUhh3:2]9%_g>m`%kF`0>%FO:GMSH\qjIVFEGbs#"ch2@cc#($u24NoXc0kq5K[^4b7[I'3>Ks%$rrW#`UEf`[+dq%THTO#h6E(=m#c'?j!W$T)^?ieq+Bt62V>X;cWeq&8Z+Pm&ik&><AT2YgQf\IZE?&kJ1jSN5sg&gBTIe:Q-MIO>>:r@4eW6MR,#2t%H+^sA?6@^m7i:h!1+!eK0W^'BqujmTBcN(@:!Ae6dgME+gY<gn'r?jd.Or!PaT$?uAV-o7a,*I1%HTR[8Gl*sM5EpnEecL(:oa?%%N5D*`'Mc4h(\)Q;cd&K+!4s<pbn();$8MWs4XsK??sH5'Q!>#[9?P_"9+b6==D/E/1/(e,1hOfEA=aseZnKaNE($-UIsjNl,l%"r%9>I&+^'%Mi38$9a$>/7IlYK[#1kF[jd$>)cD(H1PT+Cn5$j*OO14XK/jQiYiL1;!AKW=h4o!Vd4V]$e7RW3k`I!/_\F?SEi`\gM+%LRS>Gc"r'NC!Hp.SFE\+Z#DOh&2`8Gm"f`d?Bg@co(*(P03k1)EUFc$R&uu)JC?6i!GFEc<9/!hX!VtCchP;TE2:)Ws-*G6H*TSo%k8B@a\hs"9NqdZ3(a_cNBbmZA`otj&:V#KP<Q^^BD/<+k?#Xd:m's+,PZ$`GLBCZabG@'m&-E.rn@Qi^(Q>([.RUA#&B_i&_#BkP%jq=]WGs:/Q`Z'm8<>]H=`BB"%dN1j!i;W>e,oW:(?jh&G3U>B]P"X=d/j73l2dB<ejTB^n:IVHi)K-'*Aot*('>rY)9!'5eg/@(B%)-Y?a/r*K,]$C*n368D)<S(/peg3?sF/bG11u9/&osm/^jLRP*lP`9L@F'a"T`kp05i#_1PXXY(%6DnE'JJ)mWCg*cS,scr_5)B"%c&K/dna!iam0I?rC=fhV.7g$Q*6K>.Z%+H3^-GDlg>SbpH0A0'J@"6Si"CsCRN"Sr:bWYYSMbe8E2+WT`C2B\LB>qp_Lp651BF0N%`CrrLi6]LI\lV]c'`lpjV,:)i(7eLKFU`kZ_T]`=I<h:RlssheCI$6f='7p6kc%`'6:dqY*_p549BFG1C6;GS'K,3GIRV=B"'[5o%6H'sqX@,Dt*qk:@O#J&,NUC`0=-P/u4U>E;oJaLZkT3&hVK1.M5V7WqU'D:mXQ[PqWsrmt7]6Z2BtQ=SEJ0D_l.2Gh#0aOZqiHlZ%@9Z=dfT1i)@jJ\589B_E*:f!6='_gMR?C/1;$[BH@kaKa4qOH#&_KC)*EW5l[Ld80RFBVM3n/[VNJK"?Zume%/TboX>tQ)fP-*\d%-m#NT6l%UFVPjfOi!/6_F)c"Q=oiU8BKi6%YUrS`!aLdd!NgsM9It=*3?Z-C;c45_&S%?njt!U[!+1Y?-6H\G^$X3M.=uc#&KQc/%HUk!1jl40k?GRon]YgB^C$;<EQ('m&/ff^mEH,L<k4#3_2G2\=Op%;pN_fMi[U-*I`Qo^QC3p%%>aQW#Uej.1j)>T;!JMkq/<h`+%2c*Ck]$j#7JI<#FkK$4+pbDjR1%9"lYY]aE@Ft\mdg3*'M:4pfBfg$B=6mSG<4/H9Nb^%^,nlnBCN,ftblVYL)G(1p=D/Dli_"9b%E&9c65[9bb:f;!Dk%fnte)7j^Oo'3O^^[%=ltDEI:(P<$rj`1L)N!siYimM-qk?.d'/F6@MOn4Y$qhBhL+UNN(-OZt([Ad_8]YCI%*,1)"ZjA=(L`)O-]tc^G6?9TL5uTbFn//WE,NTJQUeAU&KlCa&\C)TaAr\/@Xfi<&#!KPb8PpH6;*J528b$F;^#S\G?uX9d$>=c0%YK0o1S6EFKH+2]C/tYEM$a!=/i6(/Gn2_T$d=Y=\jcMc(#j'<nYiT'#acs4`@/:.h7HM5rGN@,j98,sblOd;)+k%_q8?pdWoI"Yb%F@$d)Al;\3*'"QKZ)^8X?=m-,L4c1)0#]V>Pc'.b(jq`n0%"Ne[LSg!TB!G[ni;\QGHI[e(bq:*i>/WH_/)UH"Do_fkS58"Q",H3%V726@b?QBTmjt`P/-7,ZWdp^Di7QK*\%R/-%b<=55&XcO=r<oL6In"=P<A#,6Vbs7K)%%]EZ_#]%C/tTo=;XA5PiZY<!#LE``8UM%-`O&%V,#Q>-?3F7XoThi_lWr@N\L4?#d-9S/sL:^3)$LRj6>M=Hb3)Jn*f(^JQsdV<cn"U.knNRA\E("[?p]H6KjVn#sb&QDi.Bp%K-G6(T*$Qo,s(,_Z]=FFFT?:e!%IFX)80ce:nJ./!ReX,Sb$-3oe^p$[gZ`#an=hP:FBN9*$"D65Q&9&eoi()K+m][^R=P>G4/gW%s6%)mG<adXm;D_rZS=*mr_E1Q_T-#rrrH5irc7VM?/f8SAQmocrf/=*-?K'$qTj4&m3f'aJa9!GIec(K26JiB52EJaq^QiH=%rbO%/buNZIArI3f5KNB:O_g&&\Zl.f^8*ldO8HDrq:$oDYFK=][7saKqhtsqnMRd50&GF?4Hk]Y9(I&BnDV8#uBFXiJ5,&56(M6q;6R?%E4GLMQfc#'\9""Ns3mNO/!ei5B)[?A$dkg::M@0hLRLdd=2#ZLlX'Ck1Qj#]=q)3iE#mVi6r_)J+m1Cqb.'&/"9L;M$83m\ZU(`&%:a%H*m`!tkC=lr25L_h8h%?W!Eq*KfNr9&br-?As5PaYfDLXP>R""rd&V$4Yaet>@rhCh7R=>$khcoeEJ:i6(fH?f1B]'%4a?_m#%)Q3]HU7Oi4%Y7o]1:.1+GOfFbN1=*IA0It,;;"r67.=2L5aB*_Gl[QebZ54c(,RupVG3`"`T#N7!&R6M1,SbhAUah>87r2;dWpTP%:8!.XZmW4!\.\W<Li68d<HG+pWe3TjJ^IJ=n0J\LYo,"%W[#:u*=Zcoff)OCd]dLQ"3G0gNr<HQKD6o`KATW$7mM]OL<q'7GA(B"%SW4X.dDm]qRd`?tkj!.\JdKMLk>8)_-"K$?/#CHa[^iAb9A/,dQlL<LBPD9Li`ZW45V8i2[bZq'Al,iL%>gR:39`uqd!]7og"g<g%eWSXO1ug,=D0KLB*TNkUWWLU!HH5C=YB@aI-eGk5]!"0DU.GQ3A<DU%I&[!qMBpGpr/@!,r7!*\@G+jpR=f5sc$fMKQO23h8&*V)%GLp'\mb+el(bUTU*ma8Wa0WCm[^87[jSQUk>'P`%g5;B3,Hc67'.b)JHbXQEm/9Y"*HQjo_M[:\Z!o\b=AcJ.dI8b!-lcr,3(c&X%;;k'KanKK3E:;OS><,H\YqDs!/TfUeau]L,l9TGPK_[5+rH8J.LH5Ou(t&i&3*r/qaF4Dq`0c7'A_fJ><Cs)Fg0*jL)h[:ULYX]5%,U:8T)9K>/8.0S3>j:.fFnT,#oR;i0(W^YrTq.4<deaeOqoQ(!2`(hCO^up^E`/l;@(Cfe8"!<:$R)F(*k).PU(9>P+\!YR<1.fk%@VMOu/XGO]AUu*SUJ"c#&k51Gi%rZq0d6+/TsRMRKF:kqN4Y'i\roFX!]p"C<:bAJV^rrNM-H*__F6_e9gGupOrkYpe=<$CVm/@>%`$`k[<$@U^<Sl.W3EaVI:t%F$>rclGIO+Z,,+_;9B$K1RLMFkp@Z^tMqQ=)H)bh4bB8?b.#l;jj"%+5;#C/cFj\EIbD[q.uqU4+1%3DE6(/*+8G:0B@$&GZHg8Alu,>rl+625S_H$OJEOLYq5,%OGI1,$P0nJ?DHQ9XZ5.T^+-&G4\or<H1mGTTjoHoPQdsR%g]&PYl?>%9dGj/Ndf-)U.arHg3,<O/2W&+*[K%"nf6HrBKhi"c\H?,,pb]DU[s'"CcKJW]Ypa[V_W-]:0XIei+pUL^EYk-C$s',6]t>a1P(ct%fGfntj<-05c@O-.-A@+?7Jr3IRO**J?7"lId_%ok<<GZ'p[*!*p4PVBr5&P6a,%S=F=:RMM@q)Og>sJtkD,3HjD*LaA.YI&6U1qt%<)#_p+2-H7ZAfiP>G+>PkE<tUU4J'iG_;j>%4JmT84c/14t-(UK8k/:](.5@P+:sij9VG0+Y(<<D;:A8--L!TPDpS`eoP`#F1fCb%\SF$5j#ncpk73ECprN8_-j[c3#*E@D7ZV!s;3uCBTGh"r#9gOieoHO).+h;-9,2NNM$Wga\^lX2!D-(Q2Sl)^*'0%!CBakD;CZbB%s52\DmDa8pBD;f.%Xhh0(F692LUin!-3FK@1.VHK"p>(7bh0p;#>"F<oCf0PYMBo7(.[2F.C"kL6Z@COHhUjY=.QDk5<)E#GVkd?%@]"5j25&]HZ`EZ2I#f3$IjV/P0i,@c`(V%HhoYMkfIJNb@+%]*HqMAm)c>9$>5G<-=P@19B]]R3XZ-^9K:W@ePRR:@g?%@PR0h3]%F0rXG0GUk-`oSSW#OU6)LPBo^ln_KF.dGV5lLL(=!)pnZCo/Ud.ABL9cYM!T@l6@er:K]m9JA4u2jd>+:9n$!'i8aWX4lL1ol3g*%j^PDGf$V3-kikEX])(4M1H8dproh]YhQ53"%lcARej7p:Ed/T=f<c;P>uFQ'fsTpQd^`dfQ6HSeUnGFY4higFo(eE"O5oq:b15d:%X6s?p1kW.:7'.j0ju/7-r`MJ3[+$H;l?aeWl=Wdke`0>(]dmp=[HD8STHD_U7)I*'rWmM4T[.J_jEEVZ?Fp_0n.qt[KVHl;Z=k$k%!#kC:agp3`GM,?"r\ufDN:k,l2ZN_&VEEk$g*`0aHaj:A1V*ePfNj-6\d#40rMW;e>-mL"TQ9_<.#/:OSY5hXg,Nu%l%fL1NJofX%@Md5.LIf$S%V9@&]RA1[gk)<EENZ3^FUR&A?Ljk7$U0^.hnpb]T@"t+8+%"K\[hpEP5XT\Jb/d`a()qdTZgTiKi6qGM?9&\B:];R%\+XeV)e=(i-t5a3CA$_#%rr&<%VL/PZ)_*u?5&MD[9N,,AcEgS62HPC5rs2@?sHDsiTUL_.r3+(ld2KU)lOMig70'U2RSlmqlRLC%B;iYJ[09eSeFC3D6I+8Y3[P##9`Z](i8'Me39Xd:_mU4GK9(F1K=A"t^gRJ9)p)rJNis!2e'_?3YQ9s$eT72Hpp*SK,+WARAFZC2%>O1"IF%6JfcIT_bF%".\plV7nXs6hgD06k]>">C>&ZOZGchFD%[.p"O[.fr*<psP2h(_"HI,k.\bCFqskWU?kILs2b';>.[]u@#i%.=@ifAu'2*GPOrTRZVp!.AJ9j_AH!uh!+H)"9^Q7T0dsoTU`Aj]n]M>kue=]?(unL[sf5=A:cZ42]JVtmUU4D2j-)Rqq,_'@q3",%GL5%jqCn2l7i7k-R]=ZA&4Of:T6qb@lQQ]G-?rB-Todan!dY,l8/0Z=\&YJ8FmM+Js(;jV93R\9XNj!7%h'^4bIc2J*)2rGadH,$%8tF'\%Eru!AHL&aBo4+_3j-i-39k61f;=JE"^[SM$,tZK@'.oMQFZiJRmq6iTiFKRA2ftJa9uqCo\n&a\%[>BrA_BKe$YD=!Jqn.%DH#?%U%Va^FlWGGMEA<8201qnY3_?(OJFQQ2sgmK7/nRkEkPu&)Ufs_aVHSr]8rnXnRVPGNp`Z]RUgJsX/`E\3]$?N)Jj-e0!h)W%[='X(W"Fs6$&X@<r4GcQercKj,:f`Sj\p>S1e-Am&rFn/pqiCCEnVf$_\b`R$WSiD@+I]'RVX]C_:bjTEt_se!Csi"gX#7NK71]n%pO%'_hfZ6dJ`X-[@Bl%r7=8'I'`I;YEAZ-"E3k=jk9Mj#(=2=S>Y'")E8nOMjQOlahH4N)/Y::KoKg-U?.+nXU<B>+4"i,1AELf9%IcF^4'P/__J1'#5T0D%ZRuaJ(VmlpE^'Fnt]6f.t&@.1a]A2.i`H5qPPH22UR(+h-CC[$?>t!m0Tj5icg6[r^+>QH%o@!Q(!(Q%-%1Ip1!Ro>do^P,o=6&oSn:A@r$bef.g?sdb]n3s;/S&^4p*G?%d%-`eG`W>3LVe.0I%+V`Gm9;^2W#qLG=HE:\>)"^8Zb8=r(,-(C%U*dmPYF1+__2c;fQka>0]"JH"i$-J=\-/IS;c:+=4gJI[>1<&P17j&Qo3B+tS=<c2V9YZuM>]!f;q?iI8,M9[7D]iF^>Yq2[*ODV%=4J*tJ^S8H%43.3b]$@@+1nL/nbI([jT4@]CmFQk>TQdJ/2"(<N`<f!G[Fi7_]0#4b[634J^$lnG)=D`k9D^?5=c\fNU3,:dq>0=%J<_7)"^@j=QCb><I&)H!GlXFD,*c[GS3D5j?:Z4bPDS8+i]pNFhua4)l3&h\$%pqUCBMIUF_HVjJ*8?"8="lC#;"QbjR-k,+@&Ft%"ap%+fd]:Kg#-s"V#b2I::n0F]'r%Er#*/?V?omA$]:Km?rehaTAj!c"f>uR['kYV>(aQ/j@aU;#Y;/]N]!7a"[g]][*A`MW*g\j%Bd0N`OE)>._HaMj9L*gjo)On5[VXZ4Eun4gFtCl)(]LV^$W&kEYm.!3@4^Q[Hm`PrcQd!epNX-im)qq3U9H?5]F%0*-9pYK]J.Yr%0p2ZH3#8B;\=o5N3gIcmW8N:qL'b4597hooH4h%kiWs^h=eRrh@)dd:Zb=W>)rG"+o$PGEX+>Q/\LrnZVu<d\C;E9%I5-5Q6l`M&%lncJ?fVYr]JAIXhAAZ^oSuUq0!Cde(bA.Eb!,C>5jmOSDVmT:QGe:E]NSj)Pp?r:L+5RK#S#?gg!=MPH:1WeR8qPPm8V\Yp^8u?u%0'7E4@ko(a?tq\SfaJp?"s.Nk_IK=]/NCCSD>+DKGYIj"k^l=]1f>Csi+b&)!H?]o$Y/4"GuZ\bWE"WUanau#?;ShLrH_f"'QM6K%%KlY)/e1#emZXm>b]u-KS]J7?,^:K'4=32k(@:0$"]r0S[CqFX>JK4&I#(=bqrio$Je!.Z%SXK=[-eKf^&.bO45*(=_9RHER;bqc%_\.J)Rsiu?c)VkhK0+P&&+:Voeh,ei3`;F&XZ'^N2FqSWm0P%/$Z?B6[6C-KUpV>_7AQe3]=N:$"86\(4S5=1"J0i$"I@t!g.>.c%N1GmKa]!2J65mgVQ-^G+ng]%4=]L7^:01RlM[OS4g0Fj*ddu`e#&VYWLUk2h5Aa/0/BEZ,YI=Icmm8Arn:p>RZLi6r!tRjR:U3f"%S)".8[Op!C]L"TS>i7!WeAs2Y:TWe8!?XhsG=0f3_NI.$)=VKc41pRaC?JO'\Vp2emssf_>O(KO,6W&;A:DoFT`WA,\M3j*Q%2i)%I_R1^\S-hUb9kK]C1#P0?LND-gfs2?eid;onh+X=]9ss@,irW@1e0*IaT`0oS;W=X-(j1YZPW)@h>qu5VqakpeTZ^J"!.*GoRqjT%#5TucgHJt1CPDi;Bj>b8))2r2ONM`R2m7G@*ps:BpWsqX4(Z6dKrT<XOd@869[G.'lV9`0a]#c+o;IU5%ALl%.9P4#[1=q(%D$oa%QP%4aRPUCrZfm]/co8E1&slu%p@\.:rOfT`Bq`(m;^a=l<t)nVgI'W)J7\$\`[bDXT?9h+G-dIB4?pRJe!Ui..CA1a2:YoJoB+3g%0c&=!TYbjl[LZp3H3\9cSn^[91O9Rdl1Z;Rc<OKGrN89Bm8LN8NU)S%cqF_Q@fa$L!6gH'6p'A\d</B.GZKhiCT^>oQ*5ti7ZPYZ%\9YUe*l:)5:f*-['Q6/k7p!^9H]qM<0e8MnY5Tt!`6jZ`>;:FP]sDmUWl<n/`k7\_&8i"9=@F@5$h\<s5Ek`BR4_pthHo2&:aQfb%?u)u_<7i3n$mcR6'JaY>8k;eOZ)DDXHgTgG/8o301]qVH(E:"dJIG'AfZ%]D0G1PVl%#hDf.PRQP5=e[VEDKq1GT:giC92-]_bt-%M;FSko\T"tq.X,LbC7j7<agTX4KkAm;aIPTSkcmpH+1*W_Gf.X7$k0G/U,hEQ^P].O20,&Y$][%L@%!h6c(Vs$`J'00R5hIp=b3=%S!oG`[r/O$AcLT2oZa,NlNk5W]`jr#f$]7^j,O;H(cA>;I[7:I!t!I5mqBdK'G":",3n#ej%@dg\Z0?p$a;U&BsG<!lO8C9c=8lm%#JR+\g8@rZa1J?mqmX^CZVG#];h!0Ilqu1f]7'MCY@CXHC/Hqakuf50)1DE`S[+;6=_6k]R\Ae4r*YQJ`ts5Po?;[)5?p@,ZY,UX%hHmo[gM7M`T76]jcfedZ_\p44)R\rgJo^TTp6rYiV]YpZV=Ld"DmRMhhOIlb])'%k?0"?.S0a$M,'fm=Y;uMM#P]?4`p@fXWueU^%Q8))kbrVC"rl#/rs-H[Co#DX=l.Ia0D`W9UQMJ4pPqW1,jN4$#55Ubsn7M:a`HRgO^3ogD.Ini^rr%Vq+5^>;YW#h$q:jYjYF[lP%C68cbS'>=,A8T&,rq-(\Hh1VEj"FK;J%5F@a(I&4RA?@fHL^qWJpR7YX-^$IT)IQ-5:u'l!%Hb"lt9@!TU6b4o7)/^lGregg-9e?%49"oE49"nfa1i]Rm)j%K96dho<1C"aZ>eDPQ/p<B<Sq!ehpAu"T)anWbhnX#VgS-f/4*F'TeFflR=M#@c8'S'\]qASY7kjjJRF3C%_sSc877d:-$kUo>3rb7"#B\Tr(`(g(,%j$%&^3DMTDSO3;4:1$Ce?'2hr6!#IfU]]TqYmD_`A*KB*_%cTH*%Hk;LUYZ5B>Jo-Paa%;R;IP`-i6hN,i#<nfQT8nq9qUqYN<pNlfl%2FKN1ZJDP"?+CVInQjs5I>d5Gk2k>"Tj%O]PJTKF8SaJY&kGaeZ+Pa/bUqI2\p[9M%0]%h6F5L>rI/?2skd78TfXaTOT=*VRE!9;U(b1GH8??o\,cO/i/@VSCf[V'SpUi9k1F7Mt1!J82:0t5iiD'X^-b2(RD+sdA-F(u9%^0;A!m941#PX!9[V`#,ML3u[B&[N@3>k4c-7Fic2M(Sn1O9Gs['KF^N@r3thd\I4Y-,T^?#3#n+:#^T?KMLcQjDiK5i%)Lq?/$[O%MacP:.oSQDN#mm4.QNZ*17:!g0m[Ls+;C\:,c')KVf7/C*a<^N.ZFrjN<^glUIeoIAdG=D(*Ei\,ScVRClb@F)B$ek2TVb-7nY!7%A`=<6aW8C,GSs7Y1sPoQnuU40,u#tIgah-;QDmLLTj4S=f_NT\4YjH`f=$_Llk[hGFPoI\Qf0e0K6fa-:J$m^Q7bd[S$JgA2\Xci%`@"`X<^)Es0%8^RiB(X+=I\GnfHmiXbQ=24Y?:YU:LW]=Uj=Dlj^XRo2fD_WHq67KaUU&BAr;%ZY<J@FH.?JdW]JAS+-XSNABgXh%:7jOo4_"qBZ?PKJ)Ks^069ICkJY`cfb0."q7`N,%a.m,UWQGWC&VdGte68Np<O/DghS+`&6:-uG>nh>u6V)cOL<KpJ(+#Za.'m&Y%NSPb1alt+6_);Hr-ALF/h-d,8SAA&K0iiV/GC;&X9Vo"V6'W(mC`=\chGn@KI0p5#?s@2]Q,.5ZkFXq,FP1G^bf;89P'?0!F.A_]%a%_0<ZJ`dCiU1$(j;*+YM]ssr;.;EJB6Nic4c(^a94SrVLH#B6V#e\%Om,b>WlelUght']-Mk[<8'_gNjie)E;5%)dA%W[^Q`jk!%F[SJ9_Xtna\;8'O<hZ&(:^_/Vo$X:I1$!dNF+`3:ZHt&EnEt1@J%)g,>CZP8[QZa]e`>)9h_-09eVo\PQ?JN*AN$Ma8&VU'bC!mj%-7nXZTJ$mnRIlofM>NWi4n6+/#&"1_;T-c>T!`+CC:39M,gAO</RhjGWC21U^K3Q@a_[Eb]C),RPW`VP:&p6JgLDeOQ\]^[9o/js%g+=Lt[Uh$U#OG.2L#.\RGFC[S9ofk^7[Zo].hfso9cjp&*a?8S.XVaYI!aR.Nti$cL`j0;-JaNJT%cQ7Mbi!lTXR/gXbd<_n;)nR%Z)i*j5I4>]R"dPL'7P/:R<.ib]>AhF]JSJF/3&mOB\&E6/#?@+#dqkON(OW.b:*(%F"(aA#<?93#t9Kq%VH^27]sU/dO5K++6@Ne%GI+KfBp*RSPDpnWWt[]<'3=\n#nYBgZBL.k[HK#/\^=SkE`C@03.RD/FpfGC]$i>V8Ac9#8WM6YB#6PO3<D0$c_5R5TdaG]Uq.PF%"gr'Ad<rGPH-hca1KpOA<YEkcbT+4@/oG!hHGn""B*gY&QlS(<Fa#A5LMckN]YRU,*__Ml(>Rdi*>kib]]@cSn.@N#E@jOdDjEY*%gEnY*ZtOWM1kbqHR-h1%M+6nqQ<m6ZH\Gp`@h;hsV7p!t9mqSg:DugK-Bt:hV)FV!^(FZT^n98lA6*6i7WgB7r[VJj=0fS>KoW[&%=sA/cL-ot80Y_e;]9dqo^fnq/q1.eTjF`cfC@5iJWoOpQ1eET?8^#\R9NYV5MfrDT(1Wp];c<qm.$0EA6E9[_5Y?3%7'fDHJ_D,s%pAn5WjU8%#IO!Nf?P#n)43kq&9R/$b5:tq^/hHQC;kXa;GUDm1<!#5l$#A\PEN([Z\-m(as)$g7;tQ+W,SLcrQV]N&/r;`Bc:"LW%HF82;8pWS23C(TEY#<!VfL%#2%go\.ZB+)"RIj0MK?/?.oB[HtG]e##;.SgL8-Maa49u_:@[t5kVV1$>pMtVA?.<nRA`iY25>l:E%!bJ%XPtS8Z[lE$;BQ7rMSa*Ypcoc`uP`U28QI-V';bU22fMrX"GgH'V3SB=R*p^pS:\M2Ij&S"`c`kctf3ap&;L5u6AA.SdLqX$7%n=qD4`kU[a&-`F=RnT4==(nHFYW%>>dJ>dL[3nIKTua"##T*fD.^ilMBtO.Doi];`WKLk4m"G))LRikb<.q$E'de$M`E@mGh@Is@%&=mV/(K=nhGiri!U+BM'0<=>i'c]Cn*bosu:I\o1WR]8]rq6loCH=@N>Q(6#`G(aNWBh^0T;jocW^=o%Z.,g=+HA-C$G&cG)G4H_%'=8s78W`_)TfWmr-\>&(.[+j!>h.dTOfd1PJL>S@jYL%QOhl&%6.gHR8F&W7[4QkYP*C\L5Gjd0EfJ;j/LrjW!X%$1aWsO\Uo$ZP%^D9=%6*e^Z.An3RH\1[9e9Ud#=]'H@BM*@@jRCD'+!>F@erR11gS;2nRDS'iW$,.j-cfVkhj&Z&A7CfTCee(D40Al(52bsOUcOpB%YpRM.TXCFQ:k1TT^qKgrTE2HeBcRVYBlnJP4>^]X.M+<X0737n9o%!QG"oX/+-,OjR*isEEuF-V[Kpl'((BjJDW-lY?*ic'6]Y>M%7XBbS`#9DSLqcIW)Ks^?$1V4qhuI1j)j=<:r$^<T+D;\4S1g)fg=0Y4.*IhaSI?/Y.LajtAdqZp8]o/%atqT""FET/U?e<Z*D;ki%W!n&$p#-B$I`EK0E#IjLUib<J(N]X:b-P7"!X:4aWXCZqBW;1hg.N_?MRYV]HlDJM""F`e/A2A*gT2*tH3;\$T9]]%fI8SD!%-cm%mCBLYGmFY2i3<H3WsCn0K.,\e+Jhk:TB@RJ/dsJ!Ig0%7@]GR&GJ&qsVHB9*#Rmfq37Y,=_AEK=&lbYI(35@-5A^_$Nfn`m0l0HV%7oA"`a,TeI!h`QC+;s*`!k)O^G#:/.<jGP)@)?(1DO=6&pQcDu`b\c[T.!Xq@cE)e)tTLs0cf2_`]dR1B%Lp:HN-Z3$V)Ool8`%3%/Is4[3OCu(mT*3tA1,o([HP?BDqPKSm2*'bN2)L3+D2NFM$5@u=dEJD*9o@C8UBWgmV8;-.J"X&47=K0%D!o\<-ZkK=W(Kf\>3FB%5?jZ;lO`,W$0HXG[0a\!'S3ncZBWZ_(KnD_QSNDd8drgVr[uoL"'$mlY5tlQN(cb+d*PbAN"6hbI9?%f7lTa>WN+!_B?pegi6gXn%<WRUC:5b/jK-FSnb=m[Zjgir).>*:MnS1c4MH,rsd*M3@=Dl@@'clC%D&$/qOVDO]UtOMI<10eb8[3XQS+?i_GB%uj%T@*IQ'u:k%pDms\d^sf[];B`\DhY+E)]eR>rnNTt9Q%OZ,`F@QS2\'L3FMXCfGr*miUWqL>GH3Hi@sH&`[k_m[Y.$],J]aNR2R,)"4B#+d`>Lc%iI)F8BImif&Yb=MjT%2A0paD!:i[`*;49=2.!guUj;>X:8U1r%W93MgV*GX/>$C2K\Ol'c[m!?NO9hSHZ+HG&"fi`9j1#HIK+E*Q%XORC0:us@3#kj&e[(1'^r*i+K'IYo8(]nbXqd.MSZ/A'<gPUUjcoY=`h^e"_k`r9*qsdi!:e6"^U=8L.Q\4)o=6=c$-K&Z#<JuoN%OLsuHXWS'=W.`mn_F*4og]8f"kUKEpaaUIX]apKCm<=gep4_2C$mEShj!dg4<1YjQSr)HD)Q,ELQB^YoXj&#j/B1JfSXuYa4N&Y_%)=dZ84ld-*]D(^9kMNG0HRn78#C!gimVO]Q[[Ls;<E,HiShcMrC5V/:76tca5tM7s/N'[qr.fngrTWQ2/mf^RUknI7OJDXMl^'iN%H>\4Zd)!BgWR!,O(Mn=0&)$ML:VXU@l(IDrTD0Eui;5bg0E1Y*Ma)Yjs7ahm^=-"D4$38tMnb^?qk)J9c-j6gq>SXf^L*G[I.?dp%e$k[Ilu+f>^V5*ep>tV`c'oe]rkaP@AGc'R^A.;LrnGQp"6lfsqu~>%AI9_PrivateDataEnd